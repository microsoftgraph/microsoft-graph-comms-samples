{
  "client/Microsoft.Graph.Communications.Client.Transport.GraphClientWrapper.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Transport.GraphClientWrapper.html",
    "title": "Class GraphClientWrapper",
    "keywords": "Class GraphClientWrapper The graph client wrapper. Inheritance Object GraphClientWrapper Implements IGraphClient Namespace : Microsoft.Graph.Communications.Client.Transport Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class GraphClientWrapper : ObjectRoot, IGraphClient Constructors GraphClientWrapper(IGraphClient, GraphClientContext) Initializes a new instance of the GraphClientWrapper class. Declaration public GraphClientWrapper(IGraphClient client, GraphClientContext context) Parameters Type Name Description IGraphClient client The client. GraphClientContext context The context. Properties Context Gets the context. Declaration public GraphClientContext Context { get; } Property Value Type Description GraphClientContext DefaultProperties Gets the default properties. Declaration public IEnumerable<IGraphProperty> DefaultProperties { get; } Property Value Type Description IEnumerable < IGraphProperty > GraphLogger Declaration public IGraphLogger GraphLogger { get; } Property Value Type Description IGraphLogger Methods SendAsync<T>(IGraphRequest<T>, CancellationToken) Declaration public Task<IGraphResponse> SendAsync<T>(IGraphRequest<T> request, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description IGraphRequest <T> request CancellationToken cancellationToken Returns Type Description Task < IGraphResponse > Type Parameters Name Description T SendAsync<T1, T2>(IGraphRequest<T1>, CancellationToken) Declaration public Task<IGraphResponse<T2>> SendAsync<T1, T2>(IGraphRequest<T1> request, CancellationToken cancellationToken = default(CancellationToken)) where T1 : class where T2 : class Parameters Type Name Description IGraphRequest <T1> request CancellationToken cancellationToken Returns Type Description Task < IGraphResponse <T2>> Type Parameters Name Description T1 T2 Implements IGraphClient"
  },
  "client/Microsoft.Graph.Communications.Resources.IResource-2.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.IResource-2.html",
    "title": "Interface IResource<TSelf, TEntity>",
    "keywords": "Interface IResource<TSelf, TEntity> The stateful resource interface. Inherited Members IResource.Id IResource.ModifiedDateTime IResourceBase.CreatedDateTime IResourceBase.Client IResourceBase.GraphClient IResourceBase.GraphLogger IResourceBase.ResourcePath IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IResource<out TSelf, TEntity> : IResource, IResourceBase, IDisposable where TSelf : IResource where TEntity : Entity Type Parameters Name Description TSelf The self type of the resource. TEntity The containing Entity type. Properties Resource Gets the resource. Declaration TEntity Resource { get; } Property Value Type Description TEntity Events OnUpdated Event fired when this resource has been updated. Declaration event ResourceEventHandler<TSelf, TEntity> OnUpdated Event Type Type Description ResourceEventHandler <TSelf, TEntity> See Also IResource"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.html",
    "title": "Class GraphHttpClient",
    "keywords": "Class GraphHttpClient Graph client that handles transport over http. Inheritance Object ObjectRoot GraphHttpClient Implements IGraphHttpClient IGraphClient Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphHttpClient : ObjectRoot, IGraphHttpClient, IGraphClient Constructors GraphHttpClient(IGraphLogger, JsonSerializerSettings, HttpClient, Int32, String, ProductInfoHeaderValue, IEnumerable<IGraphProperty>, String) Initializes a new instance of the GraphHttpClient class. Declaration public GraphHttpClient(IGraphLogger logger, JsonSerializerSettings jsonSerializerSettings = null, HttpClient httpClient = null, int numberOfRetries = 3, string correlationIdHeader = null, ProductInfoHeaderValue userAgent = null, IEnumerable<IGraphProperty> defaultProperties = null, string metricName = \"PartnerHttpRequests\") Parameters Type Name Description IGraphLogger logger The logger. Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings The json serializer settings. HttpClient httpClient The HTTP client. Int32 numberOfRetries The number of retries. String correlationIdHeader The correlation identifier header. ProductInfoHeaderValue userAgent The user agent. IEnumerable < IGraphProperty > defaultProperties The default properties. String metricName The metric name. Properties CustomRedirectUriGenerator Gets or sets the custom redirect URI generator. This is called in case of a redirect (3XX) response from the request. Clients can use this to read the response and give the new redirect url to call in the next request. Declaration public Func<HttpResponseMessage, Uri> CustomRedirectUriGenerator { get; set; } Property Value Type Description Func < HttpResponseMessage , Uri > The custom redirect URI generator. DefaultProperties Gets the default properties. Declaration public IEnumerable<IGraphProperty> DefaultProperties { get; } Property Value Type Description IEnumerable < IGraphProperty > GraphLogger Gets the graph logger. Declaration public IGraphLogger GraphLogger { get; } Property Value Type Description IGraphLogger SerializerSettings Gets the serializer settings. Declaration public JsonSerializerSettings SerializerSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings Methods Clone(HttpClient) Clones this instance with optional overrides. Declaration public IGraphHttpClient Clone(HttpClient httpClient = null) Parameters Type Name Description HttpClient httpClient The HTTP client to replace the original. Returns Type Description IGraphHttpClient Cloned client with the updated properties. InitializeServicePointSettings() Initializes global service point settings. Declaration public static void InitializeServicePointSettings() LogRequest(TraceLevel, HttpRequestMessage, Object, String, String, Int32) Logs the request message. Declaration protected void LogRequest(TraceLevel level, HttpRequestMessage httpRequest, object content = null, string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description TraceLevel level The level. HttpRequestMessage httpRequest The http request to log. Object content The response time. String memberName Name of the member. String filePath The file path. Int32 lineNumber The line number. LogResponse(TraceLevel, HttpRequestMessage, Int64, HttpResponseMessage, Object, Exception, String, String, Int32) Logs the response message. Declaration protected void LogResponse(TraceLevel level, HttpRequestMessage httpRequest, long responseTime, HttpResponseMessage httpResponse = null, object content = null, Exception exception = null, string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description TraceLevel level The level. HttpRequestMessage httpRequest The http request to log. Int64 responseTime The response time. HttpResponseMessage httpResponse The http response to log. Object content The content to log. Exception exception The exception to log. String memberName Name of the member. String filePath The file path. Int32 lineNumber The line number. SendAsync<T>(IGraphRequest<T>, CancellationToken) Declaration public Task<IGraphResponse> SendAsync<T>(IGraphRequest<T> graphRequest, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description IGraphRequest <T> graphRequest CancellationToken cancellationToken Returns Type Description Task < IGraphResponse > Type Parameters Name Description T SendAsync<T1, T2>(IGraphRequest<T1>, CancellationToken) Declaration public Task<IGraphResponse<T2>> SendAsync<T1, T2>(IGraphRequest<T1> graphRequest, CancellationToken cancellationToken = default(CancellationToken)) where T1 : class where T2 : class Parameters Type Name Description IGraphRequest <T1> graphRequest CancellationToken cancellationToken Returns Type Description Task < IGraphResponse <T2>> Type Parameters Name Description T1 T2 SendHttpRequestAsync<T1, T2>(IGraphRequest<T1>, CancellationToken) Sends the request asynchronously. We only retry if the Http request fails with an exception. We do not retry in case of error response returned from the request. Declaration protected virtual Task<IGraphResponse<T2>> SendHttpRequestAsync<T1, T2>(IGraphRequest<T1> graphRequest, CancellationToken cancellationToken) where T1 : class where T2 : class Parameters Type Name Description IGraphRequest <T1> graphRequest The request to be sent out. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IGraphResponse <T2>> HttpResponseMessage received for the graphRequest . Type Parameters Name Description T1 Type of the content present in the request. T2 Type of the expected content in response. SendRawHttpRequestAsync(HttpRequestMessage, CancellationToken) Send a Http request as an asynchronous operation. The content sent using this is not parsed or logged. Declaration public Task<HttpResponseMessage> SendRawHttpRequestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpRequestMessage httpRequest The http request message to send. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The task object representing the asynchronous operation. Implements IGraphHttpClient IGraphClient Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) See Also IGraphHttpClient"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphHttpClientContainer.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphHttpClientContainer.html",
    "title": "Class GraphHttpClientContainer",
    "keywords": "Class GraphHttpClientContainer This class is used to handle multiple http clients within one service. This class extends the concurrent dictionary and contains a mapping from a key for the client to the http client itself. Inheritance Object ConcurrentDictionary < String , IGraphHttpClient > GraphHttpClientContainer Implements IDictionary < String , IGraphHttpClient > ICollection < KeyValuePair < String , IGraphHttpClient >> IDictionary ICollection IReadOnlyDictionary < String , IGraphHttpClient > IReadOnlyCollection < KeyValuePair < String , IGraphHttpClient >> IEnumerable < KeyValuePair < String , IGraphHttpClient >> IEnumerable Inherited Members ConcurrentDictionary<String, IGraphHttpClient>.TryAdd(String, IGraphHttpClient) ConcurrentDictionary<String, IGraphHttpClient>.ContainsKey(String) ConcurrentDictionary<String, IGraphHttpClient>.TryRemove(String, IGraphHttpClient) ConcurrentDictionary<String, IGraphHttpClient>.TryGetValue(String, IGraphHttpClient) ConcurrentDictionary<String, IGraphHttpClient>.TryUpdate(String, IGraphHttpClient, IGraphHttpClient) ConcurrentDictionary<String, IGraphHttpClient>.Clear() System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>[], System.Int32) ConcurrentDictionary<String, IGraphHttpClient>.ToArray() ConcurrentDictionary<String, IGraphHttpClient>.GetEnumerator() ConcurrentDictionary<String, IGraphHttpClient>.GetOrAdd(String, Func<String, IGraphHttpClient>) ConcurrentDictionary<String, IGraphHttpClient>.GetOrAdd(String, IGraphHttpClient) ConcurrentDictionary<String, IGraphHttpClient>.GetOrAdd<TArg>(String, Func<String, TArg, IGraphHttpClient>, TArg) ConcurrentDictionary<String, IGraphHttpClient>.AddOrUpdate<TArg>(String, Func<String, TArg, IGraphHttpClient>, Func<String, IGraphHttpClient, TArg, IGraphHttpClient>, TArg) ConcurrentDictionary<String, IGraphHttpClient>.AddOrUpdate(String, Func<String, IGraphHttpClient>, Func<String, IGraphHttpClient, IGraphHttpClient>) ConcurrentDictionary<String, IGraphHttpClient>.AddOrUpdate(String, IGraphHttpClient, Func<String, IGraphHttpClient, IGraphHttpClient>) System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.IDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.Add(System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient) System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.IDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.Remove(System.String) System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>>.Add(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>) System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>>.Contains(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>) System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>>.Remove(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>) ConcurrentDictionary<String, IGraphHttpClient>.IEnumerable.GetEnumerator() ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.Add(Object, Object) ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.Contains(Object) ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.GetEnumerator() ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.Remove(Object) System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ConcurrentDictionary<String, IGraphHttpClient>.ICollection.CopyTo(Array, Int32) ConcurrentDictionary<String, IGraphHttpClient>.Item[String] ConcurrentDictionary<String, IGraphHttpClient>.Count ConcurrentDictionary<String, IGraphHttpClient>.IsEmpty ConcurrentDictionary<String, IGraphHttpClient>.Keys System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.IReadOnlyDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.Keys ConcurrentDictionary<String, IGraphHttpClient>.Values System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.IReadOnlyDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.Values System.Collections.Concurrent.ConcurrentDictionary<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient>>.IsReadOnly ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.IsFixedSize ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.IsReadOnly ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.Keys ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.Values ConcurrentDictionary<String, IGraphHttpClient>.IDictionary.Item[Object] ConcurrentDictionary<String, IGraphHttpClient>.ICollection.IsSynchronized ConcurrentDictionary<String, IGraphHttpClient>.ICollection.SyncRoot Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphHttpClientContainer : ConcurrentDictionary<string, IGraphHttpClient>, IDictionary<string, IGraphHttpClient>, ICollection<KeyValuePair<string, IGraphHttpClient>>, IDictionary, ICollection, IReadOnlyDictionary<string, IGraphHttpClient>, IReadOnlyCollection<KeyValuePair<string, IGraphHttpClient>>, IEnumerable<KeyValuePair<string, IGraphHttpClient>>, IEnumerable Constructors GraphHttpClientContainer(IGraphHttpClient) Initializes a new instance of the GraphHttpClientContainer class. Declaration public GraphHttpClientContainer(IGraphHttpClient defaultGraphHttpClient) Parameters Type Name Description IGraphHttpClient defaultGraphHttpClient The default graph HTTP client. Properties DefaultGraphHttpClient Gets the default graph HTTP client. Declaration public IGraphHttpClient DefaultGraphHttpClient { get; } Property Value Type Description IGraphHttpClient Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) CollectionUtils.ForEach<T>(IEnumerable<T>, Action<T>) CollectionUtils.ForEachParallel<T>(IEnumerable<T>, Action<T>, IGraphLogger) CollectionUtils.GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey) CollectionUtils.GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) CollectionUtils.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionUtils.ToSortedList<TKey, TValue>(IEnumerable<TValue>, Func<TValue, TKey>) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.Any(IEnumerable) Validator.FirstObject(IEnumerable, Func<Object, Boolean>) Validator.FirstObject(IEnumerable) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.NotEmpty<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) Validator.VerifyNotContainsKey<TK, TV>(IDictionary<TK, TV>, TK) Validator.VerifyContainsKey<TK, TV>(IDictionary<TK, TV>, TK) Validator.VerifyContainsKey<TK, TV>(IReadOnlyDictionary<TK, TV>, TK) Validator.VerifyContains<T>(IEnumerable<T>, T)"
  },
  "common/Microsoft.Graph.Communications.Common.SlimLock.html": {
    "href": "common/Microsoft.Graph.Communications.Common.SlimLock.html",
    "title": "Class SlimLock",
    "keywords": "Class SlimLock A SemaphoreSlim based lock implementation Inheritance Object Disposable SlimLock Implements IDisposable Inherited Members Disposable.Dispose() Disposable.IsDisposed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public sealed class SlimLock : Disposable, IDisposable Constructors SlimLock() Declaration public SlimLock() Methods Dispose(Boolean) Protected implementation of dispose. This will be triggered only once regardless if manually disposed or garbage collected. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Disposable.Dispose(Boolean) Lock() Acquire a disposable lock Declaration public IDisposable Lock() Returns Type Description IDisposable Disposable cleanup to release semaphore. LockAsync() Acquire a disposable lock Declaration public Task<IDisposable> LockAsync() Returns Type Description Task < IDisposable > Disposable cleanup to release semaphore. Implements System.IDisposable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphRequest.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphRequest.html",
    "title": "Interface IGraphRequest",
    "keywords": "Interface IGraphRequest The request object used by the graph sdk. Inherited Members IGraphRequest<NoContentMessage>.Uri IGraphRequest<NoContentMessage>.RequestType IGraphExchange<NoContentMessage>.Content IGraphExchange.Properties Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphRequest : IGraphRequest<NoContentMessage>, IGraphExchange<NoContentMessage>, IGraphExchange Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphRequestExtensions.ToHttpRequestMessage<T>(IGraphRequest<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.html",
    "title": "Class LoggingExtensions",
    "keywords": "Class LoggingExtensions Extensions class for logging. Inheritance Object LoggingExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class LoggingExtensions Methods BindToILoggerFactory(GraphLogger, ILoggerFactory, ILogEventFormatter) Bind to ILogger Declaration public static Observer<LogEvent> BindToILoggerFactory(this GraphLogger graphLogger, ILoggerFactory loggerFactory, ILogEventFormatter formatter = null) Parameters Type Name Description GraphLogger graphLogger The graph logger ILoggerFactory loggerFactory The ILogger ILogEventFormatter formatter The message formatter Returns Type Description Observer < LogEvent > The observer of graph logger Concat(IReadOnlyDictionary<Type, Object>, IEnumerable<Object>) Get the merged propertied. Declaration public static IReadOnlyDictionary<Type, object> Concat(this IReadOnlyDictionary<Type, object> properties, IEnumerable<object> additionalProperties) Parameters Type Name Description IReadOnlyDictionary < Type , Object > properties The property collection. IEnumerable < Object > additionalProperties The additional property collection. Returns Type Description IReadOnlyDictionary < Type , Object > The merged property collection. CreateILogger(IGraphLogger, String, Guid, LogEventType, IEnumerable<Object>) Creates the ILogger interface from Logging abstractions. Declaration public static ILogger CreateILogger(this IGraphLogger logger, string component = null, Guid correlationId = default(Guid), LogEventType eventType = LogEventType.Trace, IEnumerable<object> properties = null) Parameters Type Name Description IGraphLogger logger The logger. String component The component for which log is created. Guid correlationId The correlation identifier. LogEventType eventType Log event type IEnumerable < Object > properties Extra properties for the log event Returns Type Description ILogger The ILogger interface. CreateShim(IGraphLogger, String, Nullable<Guid>, IEnumerable<Object>, ObfuscationConfiguration) Creates the shim graph logger. The shim IGraphLogger wraps this logger and appends the specified content to each log request. Declaration public static IGraphLogger CreateShim(this IGraphLogger logger, string component = null, Guid? correlationId = default(Guid? ), IEnumerable<object> properties = null, ObfuscationConfiguration obfuscationConfiguration = null) Parameters Type Name Description IGraphLogger logger The logger. String component The component for which log is created. Nullable < Guid > correlationId The correlation identifier. IEnumerable < Object > properties Extra properties for the log event ObfuscationConfiguration obfuscationConfiguration The obfuscation configuration. Returns Type Description IGraphLogger The IGraphLogger shim. EnterMethod(IGraphLogger, Guid, String, String, Int32) Log for entering method. Declaration public static LogEvent EnterMethod(this IGraphLogger logger, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Error(IGraphLogger, Exception, String, String, Guid, String, String, Int32) Log exceptions with error level. Declaration public static LogEvent Error(this IGraphLogger logger, Exception exception, string message = \"\", string component = null, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. Exception exception Exception information. String message The message. String component The component in which log is created Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Error(IGraphLogger, String, String, Guid, String, String, Int32) Log messages with error level. Declaration public static LogEvent Error(this IGraphLogger logger, string message, string component = null, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. String message The message. String component The component in which log is created Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Flatten(IReadOnlyDictionary<Type, Object>, IEnumerable<Type>, IEnumerable<PropertyInfo>) Get the flatten key-value pairs for the properties of LogEvent. Declaration public static IEnumerable<KeyValuePair<string, object>> Flatten(this IReadOnlyDictionary<Type, object> properties, IEnumerable<Type> ignoreTypes = null, IEnumerable<PropertyInfo> ignoreSubProperties = null) Parameters Type Name Description IReadOnlyDictionary < Type , Object > properties The properties IEnumerable < Type > ignoreTypes The types in this list will be ingored IEnumerable < PropertyInfo > ignoreSubProperties The property members of specific types in this list will be ingored Returns Type Description IEnumerable < KeyValuePair < String , Object >> The flattern result. Remarks The primitive types and types implemented IEnumerable (string, list, dictionary, etc) will keep original value. The flatten support one level property lookup only. GetHeaderText(IGraphLogger, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) Logs the headers text. Declaration public static IEnumerable<string> GetHeaderText(this IGraphLogger logger, IEnumerable<KeyValuePair<string, IEnumerable<string>>> headers) Parameters Type Name Description IGraphLogger logger The logger. IEnumerable < KeyValuePair < String , IEnumerable < String >>> headers The headers. Returns Type Description IEnumerable < String > Log Text GetTypedProperties(LogEvent, Type) Gets the client common properties from log event. Declaration public static object GetTypedProperties(this LogEvent logEvent, Type type) Parameters Type Name Description LogEvent logEvent The log event. Type type The type of the property. Returns Type Description Object The client common properties. GetTypedProperty<T>(LogEvent) Gets the client common properties from log event. Declaration public static T GetTypedProperty<T>(this LogEvent logEvent) where T : class Parameters Type Name Description LogEvent logEvent The log event. Returns Type Description T The client common properties. Type Parameters Name Description T The property type. Info(IGraphLogger, String, String, Guid, String, String, Int32) Log exceptions with info level. Declaration public static LogEvent Info(this IGraphLogger logger, string message, string component = null, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. String message The message. String component The component in which log is created Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. LeaveMethod(IGraphLogger, Guid, String, String, Int32) Log for leaving method. Declaration public static LogEvent LeaveMethod(this IGraphLogger logger, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Log(IGraphLogger, TraceLevel, Exception, String, String, Guid, String, String, Int32) Log exceptions. Declaration public static LogEvent Log(this IGraphLogger logger, TraceLevel level, Exception exception, string message = null, string component = null, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. TraceLevel level The trace level. Exception exception Exception information. String message The message. String component The component in which log is created Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. LogHttpMessage(IGraphLogger, TraceLevel, TransactionDirection, HttpTraceType, String, String, String, IEnumerable<KeyValuePair<String, IEnumerable<String>>>, Int32, String, Nullable<Int64>, Guid, Guid, String, String, Int32) Logs the http message. Declaration public static LogEvent LogHttpMessage(this IGraphLogger logger, TraceLevel level, TransactionDirection direction, HttpTraceType traceType, string url, string method, string obfuscatedContent, IEnumerable<KeyValuePair<string, IEnumerable<string>>> headers, int responseCode = 200, string component = null, long? responseTime = default(long? ), Guid correlationId = default(Guid), Guid requestId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. TraceLevel level The trace level. TransactionDirection direction The direction for request. HttpTraceType traceType Type of the http trace. String url The URL. String method The method. String obfuscatedContent The obfuscatedContent. IEnumerable < KeyValuePair < String , IEnumerable < String >>> headers The headers. Int32 responseCode The response code. (used only if [traceType == HttpResponse]) String component The component in which log is created. Nullable < Int64 > responseTime The response time. (used only if [traceType == HttpResponse]) Guid correlationId The correlation identifier. Guid requestId The message identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object Metric(IGraphLogger, String, String, Int64, Dictionary<String, String>, Boolean, String, Guid, String, String, Int32) Log metrics Declaration public static LogEvent Metric(this IGraphLogger logger, string metricNamespace, string metricName, long rawData, Dictionary<string, string> dimensions, bool addDefaultDimension = true, string component = null, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. String metricNamespace Metric namespace String metricName Metric name Int64 rawData Raw data Dictionary < String , String > dimensions Dimension name-value dictionary Boolean addDefaultDimension Indicates whether adds default dimension String component The component in which log is created Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Obfuscate(IGraphLogger, Object, ObfuscationTag) Obfuscates the specified payload with the tag. Declaration public static string Obfuscate(this IGraphLogger logger, object payload, ObfuscationTag obfuscationTag) Parameters Type Name Description IGraphLogger logger The logger. Object payload The payload. ObfuscationTag obfuscationTag The obfuscation tag. Returns Type Description String Obfuscated data SerializeAndObfuscate(IGraphLogger, Object, Formatting) Serializes the payload and obfuscates it. Declaration public static string SerializeAndObfuscate(this IGraphLogger logger, object payload, Formatting formatting) Parameters Type Name Description IGraphLogger logger The logger. Object payload The payload. Newtonsoft.Json.Formatting formatting The formatting. Returns Type Description String Obfuscated data. ToLogLevel(TraceLevel) Get log level from trace level. Declaration public static LogLevel ToLogLevel(this TraceLevel level) Parameters Type Name Description TraceLevel level The trace level Returns Type Description LogLevel The log level ToTraceLevel(LogLevel) Gets the tracelevel for log level. Declaration public static TraceLevel ToTraceLevel(this LogLevel logLevel) Parameters Type Name Description LogLevel logLevel The log level. Returns Type Description TraceLevel trace level Verbose(IGraphLogger, String, String, Guid, String, String, Int32) Log verbose level. Declaration public static LogEvent Verbose(this IGraphLogger logger, string message, string component = null, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. String message The message. String component The component in which log is created Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Warn(IGraphLogger, Exception, String, String, Guid, String, String, Int32) Log exceptions with warning level. Declaration public static LogEvent Warn(this IGraphLogger logger, Exception exception, string message = \"\", string component = null, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. Exception exception Exception information. String message The message. String component The component in which log is created Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Warn(IGraphLogger, String, String, Guid, String, String, Int32) Log exceptions with warning level. Declaration public static LogEvent Warn(this IGraphLogger logger, string message, string component = null, Guid correlationId = default(Guid), string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. String message The message. String component The component in which log is created Guid correlationId The correlation identifier. String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphRequest-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphRequest-1.html",
    "title": "Class GraphRequest<T>",
    "keywords": "Class GraphRequest<T> The base of the exchange of a IGraphRequest<T> or IGraphResponse<T> . Inheritance Object GraphRequest<T> GraphRequest Implements IGraphRequest <T> IGraphExchange <T> IGraphExchange Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphRequest<T> : IGraphRequest<T>, IGraphExchange<T>, IGraphExchange Type Parameters Name Description T Constructors GraphRequest(Uri, T, RequestType) Initializes a new instance of the GraphRequest<T> class. Create the graph request object Declaration public GraphRequest(Uri location, T content, RequestType requestType) Parameters Type Name Description Uri location The uri location for the request. T content Content to be sent as part of the request. RequestType requestType Type of the request. Properties Content Declaration public T Content { get; set; } Property Value Type Description T Properties Gets the properties of the exchange. Declaration public ICollection<IGraphProperty> Properties { get; } Property Value Type Description ICollection < IGraphProperty > RequestType Declaration public RequestType RequestType { get; } Property Value Type Description RequestType Uri Declaration public Uri Uri { get; } Property Value Type Description Uri Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IGraphRequest<T> IGraphExchange<T> IGraphExchange Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphRequestExtensions.ToHttpRequestMessage<T>(IGraphRequest<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphRequest.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphRequest.html",
    "title": "Class GraphRequest",
    "keywords": "Class GraphRequest Inheritance Object GraphRequest < NoContentMessage > GraphRequest Implements IGraphRequest IGraphRequest < NoContentMessage > IGraphExchange < NoContentMessage > IGraphExchange Inherited Members GraphRequest<NoContentMessage>.ToString() GraphRequest<NoContentMessage>.Content GraphRequest<NoContentMessage>.Properties GraphRequest<NoContentMessage>.Uri GraphRequest<NoContentMessage>.RequestType Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphRequest : GraphRequest<NoContentMessage>, IGraphRequest, IGraphRequest<NoContentMessage>, IGraphExchange<NoContentMessage>, IGraphExchange Constructors GraphRequest(IGraphRequest<NoContentMessage>) Initializes a new instance of the GraphRequest class. Declaration public GraphRequest(IGraphRequest<NoContentMessage> graphRequest) Parameters Type Name Description IGraphRequest < NoContentMessage > graphRequest The graph request. GraphRequest(Uri, RequestType) Initializes a new instance of the GraphRequest class. Create the graph request object Declaration public GraphRequest(Uri location, RequestType requestType) Parameters Type Name Description Uri location The uri location for the request. RequestType requestType Type of the request. Implements IGraphRequest IGraphRequest<T> IGraphExchange<T> IGraphExchange Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphRequestExtensions.ToHttpRequestMessage<T>(IGraphRequest<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>)"
  },
  "client/Microsoft.Graph.Communications.Resources.IResourceCollection-2.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.IResourceCollection-2.html",
    "title": "Interface IResourceCollection<TResource, TEntity>",
    "keywords": "Interface IResourceCollection<TResource, TEntity> The resource collection interface. Inherited Members IResourceCollection.TerminateAsync(TimeSpan) IResourceBase.CreatedDateTime IResourceBase.Client IResourceBase.GraphClient IResourceBase.GraphLogger IResourceBase.ResourcePath IDisposable.Dispose() IReadOnlyCollection<TResource>.Count IEnumerable<TResource>.GetEnumerator() Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IResourceCollection<TResource, in TEntity> : IResourceCollection, IResourceBase, IDisposable, IReadOnlyCollection<TResource>, IEnumerable<TResource>, IEnumerable where TResource : IResource where TEntity : Entity Type Parameters Name Description TResource The containing resource type. IResource<TSelf, TEntity> TEntity The containing resource type. Entity Properties Item[String] The resource with the specified identifier. Declaration TResource this[string id] { get; } Parameters Type Name Description String id The identifier. Property Value Type Description TResource The IResource<TSelf, TEntity> . Methods TryForceRemove(String, out TResource) Attempts to remove and return the value that has the specified id from the IResourceCollection<TResource, TEntity> . This will force remove the object, if for whatever reason it cannot be removed by the service. It should only be used as a last resort to clean up stale resources. Declaration bool TryForceRemove(string id, out TResource resource) Parameters Type Name Description String id The identifier. TResource resource The resource. Returns Type Description Boolean true if the object was removed successfully; otherwise, false. See Also IResourceCollection IReadOnlyCollection <T>"
  },
  "client/Microsoft.Graph.Communications.Resources.IResourceCollection-3.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.IResourceCollection-3.html",
    "title": "Interface IResourceCollection<TSelf, TResource, TEntity>",
    "keywords": "Interface IResourceCollection<TSelf, TResource, TEntity> The resource collection interface. Inherited Members IResourceCollection<TResource, TEntity>.TryForceRemove(String, TResource) IResourceCollection<TResource, TEntity>.Item[String] IResourceCollection.TerminateAsync(TimeSpan) IResourceBase.CreatedDateTime IResourceBase.Client IResourceBase.GraphClient IResourceBase.GraphLogger IResourceBase.ResourcePath IDisposable.Dispose() IReadOnlyCollection<TResource>.Count IEnumerable<TResource>.GetEnumerator() Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IResourceCollection<out TSelf, TResource, in TEntity> : IResourceCollection<TResource, TEntity>, IResourceCollection, IResourceBase, IDisposable, IReadOnlyCollection<TResource>, IEnumerable<TResource>, IEnumerable where TSelf : IResourceCollection<TResource, TEntity> where TResource : IResource where TEntity : Entity Type Parameters Name Description TSelf The self type of the collection. TResource The containing resource type. IResource<TSelf, TEntity> TEntity The containing resource type. Entity Events OnUpdated Event triggered whenever a resource is updated from the collection. Declaration event CollectionEventHandler<TSelf, TResource> OnUpdated Event Type Type Description CollectionEventHandler <TSelf, TResource> See Also IResourceCollection <TResource, TEntity>"
  },
  "common/Microsoft.Graph.Communications.Common.Disposable.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Disposable.html",
    "title": "Class Disposable",
    "keywords": "Class Disposable Common disposable pattern Inheritance Object Disposable AutoClean ObjectRootDisposable Observer<T> SlimLock GraphLogger Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class Disposable : IDisposable Constructors Disposable() Declaration public Disposable() Properties IsDisposed Gets a value indicating whether this instance is disposed. Declaration protected bool IsDisposed { get; } Property Value Type Description Boolean true if this instance is disposed; otherwise, false . Methods Dispose() Dispose resources. Declaration public void Dispose() Dispose(Boolean) Protected implementation of dispose. This will be triggered only once regardless if manually disposed or garbage collected. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Finalize() Finalizes an instance of the Disposable class. Declaration protected void Finalize() Implements System.IDisposable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "core/Microsoft.Graph.Communications.Core.Exceptions.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Exceptions.html",
    "title": "Namespace Microsoft.Graph.Communications.Core.Exceptions",
    "keywords": "Namespace Microsoft.Graph.Communications.Core.Exceptions Classes ClientException Class for client error exception. ErrorConstants Error Constants ErrorConstants.Codes Error Codes ErrorConstants.Messages Error Messages ServiceException A Service Exception."
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.Telemetry",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.Telemetry Classes AadApplicationIdentity The application identity in Azure AD. CallerInfo Class that encapsulates the caller's (creator's) information ClientEtwLogger Logger for client that publishes to ETW. GraphLogger Logging portion of graph. GraphLoggerShim The graph logger shim. This wrapper on the IGraphLogger attaches some extra data to each log request. GraphLoggerWrapper The ILogger wrapper for IGraphLogger. JsonConverters Json converters. JsonConverters.TypedPropertiesConverter The json converter for Type. LogEvent Log data LogEventFormatter The log event formatter LoggingConstants Constants used for logging that are common between server and client. LoggingExtensions Extensions class for logging. MetricLogData The metric of Geneva Instrumentation Framework (Ifx). Interfaces IGraphLogger The logger interface used by Graph Services. This logger emits logs that can be observed by different observers. ILogEventFormatter Interface to format log event. Enums ClientLogEventId Event ids for client logs HttpTraceType Trace used for HTTP traces. LogEventFormatterFlags The log event formatter enums LogEventType Log event type that describes what type of LogEvent this is. TransactionDirection Direction for request message."
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters Classes BaseFilter Non generic base filter. BaseFilter<T1, T2> Base filter. ContentDispositionFilter Does match of content disposition header. If content disposition matches filter then whole body is removed. ContentTypeFilter Does match of content-type header. If content-type matches filter then whole body is removed. GraphUriFilters Uri filters to filter PII in graph urls. HeaderFilter Header filters act as whitelists. UriFilter URI Filter. Any group matches from REGEX are obfuscated."
  },
  "common/Microsoft.Graph.Communications.Common.OData.html": {
    "href": "common/Microsoft.Graph.Communications.Common.OData.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.OData",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.OData Classes CamelCaseStringEnumConverter Converts an System.Enum to and from its name string value. When converting to its string value it will use camelCase formatting. ODataConfiguration OData Configuration object to be used for different classes. ODataConstants The OData constants. ODataJsonConverter Handles resolving interfaces to the correct derived class during serialization/deserialization. ODataResolver Contract resolver that allows us to create OData json payloads with type information. ODataSerializeAsTypeAttribute Specify how a given object should be written/read on the wire. ODataTimeSpanConverter Custom json converter for TimeSpans."
  },
  "common/Microsoft.Graph.Communications.Common.Extensions.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Extensions.html",
    "title": "Class Extensions",
    "keywords": "Class Extensions Defines Extensions. Inheritance Object Extensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class Extensions Methods ChangeType(Object, Type) Returns an object of the specified type and whose value is equivalent to the specified object. Declaration public static object ChangeType(this object value, Type conversionType) Parameters Type Name Description Object value An object that implements the IConvertible interface. Type conversionType The type of object to return. Returns Type Description Object Converted object Exceptions Type Condition InvalidCastException This conversion is not supported. -or- value is null and conversionType is a value conversionType.-or- value does not implement the IConvertible interface. FormatException value is not in a format recognized by conversionType . OverflowException value represents a number that is out of the range of conversionType . ArgumentNullException conversionType is null. ChangeType<T>(Object) Convert conversionType of an object Declaration public static T ChangeType<T>(this object value) Parameters Type Name Description Object value An object that implements the IConvertible interface. Returns Type Description T Converted object Type Parameters Name Description T Type requested Exceptions Type Condition InvalidCastException This conversion is not supported. -or- value is null and is a value conversionType.-or- value does not implement the IConvertible interface. FormatException value is not in a format recognized by . OverflowException value represents a number that is out of the range of . ArgumentNullException is null. CreateObserver<T>(IObservable<T>, Action<T>, Action<Exception>, Action) Create observer Declaration public static Observer<T> CreateObserver<T>(this IObservable<T> observable, Action<T> onNext, Action<Exception> onError = null, Action onCompleted = null) Parameters Type Name Description IObservable <T> observable Object providing the events. Action <T> onNext Callback for data. Action < Exception > onError Callback for errors. Action onCompleted Callback for completion. Returns Type Description Observer <T> New observer object Type Parameters Name Description T Type of the observer. GetDeterministicHashCode(String) Gets deterministic hash code of the given string. Using FNV-1a hash: https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function Declaration public static uint GetDeterministicHashCode(this string str) Parameters Type Name Description String str The string. Returns Type Description UInt32 The unsigned hash code. Lock(Mutex) Lock mutex Declaration public static IDisposable Lock(this Mutex mutex) Parameters Type Name Description Mutex mutex Mutex to enter. Returns Type Description IDisposable Disposable cleanup to release mutex. Pin(Object) Pin object memory. Declaration public static AutoClean<IntPtr> Pin(this object obj) Parameters Type Name Description Object obj Object to pin. Returns Type Description AutoClean < IntPtr > Disposable cleanup to release pinned memory. PushDir(String) Push directory and restore when done. Declaration public static IDisposable PushDir(string directory) Parameters Type Name Description String directory New directory to change to. Returns Type Description IDisposable Disposable to restore to previous directory. Read(ReaderWriterLockSlim) Automatic cleanup of entering read lock. Declaration public static IDisposable Read(this ReaderWriterLockSlim lockSlim) Parameters Type Name Description ReaderWriterLockSlim lockSlim Lock instance. Returns Type Description IDisposable Disposable cleanup instance. ReplaceFirst(String, String, String) Replaces the first occurence of search string with replace string. Declaration public static string ReplaceFirst(this string text, string search, string replace) Parameters Type Name Description String text The source text. String search The search string. String replace String to be replaced. Returns Type Description String Updated soruce text. ReplaceScheme(Uri, String, String) Replace URI scheme. Declaration public static Uri ReplaceScheme(this Uri uri, string find, string replace) Parameters Type Name Description Uri uri Subject URI String find Find string. String replace Replace string. Returns Type Description Uri New URI. SafeWait(SemaphoreSlim) Safe wait on semaphore Declaration public static IDisposable SafeWait(this SemaphoreSlim semaphoreSlim) Parameters Type Name Description SemaphoreSlim semaphoreSlim The semaphore to wait on. Returns Type Description IDisposable Disposable cleanup to release semaphore. SafeWaitAsync(SemaphoreSlim) Safe wait on semaphore Declaration public static Task<IDisposable> SafeWaitAsync(this SemaphoreSlim semaphoreSlim) Parameters Type Name Description SemaphoreSlim semaphoreSlim The semaphore to wait on. Returns Type Description Task < IDisposable > Disposable cleanup to release semaphore. TrapErrors(Action, IGraphLogger, TraceLevel, String, String, String, Int32) Trap exceptions from action. Declaration public static Exception TrapErrors(this Action action, IGraphLogger logger, TraceLevel level, string component = \"\", string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description Action action Action to run. IGraphLogger logger Logger to log exception data. TraceLevel level Trace level. String component The component in which this log is created. String memberName Calling function. String filePath Filename where code is located. Int32 lineNumber Line number where code is located. Returns Type Description Exception Task containing exception if any. TrapErrors<TKey>(Action<TKey>, TKey, IGraphLogger, TraceLevel, String, String, String, Int32) Trap exceptions from action. Declaration public static Exception TrapErrors<TKey>(this Action<TKey> action, TKey key, IGraphLogger logger, TraceLevel level, string component = \"\", string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description Action <TKey> action Action to run. TKey key Key for the action. IGraphLogger logger Logger to log exception data. TraceLevel level Trace level. String component The component in which this log is created. String memberName Calling function. String filePath Filename where code is located. Int32 lineNumber Line number where code is located. Returns Type Description Exception Task containing exception if any. Type Parameters Name Description TKey Action key type. TrapErrorsAsync(Task, IGraphLogger, TraceLevel, String, String, String, Int32) Trap exceptions from antecedent task. Declaration public static Task<Exception> TrapErrorsAsync(this Task task, IGraphLogger logger, TraceLevel level, string component = \"\", string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description Task task Antecedent task. IGraphLogger logger Logger to log exception data. TraceLevel level Trace level. String component The component in which this log is created. String memberName Calling function. String filePath Filename where code is located. Int32 lineNumber Line number where code is located. Returns Type Description Task < Exception > Task containing exception if any. TryDispose(Object, IGraphLogger) Try and dispose the object if it supports the right interface. Declaration public static void TryDispose(this object obj, IGraphLogger logger = null) Parameters Type Name Description Object obj Object to dispose. IGraphLogger logger Logger instance. UpgradeableRead(ReaderWriterLockSlim) Automatic cleanup of entering read lock. Declaration public static IDisposable UpgradeableRead(this ReaderWriterLockSlim lockSlim) Parameters Type Name Description ReaderWriterLockSlim lockSlim Lock instance. Returns Type Description IDisposable Disposable cleanup instance. WaitAsync(Task, Int32) Waits for the Task to complete execution within a specified number of milliseconds. Traps errors on the task to avoid unobserved task exceptions. Declaration public static Task<bool> WaitAsync(this Task task, int millisecondsTimeout = -1) Parameters Type Name Description Task task Task to wait. Int32 millisecondsTimeout The number of milliseconds to wait, or Infinite (-1) to wait indefinitely. Returns Type Description Task < Boolean > true if the Task completed execution within the allotted time; otherwise, false. Write(ReaderWriterLockSlim) Automatic cleanup of entering write lock. Declaration public static IDisposable Write(this ReaderWriterLockSlim lockSlim) Parameters Type Name Description ReaderWriterLockSlim lockSlim Lock instance. Returns Type Description IDisposable Disposable cleanup instance."
  },
  "common/Microsoft.Graph.Communications.Common.Exceptions.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Exceptions.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.Exceptions",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.Exceptions Classes ConfigurationException Configuration is bad. Mandatory configuration setting is missing. Or raw (string) setting value can not be converted to property type. InvalidStateTransitionException Exception to throw when a invalid transition is requested RoutingBadRequestException Indicate there's a bad request RoutingException Generic routing exception"
  },
  "client/Microsoft.Graph.Communications.Client.Notifications.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Notifications.html",
    "title": "Namespace Microsoft.Graph.Communications.Client.Notifications",
    "keywords": "Namespace Microsoft.Graph.Communications.Client.Notifications Classes FixedSizeQueue<T> A class that implements a fixed size list."
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaCommunicationsClientBuilderExtensions.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaCommunicationsClientBuilderExtensions.html",
    "title": "Class MediaCommunicationsClientBuilderExtensions",
    "keywords": "Class MediaCommunicationsClientBuilderExtensions The stateful client builder extension. Inheritance Object MediaCommunicationsClientBuilderExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls.Media Assembly : Microsoft.Graph.Communications.Calls.Media.dll Syntax public static class MediaCommunicationsClientBuilderExtensions Methods SetMediaPlatformSettings(ICommunicationsClientBuilder, MediaPlatformSettings) Set the local media platform settings. This function also initializes the local media platform. Declaration public static ICommunicationsClientBuilder SetMediaPlatformSettings(this ICommunicationsClientBuilder statefulClientBuilder, MediaPlatformSettings mediaSettings) Parameters Type Name Description ICommunicationsClientBuilder statefulClientBuilder The stateful client builder. MediaPlatformSettings mediaSettings The media settings. Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ClientException When something fails while initializing the media platform. TerminateAsync(ICommunicationsClient, Boolean, TimeSpan) Stops the specified stateful client. This would end all the calls and shuts down the media platform. This should only be used during shutdown. Declaration public static Task<bool> TerminateAsync(this ICommunicationsClient statefulClient, bool onlyMedia, TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description ICommunicationsClient statefulClient The stateful client. Boolean onlyMedia if set to true terminate only the media platform. TimeSpan timeout The timeout. Returns Type Description Task < Boolean > True if all instances were terminated, false otherwise."
  },
  "core/Microsoft.Graph.Communications.Core.Serialization.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Serialization.html",
    "title": "Namespace Microsoft.Graph.Communications.Core.Serialization",
    "keywords": "Namespace Microsoft.Graph.Communications.Core.Serialization Classes CommsSerializer An interface for serializing and deserializing JSON objects. This serializer is used throughout the Communications workload to provide extra functionality. Specifically it supports more robust serialization/deserialization of @odata.type property and deserialization of open type additional data."
  },
  "common/Microsoft.Graph.Communications.Common.html": {
    "href": "common/Microsoft.Graph.Communications.Common.html",
    "title": "Namespace Microsoft.Graph.Communications.Common",
    "keywords": "Namespace Microsoft.Graph.Communications.Common Classes AutoClean Helper class to automatically cleanup. AutoClean<T> Helper class to automatically cleanup but with associated state. CertUtils Certificates utilities CollectionUtils Collection Utilities Disposable Common disposable pattern EnumUtils Enum Utilities ExceptionUtils Exception utilities Extensions Defines Extensions. GuidUtils Guid Utils HighResolutionDateTime High resolution datetime HttpConstants The constant values for http. HttpConstants.HeaderNames The header names. JsonUtils Json Utils MathUtils Various math utilities MetricUtils The metric utils class ObjectRoot Base object. ObjectRootDisposable Base object. Observable<T> Observable Base class Observer<T> Observer class. ReflectionUtils Reflection utilities SafeNativeMethods Contains p/invokes and associated wrappers for the Native methods SecureStringUtils SecureString Utilities SlimLock A SemaphoreSlim based lock implementation StateMachine<TStateEnum> Lockfree enum-based state machine. Transitions are O(1). StateMachine<TStateEnum>.Transition Single transition from Source to Targets StringUtils String Utils TaskExtension Extensions for Task TaskQueue Task queue to encapsulate chaining of tasks. Utilities Utilities class. Validator Helper class with various condition validation utilities. WeakKey<T> Wrapping a weak reference and recording hash code. Note: It is the responsibility of the client to clean up the collection entry in the finalizer of the object. Otherwise the key will not match for subsequent lookups. WeakKeyDictionary<TKey, TValue> Dictionary with weak reference for the key."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions.html",
    "title": "Class HttpRequestMessageExtensions",
    "keywords": "Class HttpRequestMessageExtensions Extensions for HttpRequestMessage . Inheritance Object HttpRequestMessageExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class HttpRequestMessageExtensions Methods Add(HttpHeaders, IGraphProperty) Adds the header. Declaration public static void Add(this HttpHeaders headers, IGraphProperty property) Parameters Type Name Description HttpHeaders headers The headers. IGraphProperty property The property. CloneHttpRequestMessageAsync(HttpRequestMessage) Clones the HTTP request message. Declaration public static Task<HttpRequestMessage> CloneHttpRequestMessageAsync(this HttpRequestMessage req) Parameters Type Name Description HttpRequestMessage req The req. Returns Type Description Task < HttpRequestMessage > Cloned request message GetHttpAndContentHeaders(HttpRequestMessage) Gets headers from the http request and the content. Declaration public static IEnumerable<KeyValuePair<string, IEnumerable<string>>> GetHttpAndContentHeaders(this HttpRequestMessage message) Parameters Type Name Description HttpRequestMessage message The message. Returns Type Description IEnumerable < KeyValuePair < String , IEnumerable < String >>> The list of http and content headers. ToGraphRequestAsync(HttpRequestMessage) Converts a HttpRequestMessage into a IGraphRequest . Declaration public static Task<IGraphRequest> ToGraphRequestAsync(this HttpRequestMessage httpRequest) Parameters Type Name Description HttpRequestMessage httpRequest HttpRequestMessage to be converted. Returns Type Description Task < IGraphRequest > IGraphRequest object corresponding to httpRequest ToGraphRequestAsync<T>(HttpRequestMessage, JsonSerializerSettings) Converts a HttpRequestMessage into a IGraphRequest<T> . Declaration public static Task<IGraphRequest<T>> ToGraphRequestAsync<T>(this HttpRequestMessage httpRequest, JsonSerializerSettings serializerSettings = null) Parameters Type Name Description HttpRequestMessage httpRequest HttpRequestMessage to be converted. Newtonsoft.Json.JsonSerializerSettings serializerSettings Json serializer settings. Returns Type Description Task < IGraphRequest <T>> IGraphRequest<T> object corresponding to httpRequest Type Parameters Name Description T Type of the content present in httpRequest ToRequestType(HttpMethod) Convert HttpMethod to the type of the request. Declaration public static RequestType ToRequestType(this HttpMethod httpMethod) Parameters Type Name Description HttpMethod httpMethod The HTTP method. Returns Type Description RequestType RequestType corresponding to the httpMethod Exceptions Type Condition InvalidOperationException Thrown if httpMethod has no corresponding RequestType"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.Telemetry.Obfuscation",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Classes GraphObfuscationAttribute Attribute used for decoration of data objects. This is used for obfuscation for logging. GraphObfuscationContractResolver Newtonsoft JSON resolver that uses Graph Obfuscation attribute to serialize data for logging purposes. HashingObfuscationConfiguration The hashing obfuscation configuration. This configurations is preconfigured to use the HashingObfuscationEngine and provides logic to automatically generate a salt which resets daily. HashingObfuscationEngine Obfuscation engine that hashes PII using salt. ObfuscatedValueProvider Newtonsoft JSONs value provider for obfuscated data. ObfuscationConfiguration Configuration for obfuscation of different parts. ObfuscationSerializer The obfuscation serializer can be used to serialize and de-serialize an obfuscation schema, as well as generate a schema from specified assemblies. Structs ObfuscationMember The obfuscation member. This struct is used to generate an obfuscation schema for any class type or it's members. It can be passed into the GraphObfuscationContractResolver which will cache the schema when resolving object and member obfuscation. Interfaces IObfuscationEngine Obfuscation engine that can obfuscate data. Enums ObfuscationTag Tag used to provide a hint for the type of obfuscation to perform."
  },
  "client/Microsoft.Graph.Communications.Client.Cache.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Cache.html",
    "title": "Namespace Microsoft.Graph.Communications.Client.Cache",
    "keywords": "Namespace Microsoft.Graph.Communications.Client.Cache Classes ServiceCache The cache that restores the data directly from the service. In this case there is no storage of data, as the service acts as the master. Structs CacheContext<TEntity> The stored cache context Interfaces ICache The cache interface used to store and recover the data used by the SDK."
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter.html",
    "title": "Class BaseFilter",
    "keywords": "Class BaseFilter Non generic base filter. Inheritance Object BaseFilter BaseFilter<T1, T2> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters Assembly : Microsoft.Graph.Communications.Common.dll Syntax public abstract class BaseFilter Constructors BaseFilter() Declaration protected BaseFilter() Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember.html",
    "title": "Struct ObfuscationMember",
    "keywords": "Struct ObfuscationMember The obfuscation member. This struct is used to generate an obfuscation schema for any class type or it's members. It can be passed into the GraphObfuscationContractResolver which will cache the schema when resolving object and member obfuscation. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public struct ObfuscationMember Properties Members Gets or sets the members belonging to this member. Declaration public ObfuscationMember[] Members { get; set; } Property Value Type Description ObfuscationMember [] Name Gets or sets the name of the member. For classes this should be type full name, for members this should be the member name. Declaration public string Name { get; set; } Property Value Type Description String Tag Gets or sets the obfuscation tag. Specifies how this member should be obfuscated. Declaration public ObfuscationTag? Tag { get; set; } Property Value Type Description Nullable < ObfuscationTag > Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.html",
    "title": "Class ObfuscationConfiguration",
    "keywords": "Class ObfuscationConfiguration Configuration for obfuscation of different parts. Inheritance Object ObfuscationConfiguration HashingObfuscationConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ObfuscationConfiguration Constructors ObfuscationConfiguration(IObfuscationEngine, IEnumerable<BaseFilter>, Boolean, ObfuscationMember[]) Initializes a new instance of the ObfuscationConfiguration class. Declaration public ObfuscationConfiguration(IObfuscationEngine engine, IEnumerable<BaseFilter> filters = null, bool addOdataType = true, ObfuscationMember[] members = null) Parameters Type Name Description IObfuscationEngine engine The obfuscation engine. IEnumerable < BaseFilter > filters The filters. Boolean addOdataType If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property. ObfuscationMember [] members The predefined set of obfuscation members. When specified the obfuscation serializer will cache the members and check the cache for the ObfuscationTag . ObfuscationConfiguration(IObfuscationEngine, IEnumerable<HeaderFilter>, IEnumerable<ContentDispositionFilter>, IEnumerable<ContentTypeFilter>, Boolean, ObfuscationMember[]) Initializes a new instance of the ObfuscationConfiguration class. Declaration public ObfuscationConfiguration(IObfuscationEngine engine, IEnumerable<HeaderFilter> headerFilters, IEnumerable<ContentDispositionFilter> contentDispositionFilters, IEnumerable<ContentTypeFilter> contentTypeFilters, bool addOdataType = true, ObfuscationMember[] members = null) Parameters Type Name Description IObfuscationEngine engine The obfuscation engine. IEnumerable < HeaderFilter > headerFilters The header filters. IEnumerable < ContentDispositionFilter > contentDispositionFilters The content disposition filters. IEnumerable < ContentTypeFilter > contentTypeFilters The content type filters. Boolean addOdataType If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property. ObfuscationMember [] members The predefined set of obfuscation members. When specified the obfuscation serializer will cache the members and check the cache for the ObfuscationTag . Properties ContentDispositionFilters Gets the content disposition filters. Declaration public IEnumerable<ContentDispositionFilter> ContentDispositionFilters { get; } Property Value Type Description IEnumerable < ContentDispositionFilter > ContentTypeFilters Gets the content type filters. Declaration public IEnumerable<ContentTypeFilter> ContentTypeFilters { get; } Property Value Type Description IEnumerable < ContentTypeFilter > DefaultContentDispositionFilters Gets the default content disposition filters. Declaration public static IEnumerable<ContentDispositionFilter> DefaultContentDispositionFilters { get; } Property Value Type Description IEnumerable < ContentDispositionFilter > DefaultContentTypeFilters Gets the default content type filters. Declaration public static IEnumerable<ContentTypeFilter> DefaultContentTypeFilters { get; } Property Value Type Description IEnumerable < ContentTypeFilter > DefaultHeaderFilters Gets the default header filters. Transfer-Encoding: (redacted) OData-Version: (redacted) Duration: (redacted) Strict-Transport-Security: (redacted) Cache-Control: (redacted) Date: (redacted) Location: (redacted) x-ms-ags-diagnostic: (redacted) scenario-id: (redacted) request-id: (redacted) client-request-id: (redacted) X-Microsoft-Skype-Chain-ID: (redacted) X-Microsoft-Skype-Caller-Region: (redacted) X-Microsoft-Skype-Callee-Region: (redacted) X-Microsoft-Skype-Message-ID: (redacted) X-Microsoft-Skype-Original-Message-ID: (redacted) Declaration public static IEnumerable<HeaderFilter> DefaultHeaderFilters { get; } Property Value Type Description IEnumerable < HeaderFilter > DefaultUriFilters Gets the default header filters. Declaration public static IEnumerable<UriFilter> DefaultUriFilters { get; } Property Value Type Description IEnumerable < UriFilter > HeaderFilters Gets the header filters. Declaration public IEnumerable<HeaderFilter> HeaderFilters { get; } Property Value Type Description IEnumerable < HeaderFilter > ObfuscationEngine Gets the obfuscation engine. Declaration public IObfuscationEngine ObfuscationEngine { get; } Property Value Type Description IObfuscationEngine ObfuscationMembers Gets the obfuscation members. When specified the obfuscation serializer will cache the members and check the cache for the ObfuscationTag . This can be used to cache obfuscation attributes, but it can also be used in cases where original contracts are not redily available (such as in SDK). Declaration public ObfuscationMember[] ObfuscationMembers { get; } Property Value Type Description ObfuscationMember [] ObfuscationSerializerSettings Gets the obfuscation serializer settings. Declaration public JsonSerializerSettings ObfuscationSerializerSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings UriFilters Gets the URI filters. Declaration public IEnumerable<UriFilter> UriFilters { get; } Property Value Type Description IEnumerable < UriFilter > Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) HttpObfuscationHelpers.LogHeaderText(ObfuscationConfiguration, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) HttpObfuscationHelpers.LogHeaderText(ObfuscationConfiguration, String, IEnumerable<String>)"
  },
  "client/Microsoft.Graph.Communications.Client.GraphLoggerExtensions.html": {
    "href": "client/Microsoft.Graph.Communications.Client.GraphLoggerExtensions.html",
    "title": "Class GraphLoggerExtensions",
    "keywords": "Class GraphLoggerExtensions The graph logger extensions for the communications client. Inheritance Object GraphLoggerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public static class GraphLoggerExtensions Methods LogHttpRequest(IGraphLogger, HttpRequestMessage, HttpStatusCode, Object, Exception, String, String, Int32) Logs the request message. Declaration public static TraceLevel LogHttpRequest(this IGraphLogger logger, HttpRequestMessage request, HttpStatusCode statusCode, object requestContent = null, Exception exception = null, string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. HttpRequestMessage request The request. HttpStatusCode statusCode The status code. Object requestContent The request content. Exception exception The exception. String memberName The member name. String filePath The file path. Int32 lineNumber The line number. Returns Type Description TraceLevel The trace level of the logged request message. LogHttpResponse(IGraphLogger, TraceLevel, HttpRequestMessage, HttpResponseMessage, Int64, Object, String, String, Int32) Logs the http response message. Declaration public static void LogHttpResponse(this IGraphLogger logger, TraceLevel level, HttpRequestMessage request, HttpResponseMessage response, long responseTime, object responseContent = null, string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description IGraphLogger logger The logger. TraceLevel level The log level. HttpRequestMessage request The request. HttpResponseMessage response The response. Int64 responseTime The response time in milliseconds. Object responseContent The response content. String memberName The member name. String filePath The file path. Int32 lineNumber The line number. ParseRequestId(IGraphLogger, HttpRequestMessage) Parses the request identifier. Declaration public static Guid ParseRequestId(this IGraphLogger logger, HttpRequestMessage request) Parameters Type Name Description IGraphLogger logger The logger. HttpRequestMessage request The request. Returns Type Description Guid The message id. ParseScenarioId(IGraphLogger, HttpRequestMessage) Parses the scenario identifier. Declaration public static Guid ParseScenarioId(this IGraphLogger logger, HttpRequestMessage request) Parameters Type Name Description IGraphLogger logger The logger. HttpRequestMessage request The request. Returns Type Description Guid The scenario id."
  },
  "client/Microsoft.Graph.Communications.Client.CommunicationsClientExtensions.html": {
    "href": "client/Microsoft.Graph.Communications.Client.CommunicationsClientExtensions.html",
    "title": "Class CommunicationsClientExtensions",
    "keywords": "Class CommunicationsClientExtensions Extensions for Stateful Client. Inheritance Object CommunicationsClientExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public static class CommunicationsClientExtensions Methods CreateResponse(ICommunicationsClient, HttpStatusCode, Guid, Guid, Object) Creates the response. Declaration public static HttpResponseMessage CreateResponse(this ICommunicationsClient client, HttpStatusCode statusCode, Guid requestId, Guid scenarioId, object responseContent = null) Parameters Type Name Description ICommunicationsClient client The client. HttpStatusCode statusCode The status code. Guid requestId The request identifier. Guid scenarioId The scenario identifier. Object responseContent The response content. Returns Type Description HttpResponseMessage The HTTP response. LogAndCreateResponse(ICommunicationsClient, HttpRequestMessage, Guid, Guid, CommsNotifications, HttpStatusCode, Stopwatch, Exception) Logs the request, creates the response, and logs the response. Declaration public static HttpResponseMessage LogAndCreateResponse(this ICommunicationsClient client, HttpRequestMessage request, Guid requestId, Guid scenarioId, CommsNotifications notifications, HttpStatusCode statusCode, Stopwatch stopwatch, Exception exception = null) Parameters Type Name Description ICommunicationsClient client The client. HttpRequestMessage request The request. Guid requestId The request identifier. Guid scenarioId The scenario identifier. CommsNotifications notifications The notifications that were extracted. HttpStatusCode statusCode The status code. Stopwatch stopwatch The stopwatch tracking how long the request is taking. Exception exception Any exceptions raised. Returns Type Description HttpResponseMessage The response for the associated request. ProcessNotificationAsync(ICommunicationsClient, HttpRequestMessage) Processes the notifications and raises the required callbacks. This function should be called in order for the SDK to raise any required events and process state changes. Declaration public static Task<HttpResponseMessage> ProcessNotificationAsync(this ICommunicationsClient client, HttpRequestMessage request) Parameters Type Name Description ICommunicationsClient client The stateful client. HttpRequestMessage request The http request that is incoming from service. Returns Type Description Task < HttpResponseMessage > Http Response Message after processed by the SDK. This has to be returned to the server."
  },
  "calls/Microsoft.Graph.Communications.Calls.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.html",
    "title": "Namespace Microsoft.Graph.Communications.Calls",
    "keywords": "Namespace Microsoft.Graph.Communications.Calls Classes CallCollectionExtensions Extensions for call collections. CallExtensions Extensions for calls. CommunicationsClientExtensions Extensions for stateful client. JoinMeetingParameters Class to define parameters required for joining a meeting. ParticipantExtensions Extensions for the stateful participant resource. PlayOperationResult Class to define parameters required for joining a meeting. RecordOperationResult Class to define parameters required for joining a meeting. Interfaces ICall The stateful call interface. ICallCollection The stateful call collection interface. IMediaSession The IMediaSession interface. For local media scenarios, this session object represents the modalities and the media configuration. IParticipant The stateful participant interface. This represents a single participant in a call. IParticipantCollection The stateful participant collection interface."
  },
  "calls/Microsoft.Graph.Communications.Calls.CallExtensions.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.CallExtensions.html",
    "title": "Class CallExtensions",
    "keywords": "Class CallExtensions Extensions for calls. Inheritance Object CallExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public static class CallExtensions Methods AnswerAsync(ICall, IMediaSession, String, Guid, CancellationToken) Answers a call with locally hosted media configuration. Declaration public static Task AnswerAsync(this ICall call, IMediaSession mediaSession, string callbackUri = null, Guid scenarioId = default(Guid), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ICall call The call to be answered. IMediaSession mediaSession The media session object which defines the media configuration. String callbackUri The optional callback uri. Specifying this will override the default callback uri set when creating the ICommunicationsClient Guid scenarioId The scenario identitifer. This parameter should be used for tracking scenarios across multiple calls. Automatically generated by the SDK if not provided. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. This does not guarantee that the call has been answered. Any updates on call will be delivered via notification and can be observed using ICall.OnUpdated Exceptions Type Condition ArgumentNullException When mediaSession is not specified. AnswerAsync(ICall, IEnumerable<MediaInfo>, IEnumerable<Modality>, String, Guid, CancellationToken) Answers a call with service hosted media configuration. Declaration public static Task AnswerAsync(this ICall call, IEnumerable<MediaInfo> preFetchMedia, IEnumerable<Modality> acceptedModalities, string callbackUri = null, Guid scenarioId = default(Guid), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ICall call The call to be answered. IEnumerable < MediaInfo > preFetchMedia List of media files that service will cache, so that when playing these media files; the latency is lower. IEnumerable < Modality > acceptedModalities The modalities to accept. String callbackUri The optional callback uri. Specifying this will override the default callback uri set when creating the ICommunicationsClient Guid scenarioId The scenario identitifer. This parameter should be used for tracking scenarios across multiple calls. Automatically generated by the SDK if not provided. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. This does not guarantee that the call has been answered. Any updates on call will be delivered via notification and can be observed using ICall.OnUpdated Exceptions Type Condition ArgumentNullException When pre-fetch media is null. AnswerAsync(ICall, IEnumerable<Modality>, String, Guid, CancellationToken) Answers a call with service hosted media configuration. Declaration public static Task AnswerAsync(this ICall call, IEnumerable<Modality> acceptedModalities, string callbackUri = null, Guid scenarioId = default(Guid), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ICall call The call to be answered. IEnumerable < Modality > acceptedModalities The modalities to accept. String callbackUri The optional callback uri. Specifying this will override the default callback uri set when creating the ICommunicationsClient Guid scenarioId The scenario identitifer. This parameter should be used for tracking scenarios across multiple calls. Automatically generated by the SDK if not provided. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. This does not guarantee that the call has been answered. Any updates on call will be delivered via notification and can be observed using ICall.OnUpdated SetOutgoingCallOptions(Call, Nullable<Boolean>) Set outgoing call options for the call. Declaration public static void SetOutgoingCallOptions(this Call call, bool? allowGuestToBypassLobby) Parameters Type Name Description Call call The call. Nullable < Boolean > allowGuestToBypassLobby Enable bypass lobby when joining a group call as guest."
  },
  "calls/Microsoft.Graph.Communications.Calls.ICall.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.ICall.html",
    "title": "Interface ICall",
    "keywords": "Interface ICall The stateful call interface. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public interface ICall : IResource<ICall, Call>, IResource, IResourceBase, IDisposable Properties CorrelationId Gets the correlation identifier. Declaration [Obsolete(\"Please use ScenarioId instead.\")] Guid CorrelationId { get; } Property Value Type Description Guid MediaSession Gets the media session, if any. This is used only for Local Media Scenarios. Declaration IMediaSession MediaSession { get; } Property Value Type Description IMediaSession Participants Gets the Participants collection for this call. Declaration IParticipantCollection Participants { get; } Property Value Type Description IParticipantCollection Resource Gets the call resource. Declaration Call Resource { get; } Property Value Type Description Call ScenarioId Gets the scenario identifier. Declaration Guid ScenarioId { get; } Property Value Type Description Guid TenantId Gets the tenant identifier. Declaration string TenantId { get; } Property Value Type Description String Methods AnswerAsync(MediaConfig, IEnumerable<Modality>, String, Guid, CancellationToken) Answer an incoming call asynchronously. Declaration Task AnswerAsync(MediaConfig mediaConfig, IEnumerable<Modality> acceptedModalities = null, string callbackUri = null, Guid scenarioId = default(Guid), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description MediaConfig mediaConfig The MediaConfig . IEnumerable < Modality > acceptedModalities The accepted list of Modality . String callbackUri The optional callback uri. Specifying this will override the default callback uri set when creating the ICommunicationsClient Guid scenarioId The scenario identitifer. This parameter should be used for tracking scenarios across multiple calls. Automatically generated by the SDK if not provided. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. This does not guarantee that the call has been answered. Any updates on call will be delivered via notification and can be observed using ICall.OnUpdated ChangeScreenSharingRoleAsync(ScreenSharingRole, CancellationToken) Changes own sharing role in a vbss session. Declaration Task ChangeScreenSharingRoleAsync(ScreenSharingRole role, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ScreenSharingRole role The role to change to. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. DeleteAsync(Boolean, CancellationToken) Deletes this call asynchronously. Declaration Task DeleteAsync(bool handleHttpNotFoundInternally = false, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Boolean handleHttpNotFoundInternally If the ICall is already gone, whether to handle the exception gracefully or not. CancellationToken cancellationToken The CancellationToken for the request. Returns Type Description Task The Task that completes after the request has been sent. The completion of this task does not guarantee deletion. Confirmation of deletion comes as a notification and can be subscribed by ICall.OnUpdated and ICallCollection.OnUpdated KeepAliveAsync(CancellationToken) Send heartbeat to keep call alive. Declaration Task KeepAliveAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. MuteAsync(CancellationToken) Mutes the self participant asynchronously. Declaration Task MuteAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. The mute notification will come in on IParticipant.OnUpdated PlayPromptAsync(IEnumerable<MediaPrompt>, Action, CancellationToken) Plays the specified media prompts. Declaration Task<PlayOperationResult> PlayPromptAsync(IEnumerable<MediaPrompt> prompts, Action promptsQueued = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IEnumerable < MediaPrompt > prompts The list of MediaPrompt to play Action promptsQueued A callback indicating when the prompts have been queued, but have not yet completed playing. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < PlayOperationResult > The PlayOperationResult with information on how the play operation completed. Exceptions Type Condition ServiceException An error has occurred when playing the prompt. RedirectAsync(IEnumerable<InvitationParticipantInfo>, Nullable<Int32>, String, Guid, CancellationToken) Redirects the incoming call asynchronously. Declaration Task RedirectAsync(IEnumerable<InvitationParticipantInfo> targets, int? timeout = default(int? ), string callbackUri = null, Guid scenarioId = default(Guid), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IEnumerable < InvitationParticipantInfo > targets The targets to whom the call should be redirected to. Nullable < Int32 > timeout The timeout after which the redirect is canceled. String callbackUri The optional callback uri. Specifying this will override the default callback uri set when creating the ICommunicationsClient Guid scenarioId The scenario identitifer. This parameter should be used for tracking scenarios across multiple calls. Automatically generated by the SDK if not provided. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. RejectAsync(Nullable<RejectReason>, String, Guid, CancellationToken) Rejects the incoming call asynchronously. Declaration Task RejectAsync(RejectReason? rejectReason = default(RejectReason? ), string callbackUri = null, Guid scenarioId = default(Guid), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Nullable < RejectReason > rejectReason The reason for call rejection. String callbackUri The optional callback uri. Specifying this will override the default callback uri set when creating the ICommunicationsClient Guid scenarioId The scenario identitifer. This parameter should be used for tracking scenarios across multiple calls. Automatically generated by the SDK if not provided. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. SubscribeToToneAsync(CancellationToken) Subscribe to DTMF (dual-tone multi-frequency signaling). This allows you to be notified when the user presses keys on a \"touchtone\" phone. Declaration Task SubscribeToToneAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. The DTMF notifications will come on ICall.OnUpdated TransferAsync(InvitationParticipantInfo, CancellationToken) Transfer a call to a given target. Declaration Task TransferAsync(InvitationParticipantInfo target, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description InvitationParticipantInfo target The target to transfer the call to. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. This does not guarantee that the call has been answered. Any updates on call will be delivered via notification and can be observed using ICall.OnUpdated UnmuteAsync(CancellationToken) Unmutes the self participant asynchronously. Declaration Task UnmuteAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. The unmute notification will come in on IParticipant.OnUpdated Extension Methods CallExtensions.AnswerAsync(ICall, IMediaSession, String, Guid, CancellationToken) CallExtensions.AnswerAsync(ICall, IEnumerable<MediaInfo>, IEnumerable<Modality>, String, Guid, CancellationToken) CallExtensions.AnswerAsync(ICall, IEnumerable<Modality>, String, Guid, CancellationToken)"
  },
  "calls/Microsoft.Graph.Communications.Calls.CommunicationsClientExtensions.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.CommunicationsClientExtensions.html",
    "title": "Class CommunicationsClientExtensions",
    "keywords": "Class CommunicationsClientExtensions Extensions for stateful client. Inheritance Object CommunicationsClientExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public static class CommunicationsClientExtensions Methods Calls(ICommunicationsClient, Boolean) Gets the call collection. This is the main entry point for the calling SDK. The return value of this function can be cached by the clients as required. Declaration public static ICallCollection Calls(this ICommunicationsClient client, bool maintainState = true) Parameters Type Name Description ICommunicationsClient client The stateful client. Boolean maintainState If set to true the resulting IResourceCollection will hold all IResource instances it creates unless explicitly deleted (either by the service or by the developer). If set to false no IResource generated by the IResourceCollection or its children will be stored by the ICommunicationsClient , instead it is the developers responsibility to control the lifetime of the generated instances. Returns Type Description ICallCollection The root singleton ICallCollection node. Multiple invocations of this method will return the same ICallCollection ."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphRequestExtensions.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphRequestExtensions.html",
    "title": "Class GraphRequestExtensions",
    "keywords": "Class GraphRequestExtensions Extensions for IGraphRequest<T> class. Inheritance Object GraphRequestExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class GraphRequestExtensions Methods ToHttpMethod(RequestType) Convert RequestType to the corresponding HTTP method. Declaration public static HttpMethod ToHttpMethod(this RequestType requestType) Parameters Type Name Description RequestType requestType Type of the request. Returns Type Description HttpMethod HttpMethod for the RequestType ToHttpRequestMessage<T>(IGraphRequest<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>) Converts IGraphRequest into a HttpRequestMessage . Declaration public static HttpRequestMessage ToHttpRequestMessage<T>(this IGraphRequest<T> graphRequest, JsonSerializerSettings jsonSerializerSettings = null, IEnumerable<IGraphProperty> defaultProperties = null) Parameters Type Name Description IGraphRequest <T> graphRequest The graph request to be converted. Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings The json serializer settings. IEnumerable < IGraphProperty > defaultProperties The default properties. Returns Type Description HttpRequestMessage HttpRequestMessage corresponding to graphRequest . Type Parameters Name Description T Type of content available in the request."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphProperty.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphProperty.html",
    "title": "Class GraphProperty",
    "keywords": "Class GraphProperty The IGraphProperty helpers and extensions. Inheritance Object GraphProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class GraphProperty Fields ContentType The content type Declaration public const string ContentType = \"content\" Field Value Type Description String RequestType The request type Declaration public const string RequestType = \"request\" Field Value Type Description String Methods Add(ICollection<IGraphProperty>, String, Object, String) Adds the property to the exchange. Declaration public static IGraphProperty Add(this ICollection<IGraphProperty> properties, string key, object value, string type = null) Parameters Type Name Description ICollection < IGraphProperty > properties The properties. String key The key. Object value The value. String type The type. Returns Type Description IGraphProperty The added IGraphProperty . Add<T>(ICollection<IGraphProperty>, String, T, String) Adds the property to the exchange. Declaration public static IGraphProperty<T> Add<T>(this ICollection<IGraphProperty> properties, string key, T value, string type = null) Parameters Type Name Description ICollection < IGraphProperty > properties The properties. String key The key. T value The value. String type The type. Returns Type Description IGraphProperty <T> The added IGraphProperty<T> . Type Parameters Name Description T The expected type of the property. Contains(IEnumerable<IGraphProperty>, String) Finds the property in the given exchange. Declaration public static bool Contains(this IEnumerable<IGraphProperty> properties, string key) Parameters Type Name Description IEnumerable < IGraphProperty > properties The properties. String key The key. Returns Type Description Boolean The found IGraphProperty . ContentProperty(String, Object) Creates the property of content type. Declaration public static IGraphProperty ContentProperty(string key, object value) Parameters Type Name Description String key The key. Object value The values. Returns Type Description IGraphProperty The content IGraphProperty . ContentProperty<T>(String, T) Creates the property of content type. Declaration public static IGraphProperty<T> ContentProperty<T>(string key, T value) Parameters Type Name Description String key The key. T value The values. Returns Type Description IGraphProperty <T> The content IGraphProperty<T> . Type Parameters Name Description T The type of the property to create. ConvertProperty<T>(IGraphProperty) Converts the property. Declaration public static IGraphProperty<T> ConvertProperty<T>(this IGraphProperty property) Parameters Type Name Description IGraphProperty property The property. Returns Type Description IGraphProperty <T> The IGraphProperty<T> with the expected generic type if the types match, null otherwise. Type Parameters Name Description T The type of value expected. Find(IEnumerable<IGraphProperty>, String) Finds the property in the given exchange. Declaration public static IGraphProperty Find(this IEnumerable<IGraphProperty> properties, string key) Parameters Type Name Description IEnumerable < IGraphProperty > properties The properties. String key The key. Returns Type Description IGraphProperty The found IGraphProperty . Find<T>(IEnumerable<IGraphProperty>, String) Finds the property in the given exchange. Declaration public static IGraphProperty<T> Find<T>(this IEnumerable<IGraphProperty> properties, string key) Parameters Type Name Description IEnumerable < IGraphProperty > properties The properties. String key The key. Returns Type Description IGraphProperty <T> The found IGraphProperty<T> . Type Parameters Name Description T The expected type of the property. Property(String, Object, String) Creates a property of the specified type. Declaration public static IGraphProperty Property(string key, object value, string type = null) Parameters Type Name Description String key The key. Object value The values. String type The type. Returns Type Description IGraphProperty The created IGraphProperty . Property<T>(String, T, String) Creates a property of the specified type. Declaration public static IGraphProperty<T> Property<T>(string key, T value, string type = null) Parameters Type Name Description String key The key. T value The value. String type The type. Returns Type Description IGraphProperty <T> The created IGraphProperty<T> . Type Parameters Name Description T The type of the property to create. RequestProperty(String, Object) Creates the property of request type. Declaration public static IGraphProperty RequestProperty(string key, object value) Parameters Type Name Description String key The key. Object value The value. Returns Type Description IGraphProperty The request IGraphProperty . RequestProperty<T>(String, T) Creates the property of request type. Declaration public static IGraphProperty<T> RequestProperty<T>(string key, T value) Parameters Type Name Description String key The key. T value The value. Returns Type Description IGraphProperty <T> The request IGraphProperty<T> . Type Parameters Name Description T The type of the property to create. See Also IGraphProperty <T> IGraphProperty"
  },
  "client/Microsoft.Graph.Communications.Resources.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.html",
    "title": "Namespace Microsoft.Graph.Communications.Resources",
    "keywords": "Namespace Microsoft.Graph.Communications.Resources Classes CollectionEventArgs<TEntity> The collection event arguments. ResourceEventArgs<TEntity> The resource event arguments. Interfaces IResource The stateful resource interface. IResource<TSelf, TEntity> The stateful resource interface. IResourceBase The resource base interface. IResourceCollection The resource collection interface. IResourceCollection<TResource, TEntity> The resource collection interface. IResourceCollection<TSelf, TResource, TEntity> The resource collection interface. Delegates CollectionEventHandler<TSender, TEntity> The call collection event handler delegate. ResourceEventHandler<TSender, TEntity> The resource event handler delegate."
  },
  "client/Microsoft.Graph.Communications.Resources.CollectionEventArgs-1.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.CollectionEventArgs-1.html",
    "title": "Class CollectionEventArgs<TEntity>",
    "keywords": "Class CollectionEventArgs<TEntity> The collection event arguments. Inheritance Object CollectionEventArgs<TEntity> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class CollectionEventArgs<TEntity> Type Parameters Name Description TEntity The containing stateful resource type. IResource<TSelf, TEntity> Constructors CollectionEventArgs(String, ICollection<TEntity>, ICollection<TEntity>, ICollection<TEntity>) Initializes a new instance of the CollectionEventArgs<TEntity> class. Declaration public CollectionEventArgs(string resourcePath, ICollection<TEntity> addedResources = null, ICollection<TEntity> updatedResources = null, ICollection<TEntity> removedResources = null) Parameters Type Name Description String resourcePath The resource path. ICollection <TEntity> addedResources The added resources. ICollection <TEntity> updatedResources The updated resources. ICollection <TEntity> removedResources The removed resources. Properties AddedResources Gets the added resources. Declaration public ICollection<TEntity> AddedResources { get; } Property Value Type Description ICollection <TEntity> AdditionalData Gets or sets the additional data for the event. Declaration public IDictionary<string, object> AdditionalData { get; set; } Property Value Type Description IDictionary < String , Object > RemovedResources Gets the removed resources. Declaration public ICollection<TEntity> RemovedResources { get; } Property Value Type Description ICollection <TEntity> ResourcePath Gets the resource path for the collection. Declaration public string ResourcePath { get; } Property Value Type Description String UpdatedResources Gets the updated resource. Declaration public ICollection<TEntity> UpdatedResources { get; } Property Value Type Description ICollection <TEntity>"
  },
  "client/Microsoft.Graph.Communications.Common.Telemetry.html": {
    "href": "client/Microsoft.Graph.Communications.Common.Telemetry.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.Telemetry",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.Telemetry Classes CommsLogEventFormatter Test log formatter. LogProperties The log properties. LogProperties.CallData Call data. LogProperties.ChatData Chat data."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphRequest-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphRequest-1.html",
    "title": "Interface IGraphRequest<T>",
    "keywords": "Interface IGraphRequest<T> The request object with content. Inherited Members IGraphExchange<T>.Content IGraphExchange.Properties Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphRequest<T> : IGraphExchange<T>, IGraphExchange Type Parameters Name Description T Type of data to be sent as part of request body. Properties RequestType Gets the type of the request. Declaration RequestType RequestType { get; } Property Value Type Description RequestType The type of the request. Uri Gets the URI location for the request. Declaration Uri Uri { get; } Property Value Type Description Uri The URI. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphRequestExtensions.ToHttpRequestMessage<T>(IGraphRequest<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>) See Also IGraphExchange <T>"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.html",
    "title": "Class GraphLogger",
    "keywords": "Class GraphLogger Logging portion of graph. Inheritance Object Disposable GraphLogger Implements IDisposable IGraphLogger IObservable < LogEvent > Inherited Members Disposable.Dispose() Disposable.IsDisposed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphLogger : Disposable, IDisposable, IGraphLogger, IObservable<LogEvent> Constructors GraphLogger(String, IEnumerable<Object>, Boolean, ObfuscationConfiguration) Initializes a new instance of the GraphLogger class. Declaration public GraphLogger(string component = null, IEnumerable<object> properties = null, bool redirectToTrace = false, ObfuscationConfiguration obfuscationConfiguration = null) Parameters Type Name Description String component The component in which log is createdThe component in which this logger is created. IEnumerable < Object > properties Common properties to be set on each event Boolean redirectToTrace if set to true [redirect to trace]. ObfuscationConfiguration obfuscationConfiguration The obfuscation configuration Fields StartupLoggerNameSuffix The startup logger name prefix Declaration public const string StartupLoggerNameSuffix = \"_Startup\" Field Value Type Description String Properties Component Gets or the component of logger. Declaration public string Component { get; } Property Value Type Description String CorrelationId Gets or sets the correlation identifier. This is used to track correlation between multiple requests for one scenario. Declaration public Guid CorrelationId { get; set; } Property Value Type Description Guid DiagnosticLevel Gets or sets the diagnostic level for the logger. Declaration public TraceLevel DiagnosticLevel { get; set; } Property Value Type Description TraceLevel LogicalThreadId Gets or sets the logical thread identifier. This id is used for tracking the flow of one request throughout the lifetime until it ends. Declaration public uint LogicalThreadId { get; set; } Property Value Type Description UInt32 ObfuscationConfiguration Gets the obfuscation configuration. Declaration public ObfuscationConfiguration ObfuscationConfiguration { get; } Property Value Type Description ObfuscationConfiguration Properties Gets the common properties for each event. Declaration public IReadOnlyDictionary<Type, object> Properties { get; } Property Value Type Description IReadOnlyDictionary < Type , Object > Methods Dispose(Boolean) Protected implementation of dispose. This will be triggered only once regardless if manually disposed or garbage collected. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Disposable.Dispose(Boolean) Log(TraceLevel, String, String, Guid, Guid, LogEventType, IEnumerable<Object>, String, String, Int32) Log messages classified as the provided trace level. Declaration public LogEvent Log(TraceLevel level, string message, string component = null, Guid correlationId = default(Guid), Guid requestId = default(Guid), LogEventType eventType = LogEventType.Trace, IEnumerable<object> properties = null, string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description TraceLevel level The trace level. String message A composite format string that includes one or more format items. String component The component in which log is created Guid correlationId The correlation identifier. Guid requestId The request identifier. LogEventType eventType Log event type IEnumerable < Object > properties Extra properties for the log event String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Subscribe(IObserver<LogEvent>) Create a subscription for logging events. Declaration public IDisposable Subscribe(IObserver<LogEvent> observer) Parameters Type Name Description IObserver < LogEvent > observer The object that is to receive notifications. Returns Type Description IDisposable A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them. Implements System.IDisposable IGraphLogger System.IObservable<T> Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.CreateObserver<T>(IObservable<T>, Action<T>, Action<Exception>, Action) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) LoggingExtensions.Log(IGraphLogger, TraceLevel, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Error(IGraphLogger, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Error(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Info(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Warn(IGraphLogger, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Warn(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Verbose(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.LogHttpMessage(IGraphLogger, TraceLevel, TransactionDirection, HttpTraceType, String, String, String, IEnumerable<KeyValuePair<String, IEnumerable<String>>>, Int32, String, Nullable<Int64>, Guid, Guid, String, String, Int32) LoggingExtensions.Metric(IGraphLogger, String, String, Int64, Dictionary<String, String>, Boolean, String, Guid, String, String, Int32) LoggingExtensions.SerializeAndObfuscate(IGraphLogger, Object, Formatting) LoggingExtensions.Obfuscate(IGraphLogger, Object, ObfuscationTag) LoggingExtensions.GetHeaderText(IGraphLogger, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) LoggingExtensions.CreateShim(IGraphLogger, String, Nullable<Guid>, IEnumerable<Object>, ObfuscationConfiguration) LoggingExtensions.CreateILogger(IGraphLogger, String, Guid, LogEventType, IEnumerable<Object>) LoggingExtensions.BindToILoggerFactory(GraphLogger, ILoggerFactory, ILogEventFormatter) LoggingExtensions.EnterMethod(IGraphLogger, Guid, String, String, Int32) LoggingExtensions.LeaveMethod(IGraphLogger, Guid, String, String, Int32)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.html",
    "title": "Class GraphLoggerShim",
    "keywords": "Class GraphLoggerShim The graph logger shim. This wrapper on the IGraphLogger attaches some extra data to each log request. Inheritance Object ObjectRoot GraphLoggerShim Implements IGraphLogger IObservable < LogEvent > Inherited Members ObjectRoot.GraphLogger Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphLoggerShim : ObjectRoot, IGraphLogger, IObservable<LogEvent> Constructors GraphLoggerShim(IGraphLogger, String, Nullable<Guid>, IEnumerable<Object>, ObfuscationConfiguration) Initializes a new instance of the GraphLoggerShim class. Declaration public GraphLoggerShim(IGraphLogger graphLogger, string component = null, Guid? correlationId = default(Guid? ), IEnumerable<object> properties = null, ObfuscationConfiguration obfuscationConfiguration = null) Parameters Type Name Description IGraphLogger graphLogger The graph logger. String component The component. Nullable < Guid > correlationId The correlation identifier. If null, shim will use the correlationId from GraphLogger IEnumerable < Object > properties The properties. ObfuscationConfiguration obfuscationConfiguration The obfuscation configuration. Properties CorrelationId Gets or sets the correlation identifier. This is used to track correlation between multiple requests for one scenario. Declaration public Guid CorrelationId { get; set; } Property Value Type Description Guid DiagnosticLevel Gets or sets the diagnostic level for the logger. Declaration public TraceLevel DiagnosticLevel { get; set; } Property Value Type Description TraceLevel LogicalThreadId Gets or sets the logical thread identifier. This id is used for tracking the flow of one request throughout the lifetime until it ends. Declaration public uint LogicalThreadId { get; set; } Property Value Type Description UInt32 ObfuscationConfiguration Gets the obfuscation configuration. This is used to obfuscate PII and other data. Declaration public ObfuscationConfiguration ObfuscationConfiguration { get; } Property Value Type Description ObfuscationConfiguration Properties Gets the properties of the logger. Declaration public IReadOnlyDictionary<Type, object> Properties { get; } Property Value Type Description IReadOnlyDictionary < Type , Object > Methods Log(TraceLevel, String, String, Guid, Guid, LogEventType, IEnumerable<Object>, String, String, Int32) Log messages classified as the provided trace level. Declaration public LogEvent Log(TraceLevel level, string message, string component = null, Guid correlationId = default(Guid), Guid requestId = default(Guid), LogEventType eventType = LogEventType.Trace, IEnumerable<object> properties = null, string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description TraceLevel level The trace level. String message A composite format string that includes one or more format items. String component The component in which log is created Guid correlationId The correlation identifier. Guid requestId The request identifier. LogEventType eventType Log event type IEnumerable < Object > properties Extra properties for the log event String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Subscribe(IObserver<LogEvent>) Declaration public IDisposable Subscribe(IObserver<LogEvent> observer) Parameters Type Name Description IObserver < LogEvent > observer Returns Type Description IDisposable Implements IGraphLogger System.IObservable<T> Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.CreateObserver<T>(IObservable<T>, Action<T>, Action<Exception>, Action) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) LoggingExtensions.Log(IGraphLogger, TraceLevel, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Error(IGraphLogger, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Error(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Info(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Warn(IGraphLogger, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Warn(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Verbose(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.LogHttpMessage(IGraphLogger, TraceLevel, TransactionDirection, HttpTraceType, String, String, String, IEnumerable<KeyValuePair<String, IEnumerable<String>>>, Int32, String, Nullable<Int64>, Guid, Guid, String, String, Int32) LoggingExtensions.Metric(IGraphLogger, String, String, Int64, Dictionary<String, String>, Boolean, String, Guid, String, String, Int32) LoggingExtensions.SerializeAndObfuscate(IGraphLogger, Object, Formatting) LoggingExtensions.Obfuscate(IGraphLogger, Object, ObfuscationTag) LoggingExtensions.GetHeaderText(IGraphLogger, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) LoggingExtensions.CreateShim(IGraphLogger, String, Nullable<Guid>, IEnumerable<Object>, ObfuscationConfiguration) LoggingExtensions.CreateILogger(IGraphLogger, String, Guid, LogEventType, IEnumerable<Object>) LoggingExtensions.EnterMethod(IGraphLogger, Guid, String, String, Int32) LoggingExtensions.LeaveMethod(IGraphLogger, Guid, String, String, Int32) See Also ObjectRoot IGraphLogger"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphHttpClientFactory.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphHttpClientFactory.html",
    "title": "Class GraphHttpClientFactory",
    "keywords": "Class GraphHttpClientFactory The HTTP graph client factory. Inheritance Object ObjectRoot GraphHttpClientFactory Implements IGraphClientFactory Inherited Members ObjectRoot.GraphLogger Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphHttpClientFactory : ObjectRoot, IGraphClientFactory Constructors GraphHttpClientFactory(IGraphLogger, JsonSerializerSettings, HttpClient, String) Initializes a new instance of the GraphHttpClientFactory class. Declaration public GraphHttpClientFactory(IGraphLogger logger, JsonSerializerSettings serializerSettings, HttpClient httpClient = null, string correlationIdHeader = null) Parameters Type Name Description IGraphLogger logger Logger instance. Newtonsoft.Json.JsonSerializerSettings serializerSettings The serializer settings. HttpClient httpClient The HTTP client. String correlationIdHeader The correlation identifier header. Methods Create(IGraphLogger) Creates a new IGraphClient . Declaration public IGraphClient Create(IGraphLogger logger = null) Parameters Type Name Description IGraphLogger logger An optional IGraphLogger logger to be used in the new IGraphClient . Returns Type Description IGraphClient The IGraphClient . Implements IGraphClientFactory Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) See Also ObjectRoot IGraphClientFactory"
  },
  "core/Microsoft.Graph.Communications.Core.Exceptions.ServiceException.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Exceptions.ServiceException.html",
    "title": "Class ServiceException",
    "keywords": "Class ServiceException A Service Exception. Inheritance Object ServiceException Namespace : Microsoft.Graph.Communications.Core.Exceptions Assembly : Microsoft.Graph.Communications.Core.dll Syntax [Obsolete(\"Deprecated, please use Microsoft.Graph.ServiceException instead.\")] public class ServiceException : ServiceException Constructors ServiceException(Error, Exception) Initializes a new instance of the ServiceException class. Declaration [Obsolete(\"Deprecated, please use Microsoft.Graph.ServiceException instead.\")] public ServiceException(Error error = null, Exception innerException = null) Parameters Type Name Description Error error The error. Exception innerException The inner exception. ServiceException(Error, HttpResponseHeaders, HttpStatusCode, Exception) Initializes a new instance of the ServiceException class. Declaration [Obsolete(\"Deprecated, please use Microsoft.Graph.ServiceException instead.\")] public ServiceException(Error error, HttpResponseHeaders responseHeaders, HttpStatusCode statusCode, Exception innerException = null) Parameters Type Name Description Error error The error. HttpResponseHeaders responseHeaders The response headers. HttpStatusCode statusCode The status code. Exception innerException The inner exception. See Also ServiceException"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter.html",
    "title": "Class ContentDispositionFilter",
    "keywords": "Class ContentDispositionFilter Does match of content disposition header. If content disposition matches filter then whole body is removed. Inheritance Object BaseFilter BaseFilter < String , String > ContentDispositionFilter Inherited Members BaseFilter<String, String>.MatchableString BaseFilter<String, String>.MatchEvaluator Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ContentDispositionFilter : BaseFilter<string, string> Constructors ContentDispositionFilter(String, Func<String, String>) Initializes a new instance of the ContentDispositionFilter class. Declaration public ContentDispositionFilter(string matchableString, Func<string, string> matchEvaluator = null) Parameters Type Name Description String matchableString Name of the matchable content disposition. Func < String , String > matchEvaluator The match evaluator. Methods IsContentDispositionMatch(IEnumerable<ContentDispositionFilter>, HttpContent, out String) Determines whether [is content disposition match] [the specified filters]. Declaration public static bool IsContentDispositionMatch(IEnumerable<ContentDispositionFilter> filters, HttpContent content, out string outputMessage) Parameters Type Name Description IEnumerable < ContentDispositionFilter > filters The filters. HttpContent content The content. String outputMessage The output message. Returns Type Description Boolean true if [is content disposition match] [the specified filters]; otherwise, false . Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "core/Microsoft.Graph.Communications.Core.Exceptions.ClientException.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Exceptions.ClientException.html",
    "title": "Class ClientException",
    "keywords": "Class ClientException Class for client error exception. Inheritance Object ClientException Namespace : Microsoft.Graph.Communications.Core.Exceptions Assembly : Microsoft.Graph.Communications.Core.dll Syntax [Obsolete(\"Deprecated, please use Microsoft.Graph.ClientException instead.\")] public class ClientException : ClientException Constructors ClientException(Error, Exception) Initializes a new instance of the ClientException class. Declaration [Obsolete(\"Deprecated, please use Microsoft.Graph.ClientException instead.\")] public ClientException(Error error, Exception innerException = null) Parameters Type Name Description Error error The Error to wrap. Exception innerException The Exception to wrap."
  },
  "client/Microsoft.Graph.Communications.Resources.IResource.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.IResource.html",
    "title": "Interface IResource",
    "keywords": "Interface IResource The stateful resource interface. Inherited Members IResourceBase.CreatedDateTime IResourceBase.Client IResourceBase.GraphClient IResourceBase.GraphLogger IResourceBase.ResourcePath IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IResource : IResourceBase, IDisposable Properties Id Gets the identifier. Declaration string Id { get; } Property Value Type Description String ModifiedDateTime Gets the last modified date time of this resource. Declaration DateTimeOffset ModifiedDateTime { get; } Property Value Type Description DateTimeOffset Resource Gets the resource. Declaration object Resource { get; } Property Value Type Description Object See Also IResourceBase"
  },
  "common/Microsoft.Graph.Communications.Common.ObjectRootDisposable.html": {
    "href": "common/Microsoft.Graph.Communications.Common.ObjectRootDisposable.html",
    "title": "Class ObjectRootDisposable",
    "keywords": "Class ObjectRootDisposable Base object. Inheritance Object Disposable ObjectRootDisposable TaskQueue Implements IDisposable Inherited Members Disposable.Dispose() Disposable.Dispose(Boolean) Disposable.IsDisposed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public abstract class ObjectRootDisposable : Disposable, IDisposable Constructors ObjectRootDisposable(IGraphLogger) Initializes a new instance of the ObjectRootDisposable class. Declaration protected ObjectRootDisposable(IGraphLogger logger) Parameters Type Name Description IGraphLogger logger Logger instance. Properties GraphLogger Gets the logger. Declaration protected IGraphLogger GraphLogger { get; } Property Value Type Description IGraphLogger Implements System.IDisposable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "core/Microsoft.Graph.Communications.Core.Notifications.NotificationProcessor.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Notifications.NotificationProcessor.html",
    "title": "Class NotificationProcessor",
    "keywords": "Class NotificationProcessor The notification processor class. Inheritance Object NotificationProcessor Implements INotificationProcessor IDisposable Namespace : Microsoft.Graph.Communications.Core.Notifications Assembly : Microsoft.Graph.Communications.Core.dll Syntax public class NotificationProcessor : Disposable, INotificationProcessor, IDisposable Constructors NotificationProcessor(IAuthenticationProvider, ISerializer) Initializes a new instance of the NotificationProcessor class. Declaration public NotificationProcessor(IAuthenticationProvider authenticationProvider, ISerializer serializer) Parameters Type Name Description IAuthenticationProvider authenticationProvider The authentication provider. ISerializer serializer The serializer. Exceptions Type Condition ArgumentNullException If the authentication provider is null. Properties AuthenticationProvider Gets the authentication provider. TODO: This should probably not be a part of the INotificationProcessor . Ideally the request is already validated prior to making it in here. This means that 1) Already sanitized by authentication provider and 2) The tenant/scenario id parameters extracted into the IGraphRequest. Declaration public IAuthenticationProvider AuthenticationProvider { get; } Property Value Type Description IAuthenticationProvider The authentication provider. Methods ExtractNotifications(String, ISerializer) Extracts the notifications from the specified content string. Declaration public static CommsNotifications ExtractNotifications(string content, ISerializer serializer) Parameters Type Name Description String content The content. ISerializer serializer The serializer. Returns Type Description CommsNotifications The deserialized CommsNotifications . Exceptions Type Condition ServiceException If the specified content is invalid. ProcessNotifications(Uri, String, String, Guid, Guid, IEnumerable<KeyValuePair<String, Object>>) Processes the notifications and raise the required callbacks. This function should be called in order for the SDK to raise any required events and process state changes. Declaration public void ProcessNotifications(Uri callbackUri, string content, string tenantId, Guid requestId, Guid scenarioId, IEnumerable<KeyValuePair<string, object>> additionalData = null) Parameters Type Name Description Uri callbackUri The callback URI. String content The notifications content. String tenantId The tenant identifier. Guid requestId The request identifier. Guid scenarioId The scenario identifier. IEnumerable < KeyValuePair < String , Object >> additionalData Additional data associated with the notification. Events OnCollectionNotificationReceived Occurs when a collection notification is received. Declaration public event Action<CollectionNotificationEventArgs> OnCollectionNotificationReceived Event Type Type Description Action < CollectionNotificationEventArgs > OnNotificationReceived Occurs when a notification is received. This is a global hook for all notifications. Declaration public event Action<NotificationEventArgs> OnNotificationReceived Event Type Type Description Action < NotificationEventArgs > OnResourceNotificationReceived Occurs when a single resource notification is received. Declaration public event Action<NotificationEventArgs> OnResourceNotificationReceived Event Type Type Description Action < NotificationEventArgs > Implements INotificationProcessor System.IDisposable See Also INotificationProcessor"
  },
  "client/Microsoft.Graph.Communications.Client.Cache.ICache.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Cache.ICache.html",
    "title": "Interface ICache",
    "keywords": "Interface ICache The cache interface used to store and recover the data used by the SDK. Namespace : Microsoft.Graph.Communications.Client.Cache Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface ICache Methods GetDataAsync<T>(IEnumerable<IGraphProperty>, String, CancellationToken) Gets the serialized string of the data at the specified resource path asynchronously. Fetching data only happens in HA/DR scenarios, so could take longer. Declaration Task<string> GetDataAsync<T>(IEnumerable<IGraphProperty> properties, string resourcePath, CancellationToken cancellationToken = default(CancellationToken)) where T : Entity Parameters Type Name Description IEnumerable < IGraphProperty > properties The properties. String resourcePath The resource path. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < String > The recovered serialized data at the specified resource path. Type Parameters Name Description T The type of Entity to fetch. GetDataCollectionAsync<T>(IEnumerable<IGraphProperty>, String, CancellationToken) Gets the resource paths for the children of the collection with the specified resource path asynchronously. Fetching data only happens in HA/DR scenarios, so could take longer. Declaration Task<IEnumerable<string>> GetDataCollectionAsync<T>(IEnumerable<IGraphProperty> properties, string resourcePath, CancellationToken cancellationToken = default(CancellationToken)) where T : Entity Parameters Type Name Description IEnumerable < IGraphProperty > properties The properties. String resourcePath The resource path. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IEnumerable < String >> The recovered collection or child resource paths. Type Parameters Name Description T The type of Entity contained in the collection. SetData(ChangeType, IResource, IEnumerable<IGraphProperty>, String, Lazy<String>) Sets the data under the specified resource path. These should be short running operations, as they block notification callbacks. Declaration void SetData(ChangeType change, IResource resource, IEnumerable<IGraphProperty> properties, string resourcePath, Lazy<string> serializedData) Parameters Type Name Description ChangeType change The type of change occuring. IResource resource The resource being serialized. IEnumerable < IGraphProperty > properties The properties. String resourcePath The resource path. Lazy < String > serializedData The serialized data lazy string. For performance reasons the string is only serialized when requested."
  },
  "client/Microsoft.Graph.Communications.Client.Cache.ServiceCache.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Cache.ServiceCache.html",
    "title": "Class ServiceCache",
    "keywords": "Class ServiceCache The cache that restores the data directly from the service. In this case there is no storage of data, as the service acts as the master. Inheritance Object ServiceCache Implements ICache Namespace : Microsoft.Graph.Communications.Client.Cache Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class ServiceCache : ObjectRootDisposable, ICache Constructors ServiceCache(IGraphLogger, IGraphClient, ISerializer, String) Initializes a new instance of the ServiceCache class. Declaration public ServiceCache(IGraphLogger logger, IGraphClient client, ISerializer serializer, string baseUri) Parameters Type Name Description IGraphLogger logger Logger instance. IGraphClient client The client. ISerializer serializer The serializer. String baseUri The base URI. Methods GetDataAsync<T>(IEnumerable<IGraphProperty>, String, CancellationToken) Gets the serialized string of the data at the specified resource path asynchronously. Fetching data only happens in HA/DR scenarios, so could take longer. Declaration public Task<string> GetDataAsync<T>(IEnumerable<IGraphProperty> properties, string resourcePath, CancellationToken cancellationToken = default(CancellationToken)) where T : Entity Parameters Type Name Description IEnumerable < IGraphProperty > properties The properties. String resourcePath The resource path. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < String > The recovered serialized data at the specified resource path. Type Parameters Name Description T The type of Entity to fetch. GetDataCollectionAsync<T>(IEnumerable<IGraphProperty>, String, CancellationToken) Gets the resource paths for the children of the collection with the specified resource path asynchronously. Fetching data only happens in HA/DR scenarios, so could take longer. Declaration public Task<IEnumerable<string>> GetDataCollectionAsync<T>(IEnumerable<IGraphProperty> properties, string resourcePath, CancellationToken cancellationToken = default(CancellationToken)) where T : Entity Parameters Type Name Description IEnumerable < IGraphProperty > properties The properties. String resourcePath The resource path. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IEnumerable < String >> The recovered collection or child resource paths. Type Parameters Name Description T The type of Entity contained in the collection. SetData(ChangeType, IResource, IEnumerable<IGraphProperty>, String, Lazy<String>) Sets the data under the specified resource path. These should be short running operations, as they block notification callbacks. Declaration public void SetData(ChangeType change, IResource resource, IEnumerable<IGraphProperty> properties, string resourcePath, Lazy<string> serializedData) Parameters Type Name Description ChangeType change The type of change occuring. IResource resource The resource being serialized. IEnumerable < IGraphProperty > properties The properties. String resourcePath The resource path. Lazy < String > serializedData The serialized data lazy string. For performance reasons the string is only serialized when requested. Implements ICache See Also ObjectRootDisposable ICache"
  },
  "client/Microsoft.Graph.Communications.Resources.ResourceEventHandler-2.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.ResourceEventHandler-2.html",
    "title": "Delegate ResourceEventHandler<TSender, TEntity>",
    "keywords": "Delegate ResourceEventHandler<TSender, TEntity> The resource event handler delegate. Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public delegate void ResourceEventHandler<in TSender, TEntity>(TSender sender, ResourceEventArgs<TEntity> e) where TEntity : Entity; Parameters Type Name Description TSender sender The sender. ResourceEventArgs <TEntity> e The event arguments. Type Parameters Name Description TSender The type of the resource. IResource<TSelf, TEntity> TEntity The containing resource type. Entity Constructors ResourceEventHandler(Object, IntPtr) Declaration public ResourceEventHandler(object object, IntPtr method) Parameters Type Name Description Object object IntPtr method Methods BeginInvoke(TSender, ResourceEventArgs<TEntity>, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(TSender sender, ResourceEventArgs<TEntity> e, AsyncCallback callback, object object) Parameters Type Name Description TSender sender ResourceEventArgs <TEntity> e AsyncCallback callback Object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(TSender, ResourceEventArgs<TEntity>) Declaration public virtual void Invoke(TSender sender, ResourceEventArgs<TEntity> e) Parameters Type Name Description TSender sender ResourceEventArgs <TEntity> e"
  },
  "common/Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException.html",
    "title": "Class RoutingBadRequestException",
    "keywords": "Class RoutingBadRequestException Indicate there's a bad request Inheritance Object Exception RoutingException RoutingBadRequestException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Exceptions Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class RoutingBadRequestException : RoutingException, ISerializable, _Exception Constructors RoutingBadRequestException(String) Initializes a new instance of the RoutingBadRequestException class. Declaration public RoutingBadRequestException(string message) Parameters Type Name Description String message message RoutingBadRequestException(String, Exception) Initializes a new instance of the RoutingBadRequestException class. Declaration public RoutingBadRequestException(string message, Exception innerException) Parameters Type Name Description String message message Exception innerException inner exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ExceptionUtils.FindInnerException(Exception) ExceptionUtils.FormatException(Exception, Int32) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "client/Microsoft.Graph.Communications.Client.IPagedList-1.html": {
    "href": "client/Microsoft.Graph.Communications.Client.IPagedList-1.html",
    "title": "Interface IPagedList<T>",
    "keywords": "Interface IPagedList<T> The paged list interface. Inherited Members IReadOnlyList<T>.Item[Int32] IReadOnlyCollection<T>.Count IEnumerable<T>.GetEnumerator() Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IPagedList<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of object to page. Properties AdditionalData Gets or sets the additional data. Declaration IDictionary<string, object> AdditionalData { get; set; } Property Value Type Description IDictionary < String , Object > NextLinkUrl Gets the next link URL taken from @odata.nextLink. Declaration Uri NextLinkUrl { get; } Property Value Type Description Uri Value Gets or sets the value in the current page of the list. Declaration IList<T> Value { get; set; } Property Value Type Description IList <T> See Also IList <T>"
  },
  "common/Microsoft.Graph.Communications.Common.OData.ODataTimeSpanConverter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.OData.ODataTimeSpanConverter.html",
    "title": "Class ODataTimeSpanConverter",
    "keywords": "Class ODataTimeSpanConverter Custom json converter for TimeSpans. Inheritance Object ODataTimeSpanConverter Namespace : Microsoft.Graph.Communications.Common.OData Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ODataTimeSpanConverter : JsonConverter Constructors ODataTimeSpanConverter() Declaration public ODataTimeSpanConverter() Properties CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Deserializes the object to the correct type. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader The Newtonsoft.Json.JsonReader to read from. Type objectType The interface type. Object existingValue The existing value of the object being read. Newtonsoft.Json.JsonSerializer serializer The Newtonsoft.Json.JsonSerializer for deserialization. Returns Type Description Object The deserialized object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphResponse-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphResponse-1.html",
    "title": "Class GraphResponse<T>",
    "keywords": "Class GraphResponse<T> The base of the exchange of a IGraphRequest<T> or IGraphResponse<T> . Inheritance Object GraphResponse<T> GraphResponse Implements IGraphResponse <T> IGraphExchange <T> IGraphExchange Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphResponse<T> : IGraphResponse<T>, IGraphExchange<T>, IGraphExchange Type Parameters Name Description T Constructors GraphResponse(T, ResponseStatus) Initializes a new instance of the GraphResponse<T> class. Create a new graph response Declaration public GraphResponse(T content, ResponseStatus status) Parameters Type Name Description T content The serialized content of the response. ResponseStatus status Status indicating success/failure/other for the response. GraphResponse(String, ResponseStatus, String) Initializes a new instance of the GraphResponse<T> class. Declaration public GraphResponse(string errorContent, ResponseStatus status, string reasonPhrase) Parameters Type Name Description String errorContent Content of the error. ResponseStatus status The status. String reasonPhrase The reason phrase. Properties Content Declaration public T Content { get; set; } Property Value Type Description T ErrorContent Declaration public string ErrorContent { get; set; } Property Value Type Description String Properties Gets the properties of the exchange. Declaration public ICollection<IGraphProperty> Properties { get; } Property Value Type Description ICollection < IGraphProperty > ReasonPhrase Declaration public string ReasonPhrase { get; set; } Property Value Type Description String Status Declaration public ResponseStatus Status { get; } Property Value Type Description ResponseStatus Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IGraphResponse<T> IGraphExchange<T> IGraphExchange Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphResponseExtensions.ToHttpResponseMessage<T>(IGraphResponse<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>)"
  },
  "client/Microsoft.Graph.Communications.Client.ICommunicationsClient.html": {
    "href": "client/Microsoft.Graph.Communications.Client.ICommunicationsClient.html",
    "title": "Interface ICommunicationsClient",
    "keywords": "Interface ICommunicationsClient The CommunicationsClient interface. This is the entry point of the SDK and a reference to this instance must be held for the duration of the session. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface ICommunicationsClient : IDisposable Properties AppId Gets the application identifier. Declaration string AppId { get; } Property Value Type Description String AppName Gets the name of the application. Declaration string AppName { get; } Property Value Type Description String AuthenticationProvider Gets the authentication provider used to authenticate both inbound and outbound requests. Declaration IRequestAuthenticationProvider AuthenticationProvider { get; } Property Value Type Description IRequestAuthenticationProvider BaseUrl Gets the Graph service's base URL. Declaration string BaseUrl { get; } Property Value Type Description String GraphClient Gets the graph client. This is the Client used to communicate with the service. Declaration IGraphClient GraphClient { get; } Property Value Type Description IGraphClient GraphLogger Gets the graph logger. This is the logger used within the SDK. Declaration IGraphLogger GraphLogger { get; } Property Value Type Description IGraphLogger Id Gets the client identifier. Declaration Guid Id { get; } Property Value Type Description Guid Serializer Gets the serializer Declaration ISerializer Serializer { get; } Property Value Type Description ISerializer Methods ProcessNotifications(Uri, CommsNotifications, String, Guid, Guid, IDictionary<String, Object>) Processes the notifications and raise the required callbacks. This function should be called in order for the SDK to raise any required events and process state changes. Declaration void ProcessNotifications(Uri callbackUri, CommsNotifications notifications, string tenantId, Guid requestId, Guid scenarioId, IDictionary<string, object> additionalData = null) Parameters Type Name Description Uri callbackUri The callback URI. CommsNotifications notifications The notifications. String tenantId The tenant identifier. Guid requestId The request identifier. Guid scenarioId The scenario identifier. IDictionary < String , Object > additionalData Additional data associated with the notification. RehydrateAsync(String, String, Guid) Re-hydrates the resource at the specified path asynchronously. Declaration Task RehydrateAsync(string resourcePath, string tenantId, Guid scenarioId = default(Guid)) Parameters Type Name Description String resourcePath The resource path. String tenantId The tenant identifier. Guid scenarioId The scenario identifier. Returns Type Description Task The Task . TerminateAsync(TimeSpan) Terminates this client asynchronously. This terminates all the calls, waits for dispose events, and disposes everything. Declaration Task<bool> TerminateAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout The timeout. Returns Type Description Task < Boolean > True if all instances terminated successfully, false otherwise. Events OnNotificationException Occurs when exceptions are raised on notification callbacks. Declaration event Action<FailedNotificationEventArgs> OnNotificationException Event Type Type Description Action < FailedNotificationEventArgs > OnNotificationProcessed Occurs when the notification has been processed by all callbacks. Declaration event Action<NotificationEventArgs> OnNotificationProcessed Event Type Type Description Action < NotificationEventArgs > OnNotificationQueued Occurs when the notification has been queued into the backlog. Declaration event Action<NotificationEventArgs> OnNotificationQueued Event Type Type Description Action < NotificationEventArgs > Extension Methods CommunicationsClientExtensions.ProcessNotificationAsync(ICommunicationsClient, HttpRequestMessage) CommunicationsClientExtensions.LogAndCreateResponse(ICommunicationsClient, HttpRequestMessage, Guid, Guid, CommsNotifications, HttpStatusCode, Stopwatch, Exception) CommunicationsClientExtensions.CreateResponse(ICommunicationsClient, HttpStatusCode, Guid, Guid, Object)"
  },
  "client/Microsoft.Graph.Communications.Client.Transport.GraphAuthClient.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Transport.GraphAuthClient.html",
    "title": "Class GraphAuthClient",
    "keywords": "Class GraphAuthClient The graph auth client. Inheritance Object GraphAuthClient Namespace : Microsoft.Graph.Communications.Client.Transport Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class GraphAuthClient : GraphHttpClient Constructors GraphAuthClient(IGraphLogger, JsonSerializerSettings, HttpClient, IRequestAuthenticationProvider, ProductInfoHeaderValue, IEnumerable<IGraphProperty>) Initializes a new instance of the GraphAuthClient class. Declaration public GraphAuthClient(IGraphLogger logger, JsonSerializerSettings jsonSerializerSettings, HttpClient httpClient, IRequestAuthenticationProvider authenticationProvider, ProductInfoHeaderValue userAgent, IEnumerable<IGraphProperty> defaultProperties) Parameters Type Name Description IGraphLogger logger The logger. Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings The json serializer settings. HttpClient httpClient The HTTP client. IRequestAuthenticationProvider authenticationProvider The authentication provider. ProductInfoHeaderValue userAgent The user agent. IEnumerable < IGraphProperty > defaultProperties The default properties. Exceptions Type Condition ArgumentNullException If the authentication provider is null. Methods SendHttpRequestAsync<T1, T2>(IGraphRequest<T1>, CancellationToken) Declaration protected override Task<IGraphResponse<T2>> SendHttpRequestAsync<T1, T2>(IGraphRequest<T1> graphRequest, CancellationToken cancellationToken) where T1 : class where T2 : class Parameters Type Name Description IGraphRequest <T1> graphRequest CancellationToken cancellationToken Returns Type Description Task < IGraphResponse <T2>> Type Parameters Name Description T1 T2 See Also GraphHttpClient"
  },
  "client/Microsoft.Graph.Communications.Client.Transport.GraphAuthClientFactory.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Transport.GraphAuthClientFactory.html",
    "title": "Class GraphAuthClientFactory",
    "keywords": "Class GraphAuthClientFactory The HTTP graph client factory. Inheritance Object GraphAuthClientFactory Implements IGraphClientFactory Namespace : Microsoft.Graph.Communications.Client.Transport Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class GraphAuthClientFactory : ObjectRoot, IGraphClientFactory Constructors GraphAuthClientFactory(IGraphLogger, JsonSerializerSettings, IRequestAuthenticationProvider, ProductInfoHeaderValue, IEnumerable<IGraphProperty>, HttpClient) Initializes a new instance of the GraphAuthClientFactory class. Declaration public GraphAuthClientFactory(IGraphLogger logger, JsonSerializerSettings jsonSerializerSettings, IRequestAuthenticationProvider authenticationProvider, ProductInfoHeaderValue userAgent, IEnumerable<IGraphProperty> defaultProperties, HttpClient httpClient = null) Parameters Type Name Description IGraphLogger logger Logger instance. Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings The json serializer settings. IRequestAuthenticationProvider authenticationProvider The authentication provider. ProductInfoHeaderValue userAgent The user agent. IEnumerable < IGraphProperty > defaultProperties The default properties. HttpClient httpClient The HTTP client. Properties AuthenticationProvider Gets the authentication provider. Declaration public IRequestAuthenticationProvider AuthenticationProvider { get; } Property Value Type Description IRequestAuthenticationProvider The authentication provider. GraphLogger Gets the graph logger. Declaration public IGraphLogger GraphLogger { get; } Property Value Type Description IGraphLogger Methods Create(IGraphLogger) Creates a new IGraphClient . Declaration public IGraphClient Create(IGraphLogger logger = null) Parameters Type Name Description IGraphLogger logger An optional IGraphLogger logger to be used in the new IGraphClient . Returns Type Description IGraphClient The IGraphClient . Implements IGraphClientFactory See Also ObjectRoot IGraphClientFactory"
  },
  "common/Microsoft.Graph.Communications.Common.Exceptions.RoutingException.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Exceptions.RoutingException.html",
    "title": "Class RoutingException",
    "keywords": "Class RoutingException Generic routing exception Inheritance Object Exception RoutingException RoutingBadRequestException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Exceptions Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class RoutingException : Exception, ISerializable, _Exception Constructors RoutingException(String) Initializes a new instance of the RoutingException class. Declaration public RoutingException(string message) Parameters Type Name Description String message message RoutingException(String, Exception) Initializes a new instance of the RoutingException class. Declaration public RoutingException(string message, Exception innerException) Parameters Type Name Description String message message Exception innerException inner exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ExceptionUtils.FindInnerException(Exception) ExceptionUtils.FormatException(Exception, Int32) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Observer-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Observer-1.html",
    "title": "Class Observer<T>",
    "keywords": "Class Observer<T> Observer class. Inheritance Object Disposable Observer<T> Implements IDisposable IObserver <T> Inherited Members Disposable.Dispose() Disposable.IsDisposed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public sealed class Observer<T> : Disposable, IDisposable, IObserver<T> Type Parameters Name Description T Type of the value the observer returns. Constructors Observer(IObservable<T>, Action<T>, Action<Exception>, Action) Initializes a new instance of the Observer<T> class. Declaration public Observer(IObservable<T> observable, Action<T> onNext, Action<Exception> onError = null, Action onCompleted = null) Parameters Type Name Description IObservable <T> observable Observable object. Action <T> onNext Callback for next. Action < Exception > onError Callback for error. Action onCompleted Callback for completed. Methods Dispose(Boolean) Protected implementation of dispose. This will be triggered only once regardless if manually disposed or garbage collected. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Disposable.Dispose(Boolean) Explicit Interface Implementations IObserver<T>.OnCompleted() Callback when observer has no more data. Declaration void IObserver<T>.OnCompleted() IObserver<T>.OnError(Exception) Callback when observer hits an error. Declaration void IObserver<T>.OnError(Exception error) Parameters Type Name Description Exception error Exception info. IObserver<T>.OnNext(T) Callback when data arrives. Declaration void IObserver<T>.OnNext(T value) Parameters Type Name Description T value Observed value. Implements System.IDisposable System.IObserver<T> Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.OData.CamelCaseStringEnumConverter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.OData.CamelCaseStringEnumConverter.html",
    "title": "Class CamelCaseStringEnumConverter",
    "keywords": "Class CamelCaseStringEnumConverter Converts an System.Enum to and from its name string value. When converting to its string value it will use camelCase formatting. Inheritance Object CamelCaseStringEnumConverter Namespace : Microsoft.Graph.Communications.Common.OData Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class CamelCaseStringEnumConverter : StringEnumConverter Constructors CamelCaseStringEnumConverter() Initializes a new instance of the CamelCaseStringEnumConverter class. Declaration public CamelCaseStringEnumConverter() Properties CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) See Also Newtonsoft.Json.Converters.StringEnumConverter"
  },
  "common/Microsoft.Graph.Communications.Common.StateMachine-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.StateMachine-1.html",
    "title": "Class StateMachine<TStateEnum>",
    "keywords": "Class StateMachine<TStateEnum> Lockfree enum-based state machine. Transitions are O(1). Inheritance Object StateMachine<TStateEnum> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public sealed class StateMachine<TStateEnum> where TStateEnum : struct, IComparable, IFormattable, IConvertible Type Parameters Name Description TStateEnum The enum type which represents state. Constructors StateMachine(TStateEnum, StateMachine<TStateEnum>.Transition[]) Initializes a new instance of the StateMachine<TStateEnum> class. Declaration public StateMachine(TStateEnum initalState, StateMachine<TStateEnum>.Transition[] transitions) Parameters Type Name Description TStateEnum initalState State of the inital. StateMachine.Transition <>[] transitions The transitions. Properties State Gets the state. Declaration public TStateEnum State { get; } Property Value Type Description TStateEnum The state. Methods ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Object.ToString() TransitionState(TStateEnum) Transition to next state. Transition to same state is not allowed. Non valid transition throws exception. Declaration public TStateEnum TransitionState(TStateEnum newState) Parameters Type Name Description TStateEnum newState The new state. Returns Type Description TStateEnum Previous state Exceptions Type Condition Exception If transition is not allow, exception is thrown. TransitionStateSafe(TStateEnum) Transition to the next state. Transition to same state has to be allowed via transitions. Non valid transition returns null. Declaration public TStateEnum? TransitionStateSafe(TStateEnum newState) Parameters Type Name Description TStateEnum newState The new state. Returns Type Description Nullable <TStateEnum> Previous state or null; if transition is not valid. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphResponse.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphResponse.html",
    "title": "Interface IGraphResponse",
    "keywords": "Interface IGraphResponse The response got in exchange of a IGraphRequest . Inherited Members IGraphResponse<NoContentMessage>.Status IGraphResponse<NoContentMessage>.ReasonPhrase IGraphResponse<NoContentMessage>.ErrorContent IGraphExchange<NoContentMessage>.Content IGraphExchange.Properties Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphResponse : IGraphResponse<NoContentMessage>, IGraphExchange<NoContentMessage>, IGraphExchange Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphResponseExtensions.ToHttpResponseMessage<T>(IGraphResponse<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>)"
  },
  "core/Microsoft.Graph.Communications.Core.Serialization.CommsSerializer.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Serialization.CommsSerializer.html",
    "title": "Class CommsSerializer",
    "keywords": "Class CommsSerializer An interface for serializing and deserializing JSON objects. This serializer is used throughout the Communications workload to provide extra functionality. Specifically it supports more robust serialization/deserialization of @odata.type property and deserialization of open type additional data. Inheritance Object CommsSerializer Implements ISerializer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core.Serialization Assembly : Microsoft.Graph.Communications.Core.dll Syntax public class CommsSerializer : ISerializer Constructors CommsSerializer(Boolean) Initializes a new instance of the CommsSerializer class. Declaration public CommsSerializer(bool pretty = false) Parameters Type Name Description Boolean pretty If set to true make the formatting pretty. CommsSerializer(Boolean, Assembly[]) Initializes a new instance of the CommsSerializer class. Declaration public CommsSerializer(bool pretty = false, params Assembly[] assemblies) Parameters Type Name Description Boolean pretty If set to true make the formatting pretty. Assembly [] assemblies The assemblies to use for deserialization. The CommsSerializer searches through the specified assemblies in order specified to find the @odata.type in the json payload. Properties CoreAssemblies Gets the list of core Assembly detected. Declaration public Assembly[] CoreAssemblies { get; } Property Value Type Description Assembly [] JsonSerializerSettings Gets the JSON serializer settings. Declaration public JsonSerializerSettings JsonSerializerSettings { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings Methods DeserializeObject<T>(Stream) Declaration public T DeserializeObject<T>(Stream stream) Parameters Type Name Description Stream stream Returns Type Description T Type Parameters Name Description T DeserializeObject<T>(String) Declaration public T DeserializeObject<T>(string inputString) Parameters Type Name Description String inputString Returns Type Description T Type Parameters Name Description T SerializeObject(Object) Declaration public string SerializeObject(object serializeableObject) Parameters Type Name Description Object serializeableObject Returns Type Description String Implements Microsoft.Graph.ISerializer See Also ISerializer"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.HttpResponseMessageExtensions.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.HttpResponseMessageExtensions.html",
    "title": "Class HttpResponseMessageExtensions",
    "keywords": "Class HttpResponseMessageExtensions Extensions for HttpResponseMessage class. Inheritance Object HttpResponseMessageExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class HttpResponseMessageExtensions Methods GetHttpAndContentHeaders(HttpResponseMessage) Gets headers from the http response and the content. Declaration public static IEnumerable<KeyValuePair<string, IEnumerable<string>>> GetHttpAndContentHeaders(this HttpResponseMessage message) Parameters Type Name Description HttpResponseMessage message The message. Returns Type Description IEnumerable < KeyValuePair < String , IEnumerable < String >>> The list of http and content headers. GetOutcomeFromResponseOrException(Nullable<Int32>, Exception) Try extracting outcome outcome from HTTP response status code or exception Declaration public static string GetOutcomeFromResponseOrException(int? statusCode, Exception exception) Parameters Type Name Description Nullable < Int32 > statusCode HTTP response status code Exception exception The exception Returns Type Description String Outcome string ToGraphResponseAsync(HttpResponseMessage) Converts HttpResponseMessage to an instance of IGraphResponse<T> . Declaration public static Task<IGraphResponse> ToGraphResponseAsync(this HttpResponseMessage httpResponse) Parameters Type Name Description HttpResponseMessage httpResponse HTTP response to be converted. Returns Type Description Task < IGraphResponse > IGraphResponse corresponding to httpResponse . ToGraphResponseAsync<T>(HttpResponseMessage, JsonSerializerSettings) Converts HttpResponseMessage to an instance of IGraphResponse<T> . Declaration public static Task<IGraphResponse<T>> ToGraphResponseAsync<T>(this HttpResponseMessage httpResponse, JsonSerializerSettings serializerSettings = null) where T : class Parameters Type Name Description HttpResponseMessage httpResponse HTTP response to be converted. Newtonsoft.Json.JsonSerializerSettings serializerSettings Add serializer that can serialize the content. Returns Type Description Task < IGraphResponse <T>> IGraphResponse<T> corresponding to httpResponse . Type Parameters Name Description T Type of the expected response."
  },
  "common/Microsoft.Graph.Communications.Common.WeakKeyDictionary-2.html": {
    "href": "common/Microsoft.Graph.Communications.Common.WeakKeyDictionary-2.html",
    "title": "Class WeakKeyDictionary<TKey, TValue>",
    "keywords": "Class WeakKeyDictionary<TKey, TValue> Dictionary with weak reference for the key. Inheritance Object ConcurrentDictionary < WeakKey <TKey>, TValue> WeakKeyDictionary<TKey, TValue> Implements IDictionary < WeakKey <TKey>, TValue> ICollection < KeyValuePair < WeakKey <TKey>, TValue>> IDictionary ICollection IReadOnlyDictionary < WeakKey <TKey>, TValue> IReadOnlyCollection < KeyValuePair < WeakKey <TKey>, TValue>> IEnumerable < KeyValuePair < WeakKey <TKey>, TValue>> IEnumerable Inherited Members ConcurrentDictionary<WeakKey<TKey>, TValue>.TryAdd(WeakKey<TKey>, TValue) ConcurrentDictionary<WeakKey<TKey>, TValue>.ContainsKey(WeakKey<TKey>) ConcurrentDictionary<WeakKey<TKey>, TValue>.TryRemove(WeakKey<TKey>, TValue) ConcurrentDictionary<WeakKey<TKey>, TValue>.TryGetValue(WeakKey<TKey>, TValue) ConcurrentDictionary<WeakKey<TKey>, TValue>.TryUpdate(WeakKey<TKey>, TValue, TValue) ConcurrentDictionary<WeakKey<TKey>, TValue>.Clear() System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>[], System.Int32) ConcurrentDictionary<WeakKey<TKey>, TValue>.ToArray() ConcurrentDictionary<WeakKey<TKey>, TValue>.GetEnumerator() ConcurrentDictionary<WeakKey<TKey>, TValue>.GetOrAdd(WeakKey<TKey>, Func<WeakKey<TKey>, TValue>) ConcurrentDictionary<WeakKey<TKey>, TValue>.GetOrAdd(WeakKey<TKey>, TValue) ConcurrentDictionary<WeakKey<TKey>, TValue>.GetOrAdd<TArg>(WeakKey<TKey>, Func<WeakKey<TKey>, TArg, TValue>, TArg) ConcurrentDictionary<WeakKey<TKey>, TValue>.AddOrUpdate<TArg>(WeakKey<TKey>, Func<WeakKey<TKey>, TArg, TValue>, Func<WeakKey<TKey>, TValue, TArg, TValue>, TArg) ConcurrentDictionary<WeakKey<TKey>, TValue>.AddOrUpdate(WeakKey<TKey>, Func<WeakKey<TKey>, TValue>, Func<WeakKey<TKey>, TValue, TValue>) ConcurrentDictionary<WeakKey<TKey>, TValue>.AddOrUpdate(WeakKey<TKey>, TValue, Func<WeakKey<TKey>, TValue, TValue>) System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.IDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.Add(Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue) System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.IDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.Remove(Microsoft.Graph.Communications.Common.WeakKey<TKey>) System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>>.Add(System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>) System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>>.Contains(System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>) System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>>.Remove(System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>) ConcurrentDictionary<WeakKey<TKey>, TValue>.IEnumerable.GetEnumerator() ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.Add(Object, Object) ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.Contains(Object) ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.GetEnumerator() ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.Remove(Object) System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ConcurrentDictionary<WeakKey<TKey>, TValue>.ICollection.CopyTo(Array, Int32) ConcurrentDictionary<WeakKey<TKey>, TValue>.Item[WeakKey<TKey>] ConcurrentDictionary<WeakKey<TKey>, TValue>.Count ConcurrentDictionary<WeakKey<TKey>, TValue>.IsEmpty ConcurrentDictionary<WeakKey<TKey>, TValue>.Keys System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.IReadOnlyDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.Keys ConcurrentDictionary<WeakKey<TKey>, TValue>.Values System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.IReadOnlyDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.Values System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Microsoft.Graph.Communications.Common.WeakKey<TKey>, TValue>>.IsReadOnly ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.IsFixedSize ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.IsReadOnly ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.Keys ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.Values ConcurrentDictionary<WeakKey<TKey>, TValue>.IDictionary.Item[Object] ConcurrentDictionary<WeakKey<TKey>, TValue>.ICollection.IsSynchronized ConcurrentDictionary<WeakKey<TKey>, TValue>.ICollection.SyncRoot Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class WeakKeyDictionary<TKey, TValue> : ConcurrentDictionary<WeakKey<TKey>, TValue>, IDictionary<WeakKey<TKey>, TValue>, ICollection<KeyValuePair<WeakKey<TKey>, TValue>>, IDictionary, ICollection, IReadOnlyDictionary<WeakKey<TKey>, TValue>, IReadOnlyCollection<KeyValuePair<WeakKey<TKey>, TValue>>, IEnumerable<KeyValuePair<WeakKey<TKey>, TValue>>, IEnumerable where TKey : class Type Parameters Name Description TKey Key type which must be a reference type. TValue Value type. Constructors WeakKeyDictionary() Declaration public WeakKeyDictionary() Methods Cleanup() Cleans keys where the weak references have been garbage collected. Declaration public void Cleanup() Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) CollectionUtils.ForEach<T>(IEnumerable<T>, Action<T>) CollectionUtils.ForEachParallel<T>(IEnumerable<T>, Action<T>, IGraphLogger) CollectionUtils.GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey) CollectionUtils.GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) CollectionUtils.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionUtils.ToSortedList<TKey, TValue>(IEnumerable<TValue>, Func<TValue, TKey>) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.Any(IEnumerable) Validator.FirstObject(IEnumerable, Func<Object, Boolean>) Validator.FirstObject(IEnumerable) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.NotEmpty<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) Validator.VerifyNotContainsKey<TK, TV>(IDictionary<TK, TV>, TK) Validator.VerifyContainsKey<TK, TV>(IDictionary<TK, TV>, TK) Validator.VerifyContainsKey<TK, TV>(IReadOnlyDictionary<TK, TV>, TK) Validator.VerifyContains<T>(IEnumerable<T>, T)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphClient.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphClient.html",
    "title": "Interface IGraphClient",
    "keywords": "Interface IGraphClient This class abstracts any communication with different services. This client acts at an object level rather than wire level and thus providing richer experience when working with complex objects. Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphClient Properties DefaultProperties Gets the default properties. Declaration IEnumerable<IGraphProperty> DefaultProperties { get; } Property Value Type Description IEnumerable < IGraphProperty > GraphLogger Gets the graph logger. Declaration IGraphLogger GraphLogger { get; } Property Value Type Description IGraphLogger Methods SendAsync<TRequest>(IGraphRequest<TRequest>, CancellationToken) Send a request as an asynchronous operation. Declaration Task<IGraphResponse> SendAsync<TRequest>(IGraphRequest<TRequest> request, CancellationToken cancellationToken = default(CancellationToken)) where TRequest : class Parameters Type Name Description IGraphRequest <TRequest> request The request message to send. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IGraphResponse > The task object representing the asynchronous operation. Type Parameters Name Description TRequest Type of the content present in the request. SendAsync<TRequest, TResponse>(IGraphRequest<TRequest>, CancellationToken) Send a request as an asynchronous operation. Declaration Task<IGraphResponse<TResponse>> SendAsync<TRequest, TResponse>(IGraphRequest<TRequest> request, CancellationToken cancellationToken = default(CancellationToken)) where TRequest : class where TResponse : class Parameters Type Name Description IGraphRequest <TRequest> request The request message to send. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IGraphResponse <TResponse>> The task object representing the asynchronous operation. Type Parameters Name Description TRequest Type of the content present in the request. TResponse Type of the expected content in response. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "core/Microsoft.Graph.Communications.Core.Notifications.CollectionNotificationEventArgs.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Notifications.CollectionNotificationEventArgs.html",
    "title": "Class CollectionNotificationEventArgs",
    "keywords": "Class CollectionNotificationEventArgs The collection notification event args. Inheritance Object NotificationEventArgs CollectionNotificationEventArgs Inherited Members NotificationEventArgs.NotificationId NotificationEventArgs.CallbackUri NotificationEventArgs.Notification NotificationEventArgs.TenantId NotificationEventArgs.RequestId NotificationEventArgs.ScenarioId NotificationEventArgs.ChangeType NotificationEventArgs.AdditionalData Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core.Notifications Assembly : Microsoft.Graph.Communications.Core.dll Syntax public class CollectionNotificationEventArgs : NotificationEventArgs Constructors CollectionNotificationEventArgs(Uri, CommsNotification, ChangeType, IReadOnlyList<Object>) Initializes a new instance of the CollectionNotificationEventArgs class. Declaration public CollectionNotificationEventArgs(Uri callbackUri, CommsNotification notification, ChangeType changeType, IReadOnlyList<object> resourceData) Parameters Type Name Description Uri callbackUri The callback URI. CommsNotification notification The notification. ChangeType changeType Type of the change. IReadOnlyList < Object > resourceData The resource data. Properties ResourceData Gets the resource data object list. Declaration public IReadOnlyList<object> ResourceData { get; } Property Value Type Description IReadOnlyList < Object > The resource data object list. See Also NotificationEventArgs"
  },
  "common/Microsoft.Graph.Communications.Common.CollectionUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.CollectionUtils.html",
    "title": "Class CollectionUtils",
    "keywords": "Class CollectionUtils Collection Utilities Inheritance Object CollectionUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class CollectionUtils Methods AddRange<T>(ICollection<T>, IEnumerable<T>) Adds the range of source values into target. Declaration public static void AddRange<T>(this ICollection<T> target, IEnumerable<T> source) Parameters Type Name Description ICollection <T> target The target. IEnumerable <T> source The source. Type Parameters Name Description T The type of Collection ForEach<T>(IEnumerable<T>, Action<T>) Analogous to IList.ForEach but for IEnumerable Declaration public static void ForEach<T>(this IEnumerable<T> enumerable, Action<T> action) Parameters Type Name Description IEnumerable <T> enumerable Enumeration Action <T> action Action to invoke on each element Type Parameters Name Description T Element type. ForEachParallel<T>(IEnumerable<T>, Action<T>, IGraphLogger) Analogous to IList.ForEach but for IEnumerable Declaration public static Exception ForEachParallel<T>(this IEnumerable<T> enumerable, Action<T> action, IGraphLogger logger) Parameters Type Name Description IEnumerable <T> enumerable Enumeration Action <T> action Action to invoke on each element IGraphLogger logger Instance of the Logger Returns Type Description Exception Exception if any. Type Parameters Name Description T Element type GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Get Value or default Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description IDictionary <TKey, TValue> dictionary Dictionary instance TKey key Key to lookup Returns Type Description TValue Value from dictionary or default value. Type Parameters Name Description TKey Type of the key TValue Type of the value GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Get Value or default Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) Parameters Type Name Description IDictionary <TKey, TValue> dictionary Dictionary instance TKey key Key to lookup TValue defaultValue The default value to be returned if it doesn't exist. Returns Type Description TValue Value from dictionary or default value. Type Parameters Name Description TKey Type of the key TValue Type of the value ToSortedList<TKey, TValue>(IEnumerable<TValue>, Func<TValue, TKey>) Converts sequence to a sorted list. Declaration public static SortedList<TKey, TValue> ToSortedList<TKey, TValue>(this IEnumerable<TValue> sequence, Func<TValue, TKey> keySelector) Parameters Type Name Description IEnumerable <TValue> sequence The sequence. Func <TValue, TKey> keySelector The function selector which provides a key given the value. Returns Type Description SortedList <TKey, TValue> Sorted list. Type Parameters Name Description TKey The type of the key. TValue The type of the value. TryRemoveAndDispose<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, TKey) Try to remove key from concurrent dictionary and dispose the value. Declaration public static void TryRemoveAndDispose<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key) where TValue : IDisposable Parameters Type Name Description ConcurrentDictionary <TKey, TValue> dictionary Dictionary to clean up TKey key Key to lookup Type Parameters Name Description TKey Key type TValue Value type"
  },
  "common/Microsoft.Graph.Communications.Common.Utilities.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Utilities.html",
    "title": "Class Utilities",
    "keywords": "Class Utilities Utilities class. Inheritance Object Utilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class Utilities Methods CombineHashCodes(Object[]) Combine several hash codes into a single hash code Declaration public static int CombineHashCodes(params object[] args) Parameters Type Name Description Object [] args Objects to combine into a single hash. Returns Type Description Int32 Combined hash code. DecodeReplacesContextFromBase64(String) Decodes the replaces context for consultative call transfer scenario. Declaration public static Uri DecodeReplacesContextFromBase64(this string replacesContext) Parameters Type Name Description String replacesContext The replaces context. Returns Type Description Uri The decoded replaces URI. Exceptions Type Condition InvalidOperationException Replaces context provided for consultative transfer is invalid. EncodeReplacesUriToBase64(Uri) Base64 Encodes the replaces URI for consultative call transfer scenario. Declaration public static string EncodeReplacesUriToBase64(this Uri replacesUri) Parameters Type Name Description Uri replacesUri The replaces URI. Returns Type Description String The encoded replaces context. SafeDispose<T>(ref T, IGraphLogger) Safely dispose members. Declaration public static void SafeDispose<T>(ref T t, IGraphLogger logger = null) where T : class, IDisposable Parameters Type Name Description T t Reference to member. IGraphLogger logger Logger instance. Type Parameters Name Description T Type of the member."
  },
  "core/Microsoft.Graph.Communications.Core.Notifications.INotificationProcessor.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Notifications.INotificationProcessor.html",
    "title": "Interface INotificationProcessor",
    "keywords": "Interface INotificationProcessor The notification processor interface. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Core.Notifications Assembly : Microsoft.Graph.Communications.Core.dll Syntax public interface INotificationProcessor : IDisposable Properties AuthenticationProvider Gets the authentication provider. TODO: This should probably not be a part of the INotificationProcessor . Ideally the request is already validated prior to making it in here. This means that 1) Already sanitized by authentication provider and 2) The tenant/scenario id parameters extracted into the IGraphRequest. Declaration IAuthenticationProvider AuthenticationProvider { get; } Property Value Type Description IAuthenticationProvider The authentication provider. Methods ProcessNotifications(Uri, String, String, Guid, Guid, IEnumerable<KeyValuePair<String, Object>>) Processes the notifications and raise the required callbacks. This function should be called in order for the SDK to raise any required events and process state changes. Declaration void ProcessNotifications(Uri callbackUri, string content, string tenantId, Guid requestId, Guid scenarioId, IEnumerable<KeyValuePair<string, object>> additionalData = null) Parameters Type Name Description Uri callbackUri The callback URI. String content The notifications content. String tenantId The tenant identifier. Guid requestId The request identifier. Guid scenarioId The scenario identifier. IEnumerable < KeyValuePair < String , Object >> additionalData Additional data associated with the notification. Events OnCollectionNotificationReceived Occurs when a collection notification is received. Declaration event Action<CollectionNotificationEventArgs> OnCollectionNotificationReceived Event Type Type Description Action < CollectionNotificationEventArgs > OnNotificationReceived Occurs when a notification is received. This is a global hook for all notifications. Declaration event Action<NotificationEventArgs> OnNotificationReceived Event Type Type Description Action < NotificationEventArgs > OnResourceNotificationReceived Occurs when a single resource notification is received. Declaration event Action<NotificationEventArgs> OnResourceNotificationReceived Event Type Type Description Action < NotificationEventArgs > Extension Methods NotificationProcessorExtensions.ProcessNotificationAsync(INotificationProcessor, HttpRequestMessage)"
  },
  "common/Microsoft.Graph.Communications.Common.TaskQueue.html": {
    "href": "common/Microsoft.Graph.Communications.Common.TaskQueue.html",
    "title": "Class TaskQueue",
    "keywords": "Class TaskQueue Task queue to encapsulate chaining of tasks. Inheritance Object Disposable ObjectRootDisposable TaskQueue Implements IDisposable Inherited Members ObjectRootDisposable.GraphLogger Disposable.Dispose() Disposable.IsDisposed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class TaskQueue : ObjectRootDisposable, IDisposable Constructors TaskQueue(IGraphLogger, Task) Initializes a new instance of the TaskQueue class. Declaration public TaskQueue(IGraphLogger logger, Task antecedent = null) Parameters Type Name Description IGraphLogger logger Logger instance. Task antecedent Optional antecedent task. Methods Dispose(Boolean) Protected implementation of dispose. This will be triggered only once regardless if manually disposed or garbage collected. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Disposable.Dispose(Boolean) EnqueueAsync(Func<Task, Task>) Enqueue an operation Declaration public Task EnqueueAsync(Func<Task, Task> operation) Parameters Type Name Description Func < Task , Task > operation Operation to queue. Returns Type Description Task A task that represents the queued operation. Implements System.IDisposable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.AutoClean.html": {
    "href": "common/Microsoft.Graph.Communications.Common.AutoClean.html",
    "title": "Class AutoClean",
    "keywords": "Class AutoClean Helper class to automatically cleanup. Inheritance Object Disposable AutoClean AutoClean<T> Implements IDisposable Inherited Members Disposable.Dispose() Disposable.IsDisposed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class AutoClean : Disposable, IDisposable Constructors AutoClean(Action) Initializes a new instance of the AutoClean class. Declaration public AutoClean(Action action) Parameters Type Name Description Action action Cleanup action. Methods Dispose(Boolean) Protected implementation of dispose. This will be triggered only once regardless if manually disposed or garbage collected. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Disposable.Dispose(Boolean) Implements System.IDisposable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphResponseException.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphResponseException.html",
    "title": "Class GraphResponseException",
    "keywords": "Class GraphResponseException Class representing GraphResponseException Inheritance Object Exception GraphResponseException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphResponseException : Exception, ISerializable, _Exception Constructors GraphResponseException(IGraphResponse) Initializes a new instance of the GraphResponseException class. Declaration public GraphResponseException(IGraphResponse errorResponse) Parameters Type Name Description IGraphResponse errorResponse The error response. Properties Response Gets the response. Declaration public IGraphResponse Response { get; } Property Value Type Description IGraphResponse The response. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ExceptionUtils.FindInnerException(Exception) ExceptionUtils.FormatException(Exception, Int32) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) See Also Exception"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphExchange-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphExchange-1.html",
    "title": "Interface IGraphExchange<T>",
    "keywords": "Interface IGraphExchange<T> The base of the exchange of a IGraphRequest<T> or IGraphResponse<T> . Inherited Members IGraphExchange.Properties Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphExchange<T> : IGraphExchange Type Parameters Name Description T Type of the body of exchange. Properties Content Gets or sets the content of the exchange. Declaration T Content { get; set; } Property Value Type Description T Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.HeaderFilter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.HeaderFilter.html",
    "title": "Class HeaderFilter",
    "keywords": "Class HeaderFilter Header filters act as whitelists. Inheritance Object BaseFilter BaseFilter < IEnumerable < String >, String > HeaderFilter Inherited Members BaseFilter<IEnumerable<String>, String>.MatchableString BaseFilter<IEnumerable<String>, String>.MatchEvaluator Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class HeaderFilter : BaseFilter<IEnumerable<string>, string> Constructors HeaderFilter(String) Initializes a new instance of the HeaderFilter class. Declaration public HeaderFilter(string matchableHeaderName) Parameters Type Name Description String matchableHeaderName Name of the matchable header. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.UriFilter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.UriFilter.html",
    "title": "Class UriFilter",
    "keywords": "Class UriFilter URI Filter. Any group matches from REGEX are obfuscated. Inheritance Object BaseFilter BaseFilter < Uri , Regex > UriFilter Inherited Members BaseFilter<Uri, Regex>.MatchableString BaseFilter<Uri, Regex>.MatchEvaluator Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class UriFilter : BaseFilter<Uri, Regex> Constructors UriFilter(Regex) Initializes a new instance of the UriFilter class. Declaration public UriFilter(Regex matchableSubtring) Parameters Type Name Description Regex matchableSubtring The matchable REGEX. Use captures for obfuscation. Use obfuscation tag names as group names for specific object Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration.html",
    "title": "Class HashingObfuscationConfiguration",
    "keywords": "Class HashingObfuscationConfiguration The hashing obfuscation configuration. This configurations is preconfigured to use the HashingObfuscationEngine and provides logic to automatically generate a salt which resets daily. Inheritance Object ObfuscationConfiguration HashingObfuscationConfiguration Inherited Members ObfuscationConfiguration.DefaultUriFilters ObfuscationConfiguration.DefaultContentTypeFilters ObfuscationConfiguration.DefaultContentDispositionFilters ObfuscationConfiguration.DefaultHeaderFilters ObfuscationConfiguration.ObfuscationEngine ObfuscationConfiguration.ObfuscationMembers ObfuscationConfiguration.ObfuscationSerializerSettings ObfuscationConfiguration.ContentDispositionFilters ObfuscationConfiguration.ContentTypeFilters ObfuscationConfiguration.HeaderFilters ObfuscationConfiguration.UriFilters Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class HashingObfuscationConfiguration : ObfuscationConfiguration Constructors HashingObfuscationConfiguration(IEnumerable<BaseFilter>, Boolean, ObfuscationMember[]) Initializes a new instance of the HashingObfuscationConfiguration class. Declaration public HashingObfuscationConfiguration(IEnumerable<BaseFilter> filters = null, bool addOdataType = true, ObfuscationMember[] members = null) Parameters Type Name Description IEnumerable < BaseFilter > filters The filters. Boolean addOdataType If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property. ObfuscationMember [] members The predefined set of obfuscation members. When specified the obfuscation serializer will cache the members and check the cache for the ObfuscationTag . HashingObfuscationConfiguration(IEnumerable<HeaderFilter>, IEnumerable<ContentDispositionFilter>, IEnumerable<ContentTypeFilter>, Boolean, ObfuscationMember[]) Initializes a new instance of the HashingObfuscationConfiguration class. Declaration public HashingObfuscationConfiguration(IEnumerable<HeaderFilter> headerFilters, IEnumerable<ContentDispositionFilter> contentDispositionFilters, IEnumerable<ContentTypeFilter> contentTypeFilters, bool addOdataType = true, ObfuscationMember[] members = null) Parameters Type Name Description IEnumerable < HeaderFilter > headerFilters The header filters. IEnumerable < ContentDispositionFilter > contentDispositionFilters The content disposition filters. IEnumerable < ContentTypeFilter > contentTypeFilters The content type filters. Boolean addOdataType If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property. ObfuscationMember [] members The predefined set of obfuscation members. When specified the obfuscation serializer will cache the members and check the cache for the ObfuscationTag . Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) HttpObfuscationHelpers.LogHeaderText(ObfuscationConfiguration, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) HttpObfuscationHelpers.LogHeaderText(ObfuscationConfiguration, String, IEnumerable<String>) See Also ObfuscationConfiguration"
  },
  "client/index.html": {
    "href": "client/index.html",
    "title": "Graph Communications SDK",
    "keywords": "Graph Communications SDK This SDK is the core component of Communications SDK. This contains all the standard features and functionality available in the Graph Stateful SDK. Authentication Provider All calls made and received by the SDK must be authenticated by the bot developers. The SDK requires the developers to implement the IRequestAuthenticationProvider interface and specify it when building the ICommunicationsClient . There are two parts to the interface. AuthenticateOutboundRequestAsync : This method should add the Authorization header to the outbound HTTP requests from the SDK. AuthenticateOutboundRequestAsync : This method should validate the Authorization header for incoming HTTP requests from Graph, extract the Tenant ID from that header and provide it to the SDK. Examples of the Authentication Provider can be found in samples . Notification Handling The Graph Platform sends out notifications via HTTP that need to be handled by the Bot Developers. The Platform sends out notifications on the notification url, and the bot developers should listen to HTTP messages on that url. Once the HTTP message has been received by the developer, they need to forward the message to ICommunicationsClient using the ProcessNotificationAsync method. The SDK processes the notification, calls the IRequestAuthenticationProvider and raises any corresponding events asynchronously. The SDK then returns a HttpResponseMessage that needs to be sent out as a response to the Graph Platform. Note Developers using ASP.NET Core should convert the HttpRequest object into HttpRequestMessage before passing it to the SDK. Also, they need to convert the resulting HttpResponseMessage into HttpResponse . Select a class on the left to dive into the reference docs Accompanying Information Accessing the Microsoft Teams Service through a Microsoft API Cloud Video Interop (CVI) partners and contact centers may integrate with Microsoft Teams to aid their solution. Contact centers may route calls to Microsoft Teams but may not build a separate or independent communications related solution while using Microsoft Teams as a base for the solution."
  },
  "index.html": {
    "href": "index.html",
    "title": "Graph Communications Calling SDK",
    "keywords": "Graph Communications Calling SDK Introduction The Graph Communications Calling SDK simplifies the creation of calling and meetings bots that use the Cloud Communications APIs . The SDK provides the functionality to manage states of resources in memory and simplify tasks like call setup and media session establishment. It provides interfaces for bot's service-to-service interactions with calls and meetings, including an optional Media Extension SDK that enables a bot developer to host media on their machines and gain access to low level Audio/Video sockets and media streams. SDK The Graph Communications Calling SDK is built on top of the Microsoft Graph API and distributed as NuGet packages. The Core Concepts article is designed to better explain all the constructs used by the SDKs. To dive right in and deploy a Calling Bot refer to the documentation in each sample for further instructions. The SDK is divided into multiple nuget packages each described as below. Microsoft.Graph.Communications.Common ( nuget ): This is the nuget containing all the utilities used throughout the Stateful SDK. It contains telemetry, http, obfuscation support along with helper methods. Microsoft.Graph.Communications.Core ( nuget ): This library contains the serialization and notification for the communications APIs. Microsoft.Graph.Communications.Client ( nuget ): This is the base client for the Stateful SDK. This implements all the common SDK features used within different verticals like calling, etc. Microsoft.Graph.Communications.Calls ( nuget ): This is the SDK that implements calling APIs. This supports making, receiving, and joining calls with Microsoft Teams users, and creating voice and video enabled bots. Microsoft.Graph.Communications.Calls.Media ( nuget ): This library allows developers to use the Microsoft.Graph.Communications.Calls SDK and gain direct access to the audio, video, screen sharing, and data streams. This is an optional library on top of Microsoft.Graph.Communications.Calls Microsoft.Skype.Bots.Media ( nuget ): The Real-Time Media Platform for Bots adds a new dimension to how bots can interact with users: by enabling real-time voice, video and screen sharing modalities. Concepts and Examples For more details on concepts used by the SDK and examples on joining calls and receiving calls please refer to the concepts and examples page. You can find samples using the following service: Stateful bot using Application Hosted Media on Azure Cloud Service Stateful bot using Application Hosted Media on Azure Service Fabric Stateful bot using Service Hosted Media running on Azure App Service . ICommunicationsClient and Extension Methods The Stateful SDK is exposed using a single class ICommunicationsClient . This class is defined in the Microsoft.Graph.Communications.Client nuget and has no dependency on the Microsoft.Graph.Communications.Calls calling vertical nuget package. The different verticals therefore make heavy usage of extension methods on ICommunicationsClient rather than standalone functions or properties. The intention here is to add new verticals into the ICommunicationsClient using the same pattern without the ICommunicationsClient itself taking a dependency on the new vertical's nuget, which provides greater decoupling between future verticals we will support. For a usage example please see the ICommunicationsClient.Calls() extension method. Accompanying Information Accessing the Microsoft Teams Service through a Microsoft API Cloud Video Interop (CVI) partners and contact centers may integrate with Microsoft Teams to aid their solution. Contact centers may route calls to Microsoft Teams but may not build a separate or independent communications related solution while using Microsoft Teams as a base for the solution."
  },
  "articles/Logging.html": {
    "href": "articles/Logging.html",
    "title": "Logging in SDK",
    "keywords": "Logging in SDK The Graph SDK uses a custom logger named IGraphLogger which allows custom subscribers for log events. These events can be observed and logged as required by the bot developers. You need to create an IObserver for log events (the LogEvent class). private class LogObserver : IObserver<LogEvent> { private readonly LogEventFormatter formatter = new LogEventFormatter(); /// <summary> /// Provides the observer with new data. /// </summary> /// <param name=\"logEvent\">The current notification information.</param> public void OnNext(LogEvent logEvent) { // Log event. // Event Severity: logEvent.Level // Http trace: logEvent.EventType == LogEventType.HttpTrace // Log trace: logEvent.EventType == LogEventType.Trace var logString = this.formatter.Format(logEvent); MyLogger.Log(logEvent.Level, logString) } /// <summary> /// Notifies the observer that the provider has experienced an error condition. /// </summary> /// <param name=\"error\">An object that provides additional information about the error.</param> public void OnError(Exception error) { // Error occurred with the logger, not with the SDK. } /// <summary> /// Notifies the observer that the provider has finished sending push-based notifications. /// </summary> public void OnCompleted() { // Graph Logger has completed logging (shutdown). } } After a class is ready, you need to subscribe to the log events. ICommunicationsClient client; // Substitute this with the instance of the SDK. var observer = new LogObserver(); var disposableSubsription = client.GraphLogger.Subscribe(observer); Note The disposableSubscription object should be persisted, otherwise logging will not work once it is garbage collected."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Graph Core and Communications SDK Concepts",
    "keywords": "Graph Core and Communications SDK Concepts The Graph signaling SDK is quite flexible and can run in multiple environments, and support both stateful and stateless architectures. It can run on Azure Cloud Service , Azure Service Fabric , and Azure App Service . Furthermore, because the SDK supports both .net framework 4.6.1+ and netstandard 2.0 it is cross platform . This article describes the key concepts in order to effectively utilize the Graph Core SDK and the Graph Communications SDK including the Calling SDK. Graph Communications Core SDK The GraphServiceClient object is the entry point to the Graph Core SDK. The majority of the Graph Core SDK is automatically generated by the Graph SDK generator using the OData resource model. It reflects the REST-ful wire protocol provided by the Graph Communications service. Graph Communications Stateful SDK and Client Builder The ICommunicationsClient object is the entry point to the Graph Communications SDK and the Calling SDK. This SDK is designed for stateful services and provides additional support on top of the Graph Core SDK for resource state management and media management. The ICommunicationsClientBuilder is the object used to construct a new ICommunicationsClient with the desired settings. Building media bots has additional considerations which are further outlined in the media section . Notification Dispatching Notifications for root collections, such as the ICallCollection generated by ICommunicationsClient.Calls() , are handled in a single queue. Any root resource, such as the ICall , that has been added to the root collection is given it's own queue. Any child resources, of the root resource, such as the ICallParticipant use the same queue as the root resource. Each queue will delivered event callbacks to the developer sequentially. The SDK will wait to deliver the next event callbacks until all the callbacks for the current event have been processed. This has been done as to help developers avoid concurrency issues and will in the future support resource versioning and jitter buffers. Important It is important for all event handlers to be non-blocking, and any long running operations need to be offloaded to another thread. Long running operations in any event will block further operations from being raised for the given resource. Example Outgoing Calls To illustrate functionality of the Graph Communications Calling SDK, the below examples demonstrate 2 common scenarios: how to make an outbound call to a Microsoft Teams user and how to join an existing Microsoft Teams meeting. Making an Outbound Call Assuming a bot has been properly registered and deployed, the ICommunicationsClient configured and built. The bot needs to create the Call object with the corresponding parameters and pass the object to the CallCollectionExtensions.AddAsync method as follows: Call callResource = new Call { Subject = \"**Subject**\", Targets = new List<InvitationParticipantInfo> { new InvitationParticipantInfo { Identity = new IdentitySet { User = new Identity { Id = \"**Target's AAD ObjectId GUID**\" }, }, } }, TenantId = \"**The id of the tenant that will host the meeting**\" }; IMediaSession mediaSession = this.Client.CreateMediaSession(**media session settings**); ICall call = await this.Client.Calls().AddAsync(callResource, mediaSession); SDK will store the state of the call in memory after calling AddAsync . The returned call object above contains the call Id set by the service. Making an Outbound Call to Join an Existing Microsoft Teams Meeting The above example shows how to create an outbound call to single or multiple participants and create a new conversation. If the bot needs to join an existing conversation, the SDK provides an overload of AddAsync that takes JoinMeetingParameters as input. The bot needs to create the JoinMeetingParameters object with the corresponding meeting parameters and pass the object to the CallCollectionExtensions.AddAsync method as follows: ChatInfo chatInfo = new ChatInfo { MessageId = \"**Message Id**\", ThreadId = \"**Thread Id**\", ReplyChainMessageId = \"**Reply Chain Message Id**\" }; OrganizerMeetingInfo meetingInfo = new OrganizerMeetingInfo { Organizer = new IdentitySet { User = new Identity { Id = \"**Meeting Organizer's AAD ObjectId GUID**\" }, } }; meetingInfo.Organizer.User.SetTenantId(\"**TenantId Guid**\"); IMediaSession mediaSession = this.Client.CreateMediaSession(**media session settings**); JoinMeetingParameters joinCallParameters = new JoinMeetingParameters( chatInfo, meetingInfo, mediaSession); ICall call = await this.Client.Calls().AddAsync(joinCallParameters); SDK will store the state of the call in memory after calling AddAsync . The returned call object above contains the callId set by the service. Example Incoming Calls Any time another user or bot places a call to your bot, you will receive a notification to the global application endpoint specified when registering your bot. Incoming call scenarios are supported with both Service Hosted Media and App Hosted Media configurations. Important For all incoming call scenarios, the initial incoming call notification will still be received using the BotBuilder protocol. The Graph SDK automatically returns 204 No Content to the initial notification to invoke the new Graph protocol. Answering incoming call with application hosted media First, subscribe to incoming calls. this.Client.Calls().OnIncoming += this.CallsOnIncoming; When incoming call comes, the bot needs to answer with an IMediaSession . This can be a media session created using the ICommunicationsClient.CreateMediaSession() extension or a custom IMediaSession . private void CallsOnIncoming(ICallCollection sender, CollectionEventArgs<ICall> collectionEventArgs) { IMediaSession mediaSession = this.Client.CreateMediaSession( new AudioSocketSettings { StreamDirections = StreamDirection.Recvonly, SupportedAudioFormat = AudioFormat.Pcm16K }, new VideoSocketSettings { StreamDirections = StreamDirection.Sendrecv, ReceiveColorFormat = VideoColorFormat.NV12, SupportedSendVideoFormats = new List<VideoFormat> { VideoFormat.NV12_720x1280_30Fps, VideoFormat.NV12_1280x720_30Fps } } ); // Run async as not to block subsequent notifications. Task.Run(async () => { await collectionEventArgs .AddedResources .FirstOrDefault() .AnswerAsync(mediaSession) .ConfigureAwait(false); }); } Answer incoming call with service hosted media First subscribe to incoming calls. this.Client.Calls().OnIncoming += this.CallsOnIncoming; When incoming call comes, the bot will answer with a ServiceHostedMediaConfig . private void CallsOnIncoming(ICallCollection sender, CollectionEventArgs<ICall> collectionEventArgs) { // Run async as not to block subsequent notifications. Task.Run(async () => { await collectionEventArgs .AddedResources .FirstOrDefault() .AnswerAsync(new Modality[] { Modality.Audio }) .ConfigureAwait(false); }); } State Management Graph Communications SDK can be used to store state of all resources in memory. This has 2 implications: The instance hosting the call needs to be up throughout the lifetime of a call. Any subsequent asynchronous notifications delivered by the service need to be redirected to the instance hosting the call. Any bot that hosts its own media stack should to be built using the Graph Communications SDK given that the media stream has a requirement that it needs to persist in memory throughout the lifetime of the call. More details can be found in the State Management article."
  },
  "articles/calls/appHostedMediaCalls.html": {
    "href": "articles/calls/appHostedMediaCalls.html",
    "title": "Application Hosted Media Calls",
    "keywords": "Application Hosted Media Calls Application Hosted Media calls are those calls in which the bot manages the call's video and audio sockets. The bots send and receive raw audio and video data over the network. Building a CommunicationsClient with Media Platform Settings Create the an instance of the ICommunicationsClientBuilder . Create an instance of MediaPlatformSettings and use MediaCommunicationsClientBuilderExtensions.SetMediaPlatformSettings method to pass the MediaPlatformSettings to build the ICommunicationsClient Once the builder builds the ICommunicationsClient , a media session can be created using either MediaCommunicationsClientExtension.CreateMediaSession or MediaCommunicationsClientExtension.CreateMediaSession depending on how many video sockets are required. When creating an object of the Call resource, MediaConfig needs to be set to AppHostedMediaConfig . Important When creating a new call that uses application hosted media, an instance of IMediaSession needs to be passed into CallCollectionExtensions.AddAsync"
  },
  "common/Microsoft.Graph.Communications.Common.Exceptions.InvalidStateTransitionException.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Exceptions.InvalidStateTransitionException.html",
    "title": "Class InvalidStateTransitionException",
    "keywords": "Class InvalidStateTransitionException Exception to throw when a invalid transition is requested Inheritance Object Exception InvalidStateTransitionException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Exceptions Assembly : Microsoft.Graph.Communications.Common.dll Syntax public sealed class InvalidStateTransitionException : Exception, ISerializable, _Exception Constructors InvalidStateTransitionException(String) Initializes a new instance of the InvalidStateTransitionException class. Declaration public InvalidStateTransitionException(string message) Parameters Type Name Description String message the exception message Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ExceptionUtils.FindInnerException(Exception) ExceptionUtils.FormatException(Exception, Int32) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscatedValueProvider.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscatedValueProvider.html",
    "title": "Class ObfuscatedValueProvider",
    "keywords": "Class ObfuscatedValueProvider Newtonsoft JSONs value provider for obfuscated data. Inheritance Object ObfuscatedValueProvider Implements Newtonsoft.Json.Serialization.IValueProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ObfuscatedValueProvider : IValueProvider Constructors ObfuscatedValueProvider(MemberInfo, IObfuscationEngine, ObfuscationTag) Initializes a new instance of the ObfuscatedValueProvider class. Declaration public ObfuscatedValueProvider(MemberInfo memberInfo, IObfuscationEngine obfuscationEngine, ObfuscationTag obfuscationTag) Parameters Type Name Description MemberInfo memberInfo The member information. IObfuscationEngine obfuscationEngine The obfuscation engine. ObfuscationTag obfuscationTag The obfuscation tag. Methods GetValue(Object) Declaration public object GetValue(object target) Parameters Type Name Description Object target Returns Type Description Object SetValue(Object, Object) Sets the value. Declaration public void SetValue(object target, object value) Parameters Type Name Description Object target The target to set the value on. Object value The value to set on the target. Implements Newtonsoft.Json.Serialization.IValueProvider Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter.html",
    "title": "Class ContentTypeFilter",
    "keywords": "Class ContentTypeFilter Does match of content-type header. If content-type matches filter then whole body is removed. Inheritance Object BaseFilter BaseFilter < String , String > ContentTypeFilter Inherited Members BaseFilter<String, String>.MatchableString BaseFilter<String, String>.MatchEvaluator Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ContentTypeFilter : BaseFilter<string, string> Constructors ContentTypeFilter(String, Func<String, String>) Initializes a new instance of the ContentTypeFilter class. Declaration public ContentTypeFilter(string matchableContentTypeMediaType, Func<string, string> matchEvaluator = null) Parameters Type Name Description String matchableContentTypeMediaType Type of the matchable content type media. Func < String , String > matchEvaluator The match evaluator. Methods IsContentTypeMatch(IEnumerable<ContentTypeFilter>, HttpContent, out String) Determines whether [is content type match] [the specified filters]. Declaration public static bool IsContentTypeMatch(IEnumerable<ContentTypeFilter> filters, HttpContent content, out string outputMessage) Parameters Type Name Description IEnumerable < ContentTypeFilter > filters The filters. HttpContent content The content. String outputMessage The output message. Returns Type Description Boolean true if [is content type match] [the specified filters]; otherwise, false . Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter.html",
    "title": "Class LogEventFormatter",
    "keywords": "Class LogEventFormatter The log event formatter Inheritance Object LogEventFormatter Implements ILogEventFormatter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class LogEventFormatter : ILogEventFormatter Constructors LogEventFormatter(LogEventFormatterFlags, String, String) Initializes a new instance of the LogEventFormatter class. Declaration public LogEventFormatter(LogEventFormatterFlags flags = LogEventFormatterFlags.ForDefault, string inlineSeparator = \" \", string timestampFormat = \"yyyy-MM-ddTHH:mm:ss.ffffZ\") Parameters Type Name Description LogEventFormatterFlags flags The formatter flags to control which will be shown in output message. String inlineSeparator The inline separator for logging fields String timestampFormat The default timestamp format Fields DefaultTimestampFormat The default timestamp format. Declaration public const string DefaultTimestampFormat = \"yyyy-MM-ddTHH:mm:ss.ffffZ\" Field Value Type Description String Methods Format(LogEvent) Format the log event. Declaration public string Format(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The log event Returns Type Description String The formatted text. Implements ILogEventFormatter Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.html",
    "title": "Class GraphObfuscationContractResolver",
    "keywords": "Class GraphObfuscationContractResolver Newtonsoft JSON resolver that uses Graph Obfuscation attribute to serialize data for logging purposes. Inheritance Object ODataResolver GraphObfuscationContractResolver Inherited Members ODataResolver.ResolveContractConverter(Type) ODataResolver.CreateProperties(Type, MemberSerialization) Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphObfuscationContractResolver : ODataResolver Constructors GraphObfuscationContractResolver(IObfuscationEngine, Boolean, ObfuscationMember[]) Initializes a new instance of the GraphObfuscationContractResolver class. Declaration public GraphObfuscationContractResolver(IObfuscationEngine engine, bool addOdataType = true, ObfuscationMember[] members = null) Parameters Type Name Description IObfuscationEngine engine The obfuscation engine. Boolean addOdataType If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property. ObfuscationMember [] members The predefined set of obfuscation members. When specified this GraphObfuscationContractResolver will cache the members and check the cache for the ObfuscationTag . Methods CreateMemberValueProvider(MemberInfo) Declaration protected override IValueProvider CreateMemberValueProvider(MemberInfo member) Parameters Type Name Description MemberInfo member Returns Type Description Newtonsoft.Json.Serialization.IValueProvider ResolveContract(Type) Declaration public override JsonContract ResolveContract(Type type) Parameters Type Name Description Type type Returns Type Description Newtonsoft.Json.Serialization.JsonContract Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.html",
    "title": "Class ODataJsonConverter",
    "keywords": "Class ODataJsonConverter Handles resolving interfaces to the correct derived class during serialization/deserialization. Inheritance Object ODataJsonConverter Namespace : Microsoft.Graph.Communications.Common.OData Assembly : Microsoft.Graph.Communications.Common.dll Syntax public sealed class ODataJsonConverter : JsonConverter Constructors ODataJsonConverter(Assembly[]) Initializes a new instance of the ODataJsonConverter class. Declaration public ODataJsonConverter(params Assembly[] typeAssemblies) Parameters Type Name Description Assembly [] typeAssemblies The type assemblies. Properties CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Deserializes the object to the correct type. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader The Newtonsoft.Json.JsonReader to read from. Type objectType The interface type. Object existingValue The existing value of the object being read. Newtonsoft.Json.JsonSerializer serializer The Newtonsoft.Json.JsonSerializer for deserialization. Returns Type Description Object The deserialized object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.WeakKey-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.WeakKey-1.html",
    "title": "Class WeakKey<T>",
    "keywords": "Class WeakKey<T> Wrapping a weak reference and recording hash code. Note: It is the responsibility of the client to clean up the collection entry in the finalizer of the object. Otherwise the key will not match for subsequent lookups. Inheritance Object WeakKey<T> Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class WeakKey<T> where T : class Type Parameters Name Description T Type of the key to be used in a lookup. Constructors WeakKey(T) Initializes a new instance of the WeakKey<T> class. Declaration public WeakKey(T t) Parameters Type Name Description T t Underlying object. WeakKey(WeakReference<T>) Initializes a new instance of the WeakKey<T> class. Declaration public WeakKey(WeakReference<T> weak) Parameters Type Name Description WeakReference <T> weak Underlying object wrapped in weak reference. Properties Unwrapped Gets the target. Declaration public T Unwrapped { get; } Property Value Type Description T Value Gets the weak reference to the underlying object. Declaration public WeakReference<T> Value { get; } Property Value Type Description WeakReference <T> Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object. Overrides Object.Equals(Object) GetHashCode() Overrides hash code to hand out the underlying object's hash code. Declaration public override int GetHashCode() Returns Type Description Int32 Hash code of underlying object. Overrides Object.GetHashCode() Operators Implicit(T to WeakKey<T>) Implicit cast operator to weak key. Declaration public static implicit operator WeakKey<T>(T t) Parameters Type Name Description T t Wrap with weak key. Returns Type Description WeakKey <T> Implicit(WeakKey<T> to T) Implicit type cast operator. Declaration public static implicit operator T(WeakKey<T> key) Parameters Type Name Description WeakKey <T> key Extract underlying object. Returns Type Description T Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationAttribute.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationAttribute.html",
    "title": "Class GraphObfuscationAttribute",
    "keywords": "Class GraphObfuscationAttribute Attribute used for decoration of data objects. This is used for obfuscation for logging. Inheritance Object Attribute GraphObfuscationAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)] public class GraphObfuscationAttribute : Attribute, _Attribute Constructors GraphObfuscationAttribute() Declaration public GraphObfuscationAttribute() Properties Tag Gets or sets the tag. Declaration public ObfuscationTag Tag { get; set; } Property Value Type Description ObfuscationTag Implements System.Runtime.InteropServices._Attribute Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) See Also Attribute"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphProperty-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphProperty-1.html",
    "title": "Interface IGraphProperty<T>",
    "keywords": "Interface IGraphProperty<T> Inherited Members IGraphProperty.Key IGraphProperty.Type IEquatable<IGraphProperty>.Equals(IGraphProperty) Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphProperty<T> : IGraphProperty, IEquatable<IGraphProperty> Type Parameters Name Description T The type of content contained in this property. Properties Value Gets the value. Declaration T Value { get; } Property Value Type Description T Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphProperty.ConvertProperty<T>(IGraphProperty)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphProperty.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphProperty.html",
    "title": "Interface IGraphProperty",
    "keywords": "Interface IGraphProperty The graph property containing request or response data. Inherited Members IEquatable<IGraphProperty>.Equals(IGraphProperty) Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphProperty : IEquatable<IGraphProperty> Properties Key Gets the key. Declaration string Key { get; } Property Value Type Description String Type Gets the type of the property. Declaration string Type { get; } Property Value Type Description String Value Gets the value. Declaration object Value { get; } Property Value Type Description Object Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphProperty.ConvertProperty<T>(IGraphProperty)"
  },
  "client/Microsoft.Graph.Communications.Client.StateManager-2.html": {
    "href": "client/Microsoft.Graph.Communications.Client.StateManager-2.html",
    "title": "Class StateManager<TResource, TEntity>",
    "keywords": "Class StateManager<TResource, TEntity> The state manager implementation. Inheritance Object StateManager<TResource, TEntity> Implements IStateManager <TResource> ICollection <TResource> IEnumerable <TResource> IEnumerable IDisposable Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class StateManager<TResource, TEntity> : Disposable, IStateManager<TResource>, ICollection<TResource>, IEnumerable<TResource>, IEnumerable, IDisposable where TResource : IResource<TResource, TEntity> where TEntity : Entity Type Parameters Name Description TResource The type of the resource. TEntity The type of the entity. Constructors StateManager(ISerializer, ICache) Initializes a new instance of the StateManager<TResource, TEntity> class. Declaration public StateManager(ISerializer serializer, ICache cache) Parameters Type Name Description ISerializer serializer The serializer. ICache cache The cache. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[String] Declaration public TResource this[string id] { get; } Parameters Type Name Description String id Property Value Type Description TResource Methods Add(TResource) Adds an item to the ICollection<T> . Declaration public void Add(TResource item) Parameters Type Name Description TResource item The object to add to the ICollection<T> . Exceptions Type Condition ServiceException If the resource already exists in the collection. Clear() Declaration public void Clear() Contains(TResource) Declaration public bool Contains(TResource item) Parameters Type Name Description TResource item Returns Type Description Boolean CopyContent() Declaration public ICollection<TResource> CopyContent() Returns Type Description ICollection <TResource> CopyTo(TResource[], Int32) Declaration public void CopyTo(TResource[] array, int arrayIndex) Parameters Type Name Description TResource[] array Int32 arrayIndex Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing GetEnumerator() Declaration public IEnumerator<TResource> GetEnumerator() Returns Type Description IEnumerator <TResource> GetOrAdd(String, Func<TResource>) Declaration public TResource GetOrAdd(string id, Func<TResource> resourceFactory) Parameters Type Name Description String id Func <TResource> resourceFactory Returns Type Description TResource GetOrAddAsync(String, Func<Task<TResource>>) Declaration public Task<TResource> GetOrAddAsync(string id, Func<Task<TResource>> resourceFactory) Parameters Type Name Description String id Func < Task <TResource>> resourceFactory Returns Type Description Task <TResource> Remove(TResource) Removes the occurrence of a specific object from the IStateManager<TResource> . Declaration public bool Remove(TResource item) Parameters Type Name Description TResource item The object to remove from the IStateManager<TResource> . Returns Type Description Boolean true if item was successfully removed from the IStateManager<TResource> . Exceptions Type Condition ServiceException If the resource does not exist in the collection. Remove(String) Removes the occurrence of a specific object from the IStateManager<TResource> . Declaration public TResource Remove(string id) Parameters Type Name Description String id The identifier of the object to remove from the IStateManager<TResource> . Returns Type Description TResource The IResource that was removed. Exceptions Type Condition ServiceException If the resource does not exist in the collection. TryRemove(String, out TResource) Declaration public bool TryRemove(string id, out TResource resource) Parameters Type Name Description String id TResource resource Returns Type Description Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IStateManager<TResource> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable See Also IStateManager <TResource>"
  },
  "client/Microsoft.Graph.Communications.Common.Telemetry.CommsLogEventFormatter.html": {
    "href": "client/Microsoft.Graph.Communications.Common.Telemetry.CommsLogEventFormatter.html",
    "title": "Class CommsLogEventFormatter",
    "keywords": "Class CommsLogEventFormatter Test log formatter. Inheritance Object CommsLogEventFormatter Implements ILogEventFormatter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class CommsLogEventFormatter : ILogEventFormatter Constructors CommsLogEventFormatter() Declaration public CommsLogEventFormatter() Methods Format(LogEvent) Declaration public string Format(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent Returns Type Description String Implements ILogEventFormatter"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.html",
    "title": "Class HashingObfuscationEngine",
    "keywords": "Class HashingObfuscationEngine Obfuscation engine that hashes PII using salt. Inheritance Object HashingObfuscationEngine Implements IObfuscationEngine Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class HashingObfuscationEngine : IObfuscationEngine Constructors HashingObfuscationEngine(Func<Byte[]>) Initializes a new instance of the HashingObfuscationEngine class. Declaration public HashingObfuscationEngine(Func<byte[]> saltProvider) Parameters Type Name Description Func < Byte []> saltProvider The salt provider. Properties Enabled Gets a value indicating whether obfuscation is enabled. Declaration public bool Enabled { get; } Property Value Type Description Boolean HashAlgorithm Gets or sets the hash algorithm. Declaration public HashAlgorithm HashAlgorithm { get; set; } Property Value Type Description HashAlgorithm HashLength Gets or sets the length of the hashed payload. Set this to -1 for full salt. Declaration public int HashLength { get; set; } Property Value Type Description Int32 ObfuscationConfiguration Gets or sets the obfuscation configuration. This is also set when configuration is linked to an obfuscation engine. Declaration public ObfuscationConfiguration ObfuscationConfiguration { get; set; } Property Value Type Description ObfuscationConfiguration SaltProvider Gets or sets the salt provider. Declaration protected Func<byte[]> SaltProvider { get; set; } Property Value Type Description Func < Byte []> Methods Obfuscate(Object, ObfuscationTag) Obfuscates the specified payload. Declaration public string Obfuscate(object payload, ObfuscationTag obfuscationTag) Parameters Type Name Description Object payload The payload. ObfuscationTag obfuscationTag The obfuscation tag. Returns Type Description String Obfuscated data. Implements IObfuscationEngine Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "client/Microsoft.Graph.Communications.Client.Cache.CacheContext-1.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Cache.CacheContext-1.html",
    "title": "Struct CacheContext<TEntity>",
    "keywords": "Struct CacheContext<TEntity> The stored cache context Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.Graph.Communications.Client.Cache Assembly : Microsoft.Graph.Communications.Client.dll Syntax public struct CacheContext<TEntity> where TEntity : Entity Type Parameters Name Description TEntity The type of the entity. Properties Id Gets or sets the context identifier. Declaration public string Id { get; set; } Property Value Type Description String Resource Gets or sets the resource. Declaration public TEntity Resource { get; set; } Property Value Type Description TEntity ScenarioId Gets or sets the scenario identifier associated with this resource. Declaration public Guid ScenarioId { get; set; } Property Value Type Description Guid TenantId Gets or sets the tenant identifier associated with this resource. Declaration public string TenantId { get; set; } Property Value Type Description String"
  },
  "client/Microsoft.Graph.Communications.Client.Notifications.FixedSizeQueue-1.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Notifications.FixedSizeQueue-1.html",
    "title": "Class FixedSizeQueue<T>",
    "keywords": "Class FixedSizeQueue<T> A class that implements a fixed size list. Inheritance Object FixedSizeQueue<T> Implements IReadOnlyCollection <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Client.Notifications Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class FixedSizeQueue<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The generic type Constructors FixedSizeQueue(Int32) Initializes a new instance of the FixedSizeQueue<T> class. Declaration public FixedSizeQueue(int maxSize) Parameters Type Name Description Int32 maxSize The maximum size. Properties Count Gets the number of elements in the collection. Declaration public int Count { get; } Property Value Type Description Int32 Methods Enqueue(T) Enqueues the item. Declaration public void Enqueue(T item) Parameters Type Name Description T item The object. GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Remove(T) Removes the specified item. Declaration public void Remove(T item) Parameters Type Name Description T item The item. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable See Also ICollection <T>"
  },
  "core/Microsoft.Graph.Communications.Core.Notifications.NotificationProcessorExtensions.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Notifications.NotificationProcessorExtensions.html",
    "title": "Class NotificationProcessorExtensions",
    "keywords": "Class NotificationProcessorExtensions Extensions for container client. Inheritance Object NotificationProcessorExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core.Notifications Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class NotificationProcessorExtensions Methods ExtractResouceData(CommsNotification) Extracts the resource data from the specified notification. Declaration public static object ExtractResouceData(this CommsNotification notification) Parameters Type Name Description CommsNotification notification The notification. Returns Type Description Object The resource data notification content. Exceptions Type Condition ServiceException If the specified notification is invalid. ProcessNotificationAsync(INotificationProcessor, HttpRequestMessage) Processes the notification sent from the server to the client. This overload accepts the type of HttpRequest. Declaration public static Task<HttpResponseMessage> ProcessNotificationAsync(this INotificationProcessor processor, HttpRequestMessage request) Parameters Type Name Description INotificationProcessor processor The processor. HttpRequestMessage request The request. Returns Type Description Task < HttpResponseMessage > Response to be sent back. SanitizeResource(String, String) Gets the model URI. Declaration public static string SanitizeResource(this string resource, string baseUrl = null) Parameters Type Name Description String resource The resource. String baseUrl The base URL. Returns Type Description String The model uri string. Exceptions Type Condition ArgumentNullException If the resource string is null or whitespace. TryGetGuid(HttpHeaders, String, out Guid) Tries to get the GUID value for the specifed header. Declaration public static bool TryGetGuid(this HttpHeaders headers, string header, out Guid guid) Parameters Type Name Description HttpHeaders headers The headers collection. String header The header to look at. Guid guid The found guid Returns Type Description Boolean True if the specified header is a valid guid, false otherwise."
  },
  "core/Microsoft.Graph.Communications.Core.Notifications.NotificationEventArgs.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Notifications.NotificationEventArgs.html",
    "title": "Class NotificationEventArgs",
    "keywords": "Class NotificationEventArgs Notification event arguments class. Inheritance Object NotificationEventArgs CollectionNotificationEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core.Notifications Assembly : Microsoft.Graph.Communications.Core.dll Syntax public class NotificationEventArgs Constructors NotificationEventArgs(Uri, CommsNotification, ChangeType, Object) Initializes a new instance of the NotificationEventArgs class. Declaration public NotificationEventArgs(Uri callbackUri, CommsNotification notification, ChangeType changeType, object resourceData) Parameters Type Name Description Uri callbackUri The callback URI. CommsNotification notification The notification. ChangeType changeType Type of the change. Object resourceData The resource data. Properties AdditionalData Gets or sets the additional data. Declaration public IDictionary<string, object> AdditionalData { get; set; } Property Value Type Description IDictionary < String , Object > CallbackUri Gets the callback URI. Declaration public Uri CallbackUri { get; } Property Value Type Description Uri ChangeType Gets the type of the change. Declaration public ChangeType ChangeType { get; } Property Value Type Description ChangeType Notification Gets the notification. Declaration public CommsNotification Notification { get; } Property Value Type Description CommsNotification NotificationId Gets the notification identifier. Declaration public Guid NotificationId { get; } Property Value Type Description Guid RequestId Gets or sets the request identifier. Declaration public Guid RequestId { get; set; } Property Value Type Description Guid ResourceData Gets the resource data. Declaration public object ResourceData { get; } Property Value Type Description Object ScenarioId Gets or sets the scenario identifier. Declaration public Guid ScenarioId { get; set; } Property Value Type Description Guid TenantId Gets or sets the tenant. Declaration public string TenantId { get; set; } Property Value Type Description String"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.Transport",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.Transport Classes GraphHttpClient Graph client that handles transport over http. GraphHttpClientContainer This class is used to handle multiple http clients within one service. This class extends the concurrent dictionary and contains a mapping from a key for the client to the http client itself. GraphHttpClientFactory The HTTP graph client factory. GraphProperty The IGraphProperty helpers and extensions. GraphRequest GraphRequest<T> The base of the exchange of a IGraphRequest<T> or IGraphResponse<T> . GraphRequestExtensions Extensions for IGraphRequest<T> class. GraphResponse GraphResponse<T> The base of the exchange of a IGraphRequest<T> or IGraphResponse<T> . GraphResponseException Class representing GraphResponseException GraphResponseExtensions Extensions for IGraphResponse<T> class. HttpRequestMessageExtensions Extensions for HttpRequestMessage . HttpResponseMessageExtensions Extensions for HttpResponseMessage class. NoContentMessage IGraphClient requires type parameters for functionality. This is a marked Type/class to make function calls to IGraphClient indicating we have request/response with no body. The sole purpose of this class's existence is to reduce code duplicacy. Structs GraphProperty<T> Interfaces IGraphClient This class abstracts any communication with different services. This client acts at an object level rather than wire level and thus providing richer experience when working with complex objects. IGraphClientFactory Interface for factory of IGraphClient . IGraphExchange The base of the exchange of a IGraphRequest<T> or IGraphResponse<T> . IGraphExchange<T> The base of the exchange of a IGraphRequest<T> or IGraphResponse<T> . IGraphHttpClient Interface for Http transport client. Gives us a way to work with different instances of GraphClient through Dependency Injection. IGraphProperty The graph property containing request or response data. IGraphProperty<T> IGraphRequest The request object used by the graph sdk. IGraphRequest<T> The request object with content. IGraphResponse The response got in exchange of a IGraphRequest . IGraphResponse<T> The response got in exchange of a IGraphRequest<T> . Enums RequestType Type of request that we want to issue on the transport ResponseStatus Different status of IGraphResponse<T> ."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.ResponseStatus.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.ResponseStatus.html",
    "title": "Enum ResponseStatus",
    "keywords": "Enum ResponseStatus Different status of IGraphResponse<T> . Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public enum ResponseStatus Fields Name Description Accepted The request was successfully accepted. BadRequest The request was semantically/syntactically invalid. Conflict There was a conflict in processing the request. Created The request resource was successfully created. Forbidden The request was forbidden. InternalServerError The request resulted in an internal server error. MultiStatus The multi status response. NoContent There was no content in the response. NotFound The requested resource was not found. NotImplemented The not implemented Ok The request was successfully processed. RequestTimeout Client did not send a request within the time the server was expecting the request. ServiceUnavailable The server is temporarily unavailable. TooManyRequests Too many requests were tried. Unauthorized The request was not authorized by the callee. Extension Methods AdditionalDataExtensions.SetInAdditionalData(String, Object) Extensions.Pin() Extensions.ChangeType(Type) Extensions.ChangeType<T>() Extensions.TryDispose(IGraphLogger) EnumUtils.GetDescription() ReflectionUtils.GetPropertyUsingReflection(String) ReflectionUtils.SetPropertyUsingReflection(String, Object) Validator.IsNull(String, String) Validator.NotNull<ResponseStatus>(String, String) Validator.Equals<ResponseStatus>(ResponseStatus, String, String) Validator.Equals<ResponseStatus, TE>(ResponseStatus, String) Validator.NotEquals<ResponseStatus>(ResponseStatus, String, String) GraphResponseExtensions.ToHttpStatus()"
  },
  "common/Microsoft.Graph.Communications.Common.ObjectRoot.html": {
    "href": "common/Microsoft.Graph.Communications.Common.ObjectRoot.html",
    "title": "Class ObjectRoot",
    "keywords": "Class ObjectRoot Base object. Inheritance Object ObjectRoot Observable<T> GraphLoggerShim GraphHttpClient GraphHttpClientFactory Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public abstract class ObjectRoot Constructors ObjectRoot(IGraphLogger) Initializes a new instance of the ObjectRoot class. Declaration protected ObjectRoot(IGraphLogger logger) Parameters Type Name Description IGraphLogger logger Logger instance. Properties GraphLogger Gets the logger. Declaration protected IGraphLogger GraphLogger { get; } Property Value Type Description IGraphLogger Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.CertUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.CertUtils.html",
    "title": "Class CertUtils",
    "keywords": "Class CertUtils Certificates utilities Inheritance Object CertUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class CertUtils Methods GetCertificate(String, StoreLocation) Get certificate from the certificate store, throw exception if not found. Declaration public static X509Certificate2 GetCertificate(string thumbprint, StoreLocation location) Parameters Type Name Description String thumbprint The thumbprint. StoreLocation location The certificate store location. Returns Type Description X509Certificate2 True if the certificate is found. HasPrivateKeyAccess(X509Certificate2, IGraphLogger) Verifies the private key access on a given certificate. If a logger is provided, the cert Common name and any errors are printed out. Declaration public static bool HasPrivateKeyAccess(this X509Certificate2 certificate, IGraphLogger logger = null) Parameters Type Name Description X509Certificate2 certificate The certificate. IGraphLogger logger The logger. Returns Type Description Boolean True if private key can be accessed, false otherwise. TryGetCertificate(String, StoreLocation) Tries to the get certificate from the certificate store. Declaration public static X509Certificate2 TryGetCertificate(string thumbprint, StoreLocation location) Parameters Type Name Description String thumbprint The thumbprint. StoreLocation location The certificate store location. Returns Type Description X509Certificate2 True if the certificate is found. TryGetCertificate(String, String, StoreLocation) Tries to the get certificate from the certificate store. Declaration public static X509Certificate2 TryGetCertificate(string issuer, string enhancedKeyUsage, StoreLocation location) Parameters Type Name Description String issuer The issuer. String enhancedKeyUsage Enhanced key usage. StoreLocation location The certificate store location. Returns Type Description X509Certificate2 True if the certificate is found. TryGetCertificateWithCommonName(String, StoreLocation) Tries to get certificate with common name from the certificate store. Declaration public static X509Certificate2 TryGetCertificateWithCommonName(string commonName, StoreLocation location) Parameters Type Name Description String commonName Name of the common. StoreLocation location The location. Returns Type Description X509Certificate2 The certificate. null if not found."
  },
  "client/Microsoft.Graph.Communications.Client.html": {
    "href": "client/Microsoft.Graph.Communications.Client.html",
    "title": "Namespace Microsoft.Graph.Communications.Client",
    "keywords": "Namespace Microsoft.Graph.Communications.Client Classes CommunicationsClientBuilder The class the provides the builder for stateful client. CommunicationsClientExtensions Extensions for Stateful Client. GraphLoggerExtensions The graph logger extensions for the communications client. PagedList<T> An object that contains paginated list of the generic type T. StateManager<TResource, TEntity> The state manager implementation. Interfaces ICommunicationsClient The CommunicationsClient interface. This is the entry point of the SDK and a reference to this instance must be held for the duration of the session. ICommunicationsClientBuilder The builder object that builds the ICommunicationsClient . Use this class to setup the SDK's configuration. IPagedList<T> The paged list interface. IStateManager<TResource> The state manager interface. This object is responsible for storing the resources in memory."
  },
  "client/Microsoft.Graph.Communications.Client.Transport.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Transport.html",
    "title": "Namespace Microsoft.Graph.Communications.Client.Transport",
    "keywords": "Namespace Microsoft.Graph.Communications.Client.Transport Classes GraphAuthClient The graph auth client. GraphAuthClientFactory The HTTP graph client factory. GraphClientContext The context for the graph client wrapper. GraphClientWrapper The graph client wrapper."
  },
  "client/Microsoft.Graph.Communications.Client.ICommunicationsClientBuilder.html": {
    "href": "client/Microsoft.Graph.Communications.Client.ICommunicationsClientBuilder.html",
    "title": "Interface ICommunicationsClientBuilder",
    "keywords": "Interface ICommunicationsClientBuilder The builder object that builds the ICommunicationsClient . Use this class to setup the SDK's configuration. Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface ICommunicationsClientBuilder Properties Id Gets the client id. Declaration Guid Id { get; } Property Value Type Description Guid Methods Build() Build and return the stateful client object. Declaration ICommunicationsClient Build() Returns Type Description ICommunicationsClient The ICommunicationsClient . Exceptions Type Condition ArgumentException Cannot build the client without setting the required parameters. SetAuthenticationProvider(IRequestAuthenticationProvider) Sets the custom authentication provider. The authentication provider would add authentication to outbound requests and validates any inbound requests. See IRequestAuthenticationProvider Declaration ICommunicationsClientBuilder SetAuthenticationProvider(IRequestAuthenticationProvider provider) Parameters Type Name Description IRequestAuthenticationProvider provider The authentication provider. Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ArgumentNullException If the provider is null . SetCacheStrategy(ICache) Sets the cache strategy. Declaration ICommunicationsClientBuilder SetCacheStrategy(ICache cacheStrategy) Parameters Type Name Description ICache cacheStrategy The cache strategy. Returns Type Description ICommunicationsClientBuilder This ICommunicationsClientBuilder object. Exceptions Type Condition ArgumentNullException If the cacheStrategy strategy is null . SetHttpClient(HttpClient, IEnumerable<KeyValuePair<String, String>>) Sets the http client. Use a custom HTTP Client instead of the one generated by the SDK. Declaration ICommunicationsClientBuilder SetHttpClient(HttpClient httpClient, IEnumerable<KeyValuePair<string, string>> defaultHeaders = null) Parameters Type Name Description HttpClient httpClient The place call endpoint URL. IEnumerable < KeyValuePair < String , String >> defaultHeaders The default headers. Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ArgumentNullException If the httpClient is null . SetNotificationUrl(Uri) Set the notification uri for your bot. This is the default notification url for the bot. This can be overriden on a per-resource basis depending on the API support. Declaration ICommunicationsClientBuilder SetNotificationUrl(Uri notificationUrl) Parameters Type Name Description Uri notificationUrl The callback Url. Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ArgumentNullException If the notificationUrl is null . ArgumentException URI must be https. SetServiceBaseUrl(Uri) Sets the service base URL. This set's the Endpoint URL for the service. Declaration ICommunicationsClientBuilder SetServiceBaseUrl(Uri serviceBaseUrl) Parameters Type Name Description Uri serviceBaseUrl The place call endpoint URL. Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ArgumentNullException If the serviceBaseUrl is null . ArgumentException URI must be https."
  },
  "calls/Microsoft.Graph.Communications.Calls.IParticipant.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.IParticipant.html",
    "title": "Interface IParticipant",
    "keywords": "Interface IParticipant The stateful participant interface. This represents a single participant in a call. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public interface IParticipant : IResource<IParticipant, Participant>, IResource, IResourceBase, IDisposable Properties Resource Gets the stateful participant resource. Declaration Participant Resource { get; } Property Value Type Description Participant Methods DeleteAsync(Boolean, CancellationToken) Deletes this participant asynchronously. Declaration Task DeleteAsync(bool handleHttpNotFoundInternally = false, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Boolean handleHttpNotFoundInternally If the IParticipant is already gone, whether to handle the exception gracefully or not. CancellationToken cancellationToken The CancellationToken for the request. Returns Type Description Task The Task that completes after the request has been sent. The completion of this task does not guarantee deletion. Confirmation of deletion comes as a notification and can be subscribed by IParticipant.OnUpdated and IParticipantCollection.OnUpdated MuteAsync(CancellationToken) Performs the mute operation asynchronously. Declaration Task MuteAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. The mute notification will come in on IParticipant.OnUpdated See Also IResource<TSelf, TEntity>"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphClientFactory.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphClientFactory.html",
    "title": "Interface IGraphClientFactory",
    "keywords": "Interface IGraphClientFactory Interface for factory of IGraphClient . Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphClientFactory Methods Create(IGraphLogger) Creates a new IGraphClient . Declaration IGraphClient Create(IGraphLogger logger = null) Parameters Type Name Description IGraphLogger logger An optional IGraphLogger logger to be used in the new IGraphClient . Returns Type Description IGraphClient The IGraphClient . Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper.html",
    "title": "Class GraphLoggerWrapper",
    "keywords": "Class GraphLoggerWrapper The ILogger wrapper for IGraphLogger. Inheritance Object GraphLoggerWrapper Implements ILogger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphLoggerWrapper : ILogger Constructors GraphLoggerWrapper(IGraphLogger, String, Guid, LogEventType, IEnumerable<Object>) Initializes a new instance of the GraphLoggerWrapper class. Declaration public GraphLoggerWrapper(IGraphLogger graphLogger, string component = null, Guid correlationId = default(Guid), LogEventType eventType = LogEventType.Trace, IEnumerable<object> properties = null) Parameters Type Name Description IGraphLogger graphLogger Graph logger instance String component The component in which log is created Guid correlationId The correlation identifier. LogEventType eventType Log event type IEnumerable < Object > properties Extra properties for the log event Methods BeginScope<TState>(TState) Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state Returns Type Description IDisposable Type Parameters Name Description TState IsEnabled(LogLevel) Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Returns Type Description Boolean Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description LogLevel logLevel EventId eventId TState state Exception exception Func <TState, Exception , String > formatter Type Parameters Name Description TState Implements Microsoft.Extensions.Logging.ILogger Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Observable-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Observable-1.html",
    "title": "Class Observable<T>",
    "keywords": "Class Observable<T> Observable Base class Inheritance Object ObjectRoot Observable<T> Implements IObservable <T> IObserver <T> INotifyCollectionChanged Inherited Members ObjectRoot.GraphLogger Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class Observable<T> : ObjectRoot, IObservable<T>, IObserver<T>, INotifyCollectionChanged Type Parameters Name Description T Type of the value being observed. Constructors Observable(IGraphLogger) Initializes a new instance of the Observable<T> class. Declaration public Observable(IGraphLogger logger) Parameters Type Name Description IGraphLogger logger Logger instance. Properties Observers Gets the observers. Declaration public ICollection<IObserver<T>> Observers { get; } Property Value Type Description ICollection < IObserver <T>> Methods OnCompleted() Notify observers of completion. Declaration public void OnCompleted() OnError(Exception) Notify observers of error. Declaration public void OnError(Exception error) Parameters Type Name Description Exception error Exception information. OnNext(T) Notify observers. Declaration public void OnNext(T value) Parameters Type Name Description T value Value to observers. OnNext(T, IEnumerable<IObserver<T>>) Notify observers. Declaration public void OnNext(T value, IEnumerable<IObserver<T>> observersSubset) Parameters Type Name Description T value Value to observers. IEnumerable < IObserver <T>> observersSubset Subset of observers to notify. Subscribe(IObserver<T>) Notifies the provider that an observer is to receive notifications. Declaration public virtual IDisposable Subscribe(IObserver<T> observer) Parameters Type Name Description IObserver <T> observer The object that is to receive notifications. Returns Type Description IDisposable A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them. Events CollectionChanged Collection changed event. Declaration public event NotifyCollectionChangedEventHandler CollectionChanged Event Type Type Description NotifyCollectionChangedEventHandler Implements System.IObservable<T> System.IObserver<T> System.Collections.Specialized.INotifyCollectionChanged Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "client/Microsoft.Graph.Communications.Resources.IResourceBase.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.IResourceBase.html",
    "title": "Interface IResourceBase",
    "keywords": "Interface IResourceBase The resource base interface. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IResourceBase : IDisposable Properties Client Gets the client. Declaration ICommunicationsClient Client { get; } Property Value Type Description ICommunicationsClient CreatedDateTime Gets the created date time of this resource. Declaration DateTimeOffset CreatedDateTime { get; } Property Value Type Description DateTimeOffset GraphClient Gets the graph client. Declaration IGraphClient GraphClient { get; } Property Value Type Description IGraphClient GraphLogger Gets the graph logger. Declaration IGraphLogger GraphLogger { get; } Property Value Type Description IGraphLogger ResourcePath Gets the resource path for this collection. Declaration string ResourcePath { get; } Property Value Type Description String See Also IDisposable"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger.html",
    "title": "Class ClientEtwLogger",
    "keywords": "Class ClientEtwLogger Logger for client that publishes to ETW. Inheritance Object EventSource ClientEtwLogger Implements IDisposable Inherited Members EventSource.IsEnabled() EventSource.IsEnabled(EventLevel, EventKeywords) EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel) EventSource.GetGuid(Type) EventSource.GetName(Type) EventSource.GenerateManifest(Type, String) EventSource.GenerateManifest(Type, String, EventManifestOptions) EventSource.GetSources() EventSource.SendCommand(EventSource, EventCommand, IDictionary<String, String>) EventSource.SetCurrentThreadActivityId(Guid) EventSource.SetCurrentThreadActivityId(Guid, Guid) EventSource.GetTrait(String) EventSource.ToString() EventSource.OnEventCommand(EventCommandEventArgs) EventSource.WriteEvent(Int32) EventSource.WriteEvent(Int32, Int32) EventSource.WriteEvent(Int32, Int32, Int32) EventSource.WriteEvent(Int32, Int32, Int32, Int32) EventSource.WriteEvent(Int32, Int64) EventSource.WriteEvent(Int32, Int64, Int64) EventSource.WriteEvent(Int32, Int64, Int64, Int64) EventSource.WriteEvent(Int32, String) EventSource.WriteEvent(Int32, String, String) EventSource.WriteEvent(Int32, String, String, String) EventSource.WriteEvent(Int32, String, Int32) EventSource.WriteEvent(Int32, String, Int32, Int32) EventSource.WriteEvent(Int32, String, Int64) EventSource.WriteEvent(Int32, Int64, String) EventSource.WriteEvent(Int32, Int32, String) EventSource.WriteEvent(Int32, Byte[]) EventSource.WriteEvent(Int32, Int64, Byte[]) EventSource.WriteEventCore(Int32, Int32, EventSource.EventData*) EventSource.WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*) EventSource.WriteEvent(Int32, Object[]) EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object[]) EventSource.Dispose() EventSource.Dispose(Boolean) EventSource.Write(String) EventSource.Write(String, EventSourceOptions) EventSource.Write<T>(String, T) EventSource.Write<T>(String, EventSourceOptions, T) EventSource.Write<T>(String, EventSourceOptions, T) EventSource.Write<T>(String, EventSourceOptions, Guid, Guid, T) EventSource.Name EventSource.Guid EventSource.Settings EventSource.CurrentThreadActivityId EventSource.ConstructionException EventSource.EventCommandExecuted Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax [EventSource(Name = \"Microsoft-Graph-Telemetry-Client\")] public class ClientEtwLogger : EventSource, IDisposable Constructors ClientEtwLogger(IGraphLogger) Initializes a new instance of the ClientEtwLogger class. Declaration public ClientEtwLogger(IGraphLogger logger) Parameters Type Name Description IGraphLogger logger The logger. Methods HttpTrace(Guid, String, String, String, String, String, String, String, Int32, String, String, String, String, String, String) Trace for client's http calls. Declaration [Event(100, Level = EventLevel.Informational, Message = \"{5}\")] public void HttpTrace(Guid correlationId, string component, string traceLevel, string url, string transactionDirection, string message, string appName, string appId, int mtid, string callingLine, string traceType, string headers, string method, string responseCode, string responseTime) Parameters Type Name Description Guid correlationId The correlation identifier. String component The component. String traceLevel The trace level. String url The URL for the request. String transactionDirection The direction of the request this request/response corresponds to. String message The body for the request/response. String appName Name of the application. String appId The application identifier. Int32 mtid The managed tid. String callingLine The line in which log is produced. String traceType Denote whether this is request/response. String headers The headers. String method The method for the request. String responseCode The response code from response. String responseTime Time taken to process the request. Trace(Guid, String, String, String, String, String, Int32, String) Trace for client's normal trace calls. Declaration [Event(101, Level = EventLevel.Informational, Message = \"{3}\")] public void Trace(Guid correlationId, string component, string traceLevel, string message, string appName, string appId, int mtid, string callingLine) Parameters Type Name Description Guid correlationId The correlation identifier. String component The component. String traceLevel The trace level. String message The message. String appName Name of the application. String appId The application identifier. Int32 mtid The managed tid. String callingLine The line in which log is produced. Implements System.IDisposable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient.html",
    "title": "Interface IGraphHttpClient",
    "keywords": "Interface IGraphHttpClient Interface for Http transport client. Gives us a way to work with different instances of GraphClient through Dependency Injection. Inherited Members IGraphClient.SendAsync<TRequest>(IGraphRequest<TRequest>, CancellationToken) IGraphClient.SendAsync<TRequest, TResponse>(IGraphRequest<TRequest>, CancellationToken) IGraphClient.GraphLogger IGraphClient.DefaultProperties Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphHttpClient : IGraphClient Properties CustomRedirectUriGenerator Gets or sets the custom redirect URI generator. This is called in case of a redirect (3XX) response from the request. Clients can use this to read the response and give the new redirect url to call in the next request. Declaration Func<HttpResponseMessage, Uri> CustomRedirectUriGenerator { get; set; } Property Value Type Description Func < HttpResponseMessage , Uri > The custom redirect URI generator. Methods Clone(HttpClient) Clones this instance with optional overrides. Declaration IGraphHttpClient Clone(HttpClient httpClient = null) Parameters Type Name Description HttpClient httpClient The HTTP client to replace the original. Returns Type Description IGraphHttpClient Cloned client with the updated properties. SendRawHttpRequestAsync(HttpRequestMessage, CancellationToken) Send a Http request as an asynchronous operation. The content sent using this is not parsed or logged. Declaration Task<HttpResponseMessage> SendRawHttpRequestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description HttpRequestMessage httpRequest The http request message to send. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < HttpResponseMessage > The task object representing the asynchronous operation. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) See Also IGraphClient"
  },
  "common/Microsoft.Graph.Communications.Common.AutoClean-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.AutoClean-1.html",
    "title": "Class AutoClean<T>",
    "keywords": "Class AutoClean<T> Helper class to automatically cleanup but with associated state. Inheritance Object Disposable AutoClean AutoClean<T> Implements IDisposable Inherited Members AutoClean.Dispose(Boolean) Disposable.Dispose() Disposable.IsDisposed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class AutoClean<T> : AutoClean, IDisposable Type Parameters Name Description T State type. Constructors AutoClean(T, Action) Initializes a new instance of the AutoClean<T> class. Declaration public AutoClean(T t, Action action) Parameters Type Name Description T t Instance of the custom data. Action action Cleanup action. Properties Data Gets the custom data. Declaration public T Data { get; } Property Value Type Description T Implements System.IDisposable Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter-2.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter-2.html",
    "title": "Class BaseFilter<T1, T2>",
    "keywords": "Class BaseFilter<T1, T2> Base filter. Inheritance Object BaseFilter BaseFilter<T1, T2> ContentDispositionFilter ContentTypeFilter HeaderFilter UriFilter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters Assembly : Microsoft.Graph.Communications.Common.dll Syntax public abstract class BaseFilter<T1, T2> : BaseFilter Type Parameters Name Description T1 Type of input for the filter. T2 Return value for the evaluator. Constructors BaseFilter() Declaration protected BaseFilter() Properties MatchableString Gets or sets the string for which this filter is a match. Declaration public T2 MatchableString { get; protected set; } Property Value Type Description T2 MatchEvaluator Gets or sets the match evaluator that converts the input value to target value. Declaration public Func<T1, T2> MatchEvaluator { get; protected set; } Property Value Type Description Func <T1, T2> Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.TypedPropertiesConverter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.TypedPropertiesConverter.html",
    "title": "Class JsonConverters.TypedPropertiesConverter",
    "keywords": "Class JsonConverters.TypedPropertiesConverter The json converter for Type. Inheritance Object JsonConverters.TypedPropertiesConverter Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class TypedPropertiesConverter : JsonConverter Constructors TypedPropertiesConverter() Declaration public TypedPropertiesConverter() Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.OData.ODataResolver.html": {
    "href": "common/Microsoft.Graph.Communications.Common.OData.ODataResolver.html",
    "title": "Class ODataResolver",
    "keywords": "Class ODataResolver Contract resolver that allows us to create OData json payloads with type information. Inheritance Object ODataResolver GraphObfuscationContractResolver Namespace : Microsoft.Graph.Communications.Common.OData Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ODataResolver : CamelCasePropertyNamesContractResolver Constructors ODataResolver(Boolean, Assembly[]) Initializes a new instance of the ODataResolver class which can be used to serialize/deserialize classes present in typeAssemblies . Declaration public ODataResolver(bool addOdataType, params Assembly[] typeAssemblies) Parameters Type Name Description Boolean addOdataType If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property. Assembly [] typeAssemblies Assemblies in which the OData object exist. Methods CreateProperties(Type, MemberSerialization) Declaration protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization) Parameters Type Name Description Type type Newtonsoft.Json.MemberSerialization memberSerialization Returns Type Description IList < Newtonsoft.Json.Serialization.JsonProperty > ResolveContractConverter(Type) Declaration protected override JsonConverter ResolveContractConverter(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Newtonsoft.Json.JsonConverter Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute.html": {
    "href": "common/Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute.html",
    "title": "Class ODataSerializeAsTypeAttribute",
    "keywords": "Class ODataSerializeAsTypeAttribute Specify how a given object should be written/read on the wire. Inheritance Object Attribute ODataSerializeAsTypeAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.OData Assembly : Microsoft.Graph.Communications.Common.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public class ODataSerializeAsTypeAttribute : Attribute, _Attribute Constructors ODataSerializeAsTypeAttribute(String, Boolean) Initializes a new instance of the ODataSerializeAsTypeAttribute class. Declaration public ODataSerializeAsTypeAttribute(string name, bool renameWhenSerialized = true) Parameters Type Name Description String name The name of the class. Boolean renameWhenSerialized If set to true use the Name to serialize the class. Properties Name Gets the name of the class. Declaration public string Name { get; } Property Value Type Description String RenameWhenSerialized Gets a value indicating whether to rename when serializing this object. When true, the object will be serialized to Name , otherwise the object will be serialized as the actual object name. Declaration public bool RenameWhenSerialized { get; } Property Value Type Description Boolean Implements System.Runtime.InteropServices._Attribute Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) See Also Attribute"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphProperty-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphProperty-1.html",
    "title": "Struct GraphProperty<T>",
    "keywords": "Struct GraphProperty<T> Implements IGraphProperty <T> IGraphProperty IEquatable < IGraphProperty > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public struct GraphProperty<T> : IGraphProperty<T>, IGraphProperty, IEquatable<IGraphProperty> Type Parameters Name Description T Constructors GraphProperty(IGraphProperty<T>) Initializes a new instance of the GraphProperty<T> struct. Declaration public GraphProperty(IGraphProperty<T> property) Parameters Type Name Description IGraphProperty <T> property The property. GraphProperty(String, T, String) Initializes a new instance of the GraphProperty<T> struct. Declaration public GraphProperty(string key, T value, string type = null) Parameters Type Name Description String key The key. T value The value. String type The type. Properties Key Gets the key. Declaration public string Key { get; } Property Value Type Description String Type Gets the type of the property. Declaration public string Type { get; } Property Value Type Description String Value Declaration public T Value { get; } Property Value Type Description T Methods Equals(IGraphProperty) Declaration public bool Equals(IGraphProperty other) Parameters Type Name Description IGraphProperty other Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Explicit Interface Implementations IGraphProperty.Value Gets the value. Declaration object IGraphProperty.Value { get; } Returns Type Description Object Implements IGraphProperty<T> IGraphProperty System.IEquatable<T> Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphProperty.ConvertProperty<T>(IGraphProperty)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphResponse.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphResponse.html",
    "title": "Class GraphResponse",
    "keywords": "Class GraphResponse Inheritance Object GraphResponse < NoContentMessage > GraphResponse Implements IGraphResponse IGraphResponse < NoContentMessage > IGraphExchange < NoContentMessage > IGraphExchange Inherited Members GraphResponse<NoContentMessage>.ToString() GraphResponse<NoContentMessage>.Content GraphResponse<NoContentMessage>.Properties GraphResponse<NoContentMessage>.ReasonPhrase GraphResponse<NoContentMessage>.ErrorContent GraphResponse<NoContentMessage>.Status Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphResponse : GraphResponse<NoContentMessage>, IGraphResponse, IGraphResponse<NoContentMessage>, IGraphExchange<NoContentMessage>, IGraphExchange Constructors GraphResponse(IGraphResponse<NoContentMessage>) Initializes a new instance of the GraphResponse class. This is a copy constructor. Declaration public GraphResponse(IGraphResponse<NoContentMessage> response) Parameters Type Name Description IGraphResponse < NoContentMessage > response The response to be used to create a new instance. GraphResponse(ResponseStatus) Initializes a new instance of the GraphResponse class. Create a new graph response Declaration public GraphResponse(ResponseStatus status) Parameters Type Name Description ResponseStatus status Status indicating success/failure/other for the response. GraphResponse(String, ResponseStatus, String) Initializes a new instance of the GraphResponse class. Declaration public GraphResponse(string errorContent, ResponseStatus status, string reasonPhrase) Parameters Type Name Description String errorContent Content of the error. ResponseStatus status The status. String reasonPhrase The reason phrase. Implements IGraphResponse IGraphResponse<T> IGraphExchange<T> IGraphExchange Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphResponseExtensions.ToHttpResponseMessage<T>(IGraphResponse<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphResponse-1.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphResponse-1.html",
    "title": "Interface IGraphResponse<T>",
    "keywords": "Interface IGraphResponse<T> The response got in exchange of a IGraphRequest<T> . Inherited Members IGraphExchange<T>.Content IGraphExchange.Properties Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphResponse<T> : IGraphExchange<T>, IGraphExchange Type Parameters Name Description T Type of the body of response. Properties ErrorContent Gets the content of the error. Declaration string ErrorContent { get; } Property Value Type Description String ReasonPhrase Gets the reason phrase. Declaration string ReasonPhrase { get; } Property Value Type Description String Status Gets the status of response. Declaration ResponseStatus Status { get; } Property Value Type Description ResponseStatus Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) GraphResponseExtensions.ToHttpResponseMessage<T>(IGraphResponse<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>) See Also IGraphExchange <T>"
  },
  "common/Microsoft.Graph.Communications.Common.Validator.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Validator.html",
    "title": "Class Validator",
    "keywords": "Class Validator Helper class with various condition validation utilities. Inheritance Object Validator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class Validator Methods Any(IEnumerable) Determines whether a sequence contains any elements. Declaration public static bool Any(this IEnumerable source) Parameters Type Name Description IEnumerable source The IEnumerable to check for emptiness. Returns Type Description Boolean true if the source sequence contains any elements; otherwise, false . Equals<T>(T, T, IComparer, String, String) Throw if value > is not equal to expected Declaration public static T Equals<T>(T value, T expected, IComparer comparer, string paramName = null, string message = null) Parameters Type Name Description T value value T expected expected IComparer comparer comparer String paramName paramName String message Optional message. Returns Type Description T The input value if validation succeeded. Type Parameters Name Description T Type of the input value Exceptions Type Condition ArgumentException The argument value should match the expected value. Equals<T>(T, T, String, String) Throw if value > is not equal to expected Declaration public static T Equals<T>(this T value, T expected, string paramName = null, string message = null) Parameters Type Name Description T value value T expected expected String paramName paramName String message Optional message. Returns Type Description T The input value if validation succeeded. Type Parameters Name Description T Type of the input value Exceptions Type Condition ArgumentException The argument value should match the expected value. Equals<T, TE>(T, T, String) Throws the TE if value > is not equal to expected Declaration public static T Equals<T, TE>(this T value, T expected, string message = null) where TE : Exception Parameters Type Name Description T value value T expected expected String message Optional message. Returns Type Description T The input value if validation succeeded. Type Parameters Name Description T Type of the input value TE The type of Exception to throw FirstObject(IEnumerable) Gets the first object in the enumerable. Declaration public static object FirstObject(this IEnumerable source) Parameters Type Name Description IEnumerable source The IEnumerable to check for object. Returns Type Description Object langword_csharp_object if the source sequence contains an element; otherwise, null . FirstObject(IEnumerable, Func<Object, Boolean>) Gets the first object in the enumerable that matches the specified predicate. Declaration public static object FirstObject(this IEnumerable source, Func<object, bool> predicate) Parameters Type Name Description IEnumerable source The IEnumerable to check for object. Func < Object , Boolean > predicate The Func<T,TResult> used to match the object. Returns Type Description Object langword_csharp_object if the source sequence contains the matching element; otherwise, null . InRange<T>(T, T, T, String) Throws ArgumentOutOfRangeException if value is not in the given range defined by minValue and maxValue Declaration public static void InRange<T>(this T value, T minValue, T maxValue, string paramName = null) where T : IComparable<T> Parameters Type Name Description T value value to verify T minValue Minimum range value T maxValue Maximum range value String paramName Variable name. Type Parameters Name Description T Comparable Exceptions Type Condition ArgumentOutOfRangeException If the value is out of range. IsEnum(Type) Throws the ArgumentException if given type is not Enum Declaration public static void IsEnum(this Type type) Parameters Type Name Description Type type The type IsFalse(Boolean, String, String) Throw ArgumentException condition is not false Declaration public static void IsFalse(this bool condition, string paramName = null, string message = null) Parameters Type Name Description Boolean condition Condition to check. String paramName Optional variable name. String message Optional message. IsFalse<T>(Boolean, String) Throw T exception if condition is not false Declaration public static void IsFalse<T>(this bool condition, string message = null) where T : Exception Parameters Type Name Description Boolean condition Condition to check. String message Optional message. Type Parameters Name Description T Exception type to raise IsNull(Object, String, String) Throw ArgumentException if obj is not null. Declaration public static void IsNull(this object obj, string paramName = null, string message = null) Parameters Type Name Description Object obj The object to check. String paramName Optional variable name. String message Optional message. IsTrue(Boolean, String, String) Throw ArgumentException condition is not true Declaration public static void IsTrue(this bool condition, string paramName = null, string message = null) Parameters Type Name Description Boolean condition Condition to check. String paramName Optional variable name. String message Optional message. IsTrue<T>(Boolean, String) Throw T exception if condition is not true Declaration public static void IsTrue<T>(this bool condition, string message = null) where T : Exception Parameters Type Name Description Boolean condition Condition to check. String message Optional message. Type Parameters Name Description T Exception type to raise NotEmpty<T>(T, String, String) Throw ArgumentNullException if obj is null. Declaration public static T NotEmpty<T>(this T obj, string paramName = null, string message = null) where T : IEnumerable Parameters Type Name Description T obj The object to check. String paramName Variable name. String message Optional message. Returns Type Description T The validated IEnumerable . Type Parameters Name Description T Enumerable type Exceptions Type Condition ArgumentNullException If the object is null. ArgumentException If the object is empty. NotEquals<T>(T, T, String, String) Throw if value > is equal to unexpected Declaration public static T NotEquals<T>(this T value, T unexpected, string paramName = null, string message = null) Parameters Type Name Description T value The value to compare. T unexpected The unexpected value. String paramName the parameter name. String message Optional message. Returns Type Description T The input value if validation succeeded. Type Parameters Name Description T Type of the input value Exceptions Type Condition ArgumentException The argument value should not match the expected value. NotNull<T>(T, String, String) Throw ArgumentNullException if obj is null. Declaration public static T NotNull<T>(this T obj, string paramName = null, string message = null) Parameters Type Name Description T obj The object. String paramName Name of the parameter. String message The message. Returns Type Description T The validated object. Type Parameters Name Description T The type of the object to validate. Exceptions Type Condition ArgumentException If the object is null. NotNullOrWhitespace(String, String, String) Throws the ArgumentException if string is null or whitespace. Declaration public static string NotNullOrWhitespace(this string value, string paramName = null, string message = null) Parameters Type Name Description String value value to check String paramName Variable name. String message Optional message. Returns Type Description String The validated String . Exceptions Type Condition ArgumentException If the string is null or whitespace. VerifyContains<T>(IEnumerable<T>, T) Throws the ArgumentException if collection does not contains the specified value Declaration public static void VerifyContains<T>(this IEnumerable<T> enumerable, T value) Parameters Type Name Description IEnumerable <T> enumerable The enumerable. T value The value. Type Parameters Name Description T Type of value VerifyContainsKey<TK, TV>(IDictionary<TK, TV>, TK) Throws the ArgumentException if collection does not contain the specified key Declaration public static void VerifyContainsKey<TK, TV>(this IDictionary<TK, TV> dictionary, TK key) Parameters Type Name Description IDictionary <TK, TV> dictionary The dictionary. TK key The key. Type Parameters Name Description TK Key type TV Value type VerifyContainsKey<TK, TV>(IReadOnlyDictionary<TK, TV>, TK) Throws the ArgumentException if collection does not contain the specified key Declaration public static void VerifyContainsKey<TK, TV>(this IReadOnlyDictionary<TK, TV> dictionary, TK key) Parameters Type Name Description IReadOnlyDictionary <TK, TV> dictionary The dictionary. TK key The key. Type Parameters Name Description TK Key type TV Value type VerifyNotContainsKey<TK, TV>(IDictionary<TK, TV>, TK) Throws the ArgumentException if collection contains the specified key Declaration public static void VerifyNotContainsKey<TK, TV>(this IDictionary<TK, TV> dictionary, TK key) Parameters Type Name Description IDictionary <TK, TV> dictionary The dictionary. TK key The key. Type Parameters Name Description TK Key type TV Value type"
  },
  "core/Microsoft.Graph.Communications.Core.Notifications.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Notifications.html",
    "title": "Namespace Microsoft.Graph.Communications.Core.Notifications",
    "keywords": "Namespace Microsoft.Graph.Communications.Core.Notifications Classes CollectionNotificationEventArgs The collection notification event args. FailedNotificationEventArgs Event arguments used when exceptions are raised in callbacks. NotificationEventArgs Notification event arguments class. NotificationProcessor The notification processor class. NotificationProcessorExtensions Extensions for container client. Interfaces INotificationProcessor The notification processor interface."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.NoContentMessage.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.NoContentMessage.html",
    "title": "Class NoContentMessage",
    "keywords": "Class NoContentMessage IGraphClient requires type parameters for functionality. This is a marked Type/class to make function calls to IGraphClient indicating we have request/response with no body. The sole purpose of this class's existence is to reduce code duplicacy. Inheritance Object NoContentMessage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public sealed class NoContentMessage Constructors NoContentMessage() Declaration public NoContentMessage() Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.IGraphExchange.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.IGraphExchange.html",
    "title": "Interface IGraphExchange",
    "keywords": "Interface IGraphExchange The base of the exchange of a IGraphRequest<T> or IGraphResponse<T> . Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphExchange Properties Properties Gets the properties of the exchange. Declaration ICollection<IGraphProperty> Properties { get; } Property Value Type Description ICollection < IGraphProperty > Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.GraphResponseExtensions.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.GraphResponseExtensions.html",
    "title": "Class GraphResponseExtensions",
    "keywords": "Class GraphResponseExtensions Extensions for IGraphResponse<T> class. Inheritance Object GraphResponseExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class GraphResponseExtensions Methods ToHttpResponseMessage<T>(IGraphResponse<T>, JsonSerializerSettings, IEnumerable<IGraphProperty>) Converts IGraphResponse into a HttpResponseMessage . Declaration public static HttpResponseMessage ToHttpResponseMessage<T>(this IGraphResponse<T> graphResponse, JsonSerializerSettings jsonSerializerSettings = null, IEnumerable<IGraphProperty> defaultProperties = null) Parameters Type Name Description IGraphResponse <T> graphResponse The graph response to be converted. Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings The json serializer settings. IEnumerable < IGraphProperty > defaultProperties The default properties. Returns Type Description HttpResponseMessage HttpResponseMessage corresponding to graphResponse . Type Parameters Name Description T Type of content available in the response. ToHttpStatus(ResponseStatus) Convert ResponseStatus to it's corresponding HttpStatusCode . Declaration public static HttpStatusCode ToHttpStatus(this ResponseStatus status) Parameters Type Name Description ResponseStatus status The status. Returns Type Description HttpStatusCode HttpStatusCode for the ResponseStatus"
  },
  "client/Microsoft.Graph.Communications.Client.IStateManager-1.html": {
    "href": "client/Microsoft.Graph.Communications.Client.IStateManager-1.html",
    "title": "Interface IStateManager<TResource>",
    "keywords": "Interface IStateManager<TResource> The state manager interface. This object is responsible for storing the resources in memory. Inherited Members ICollection<TResource>.Add(TResource) ICollection<TResource>.Clear() ICollection<TResource>.Contains(TResource) ICollection<TResource>.CopyTo(TResource[], Int32) ICollection<TResource>.Remove(TResource) ICollection<TResource>.Count ICollection<TResource>.IsReadOnly IEnumerable<TResource>.GetEnumerator() IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IStateManager<TResource> : ICollection<TResource>, IEnumerable<TResource>, IEnumerable, IDisposable where TResource : IResource Type Parameters Name Description TResource The type of the resource. Properties Item[String] Gets the IResource<TSelf, TEntity> with the specified identifier. Declaration TResource this[string id] { get; } Parameters Type Name Description String id The identifier. Property Value Type Description TResource The IResource<TSelf, TEntity> . Methods CopyContent() Copies the content contained by this instance. Declaration ICollection<TResource> CopyContent() Returns Type Description ICollection <TResource> The copied ICollection<T> GetOrAdd(String, Func<TResource>) Gets the resource with the specified id if it exists in the collection, otherwise executes the resource factory to create the resource. State manager does not guarantee that the resource factory is executed only once, so operations must be idempotent (I.E. GET, PUT, etc...). Declaration TResource GetOrAdd(string id, Func<TResource> resourceFactory) Parameters Type Name Description String id The identifier. Func <TResource> resourceFactory The resource factory. Returns Type Description TResource The IResource<TSelf, TEntity> that was found or created. GetOrAddAsync(String, Func<Task<TResource>>) Gets the resource with the specified id if it exists in the collection, otherwise executes the resource factory to create the resource. State manager does not guarantee that the resource factory is executed only once, so operations must be idempotent (I.E. GET, PUT, etc...). This method supports asynchronously creating the resource. Declaration Task<TResource> GetOrAddAsync(string id, Func<Task<TResource>> resourceFactory) Parameters Type Name Description String id The identifier. Func < Task <TResource>> resourceFactory The resource factory. Returns Type Description Task <TResource> The IResource<TSelf, TEntity> that was found or created. Remove(String) Removes the resource with the specified id from the state manager. Declaration TResource Remove(string id) Parameters Type Name Description String id The identifier. Returns Type Description TResource The IResource<TSelf, TEntity> that was removed. TryRemove(String, out TResource) Tries to remove the resource with the specified id. Declaration bool TryRemove(string id, out TResource resource) Parameters Type Name Description String id The identifier. TResource resource The resource. Returns Type Description Boolean true if the IResource<TSelf, TEntity> was removed, false otherwise."
  },
  "client/Microsoft.Graph.Communications.Client.PagedList-1.html": {
    "href": "client/Microsoft.Graph.Communications.Client.PagedList-1.html",
    "title": "Class PagedList<T>",
    "keywords": "Class PagedList<T> An object that contains paginated list of the generic type T. Inheritance Object PagedList<T> Implements IPagedList <T> IReadOnlyList <T> IReadOnlyCollection <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class PagedList<T> : IPagedList<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of Paged List. Constructors PagedList() Declaration public PagedList() Properties AdditionalData Gets or sets the additional data. Declaration public IDictionary<string, object> AdditionalData { get; set; } Property Value Type Description IDictionary < String , Object > Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description T NextLinkUrl Gets the next link URL taken from @odata.nextLink. Declaration public Uri NextLinkUrl { get; } Property Value Type Description Uri Value Gets or sets the value in the current page of the list. Declaration public IList<T> Value { get; set; } Property Value Type Description IList <T> Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IPagedList<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "common/Microsoft.Graph.Communications.Common.EnumUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.EnumUtils.html",
    "title": "Class EnumUtils",
    "keywords": "Class EnumUtils Enum Utilities Inheritance Object EnumUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class EnumUtils Methods GetDescription(Enum) Gets the enum's description attribute. Declaration public static string GetDescription(this Enum value) Parameters Type Name Description Enum value The value. Returns Type Description String Enum's description Parse<TEnum>(String) Parses the string into enum Declaration public static TEnum Parse<TEnum>(string value) where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description String value input string Returns Type Description TEnum Enum's parsed value Type Parameters Name Description TEnum Enum's type to output"
  },
  "common/Microsoft.Graph.Communications.Common.Exceptions.ConfigurationException.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Exceptions.ConfigurationException.html",
    "title": "Class ConfigurationException",
    "keywords": "Class ConfigurationException Configuration is bad. Mandatory configuration setting is missing. Or raw (string) setting value can not be converted to property type. Inheritance Object Exception ConfigurationException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Exceptions Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ConfigurationException : Exception, ISerializable, _Exception Constructors ConfigurationException(String) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string message) Parameters Type Name Description String message The message that describes the error. ConfigurationException(String, Exception) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ExceptionUtils.FindInnerException(Exception) ExceptionUtils.FormatException(Exception, Int32) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "client/Microsoft.Graph.Communications.Client.CommunicationsClientBuilder.html": {
    "href": "client/Microsoft.Graph.Communications.Client.CommunicationsClientBuilder.html",
    "title": "Class CommunicationsClientBuilder",
    "keywords": "Class CommunicationsClientBuilder The class the provides the builder for stateful client. Inheritance Object CommunicationsClientBuilder Implements ICommunicationsClientBuilder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Client Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class CommunicationsClientBuilder : ICommunicationsClientBuilder Constructors CommunicationsClientBuilder(String, String, IGraphLogger, ObfuscationMember[]) Initializes a new instance of the CommunicationsClientBuilder class. Declaration public CommunicationsClientBuilder(string appName, string appId, IGraphLogger logger = null, ObfuscationMember[] additionalObfuscationMembers = null) Parameters Type Name Description String appName Name of the application. String appId The application identifier. IGraphLogger logger The logger ObfuscationMember [] additionalObfuscationMembers Additional members to obfuscate. Properties Id Gets the client id. Declaration public Guid Id { get; } Property Value Type Description Guid Methods Build() Build and return the stateful client object. Declaration public ICommunicationsClient Build() Returns Type Description ICommunicationsClient The ICommunicationsClient . Exceptions Type Condition ArgumentException Cannot build the client without setting the required parameters. SetAuthenticationProvider(IRequestAuthenticationProvider) Sets the custom authentication provider. The authentication provider would add authentication to outbound requests and validates any inbound requests. See IRequestAuthenticationProvider Declaration public ICommunicationsClientBuilder SetAuthenticationProvider(IRequestAuthenticationProvider authenticationProvider) Parameters Type Name Description IRequestAuthenticationProvider authenticationProvider Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ArgumentNullException If the provider is null . SetCacheStrategy(ICache) Sets the cache strategy. Declaration public ICommunicationsClientBuilder SetCacheStrategy(ICache cacheStrategy) Parameters Type Name Description ICache cacheStrategy The cache strategy. Returns Type Description ICommunicationsClientBuilder This ICommunicationsClientBuilder object. Exceptions Type Condition ArgumentNullException If the cacheStrategy strategy is null . SetHttpClient(HttpClient, IEnumerable<KeyValuePair<String, String>>) Sets the http client. Use a custom HTTP Client instead of the one generated by the SDK. Declaration public ICommunicationsClientBuilder SetHttpClient(HttpClient httpClient, IEnumerable<KeyValuePair<string, string>> defaultHeaders = null) Parameters Type Name Description HttpClient httpClient The place call endpoint URL. IEnumerable < KeyValuePair < String , String >> defaultHeaders The default headers. Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ArgumentNullException If the httpClient is null . SetNotificationUrl(Uri) Set the notification uri for your bot. This is the default notification url for the bot. This can be overriden on a per-resource basis depending on the API support. Declaration public ICommunicationsClientBuilder SetNotificationUrl(Uri notificationUrlInput) Parameters Type Name Description Uri notificationUrlInput Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ArgumentNullException If the notificationUrl is null . ArgumentException URI must be https. SetServiceBaseUrl(Uri) Sets the service base URL. This set's the Endpoint URL for the service. Declaration public ICommunicationsClientBuilder SetServiceBaseUrl(Uri serviceBaseUrlInput) Parameters Type Name Description Uri serviceBaseUrlInput Returns Type Description ICommunicationsClientBuilder The ICommunicationsClientBuilder . Exceptions Type Condition ArgumentNullException If the serviceBaseUrl is null . ArgumentException URI must be https. Implements ICommunicationsClientBuilder"
  },
  "client/Microsoft.Graph.Communications.Resources.IResourceCollection.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.IResourceCollection.html",
    "title": "Interface IResourceCollection",
    "keywords": "Interface IResourceCollection The resource collection interface. Inherited Members IResourceBase.CreatedDateTime IResourceBase.Client IResourceBase.GraphClient IResourceBase.GraphLogger IResourceBase.ResourcePath IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IResourceCollection : IResourceBase, IDisposable Methods TerminateAsync(TimeSpan) Performs collection specific terminate tasks. Declaration Task<bool> TerminateAsync(TimeSpan timeout = default(TimeSpan)) Parameters Type Name Description TimeSpan timeout The timeout. Returns Type Description Task < Boolean > True if all instances terminated successfully, false otherwise. See Also IResourceBase"
  },
  "client/Microsoft.Graph.Communications.Resources.ResourceEventArgs-1.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.ResourceEventArgs-1.html",
    "title": "Class ResourceEventArgs<TEntity>",
    "keywords": "Class ResourceEventArgs<TEntity> The resource event arguments. Inheritance Object ResourceEventArgs<TEntity> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class ResourceEventArgs<TEntity> where TEntity : Entity Type Parameters Name Description TEntity The containing NewResource type. NewResource Constructors ResourceEventArgs(TEntity, TEntity, String) Initializes a new instance of the ResourceEventArgs<TEntity> class. Declaration public ResourceEventArgs(TEntity oldResource, TEntity newResource, string resourcePath) Parameters Type Name Description TEntity oldResource The old resource. TEntity newResource The new resource. String resourcePath The resource path. Properties AdditionalData Gets or sets the additional data for the event. Declaration public IDictionary<string, object> AdditionalData { get; set; } Property Value Type Description IDictionary < String , Object > NewResource Gets the new resource. Declaration public TEntity NewResource { get; } Property Value Type Description TEntity OldResource Gets the old resource. Declaration public TEntity OldResource { get; } Property Value Type Description TEntity ResourcePath Gets the resource path for this resource. Declaration public string ResourcePath { get; } Property Value Type Description String"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger.html",
    "title": "Interface IGraphLogger",
    "keywords": "Interface IGraphLogger The logger interface used by Graph Services. This logger emits logs that can be observed by different observers. Inherited Members IObservable<LogEvent>.Subscribe(IObserver<LogEvent>) Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IGraphLogger : IObservable<LogEvent> Properties CorrelationId Gets or sets the correlation identifier. This is used to track correlation between multiple requests for one scenario. Declaration Guid CorrelationId { get; set; } Property Value Type Description Guid DiagnosticLevel Gets or sets the diagnostic level for the logger. Declaration TraceLevel DiagnosticLevel { get; set; } Property Value Type Description TraceLevel LogicalThreadId Gets or sets the logical thread identifier. This id is used for tracking the flow of one request throughout the lifetime until it ends. Declaration uint LogicalThreadId { get; set; } Property Value Type Description UInt32 ObfuscationConfiguration Gets the obfuscation configuration. This is used to obfuscate PII and other data. Declaration ObfuscationConfiguration ObfuscationConfiguration { get; } Property Value Type Description ObfuscationConfiguration Properties Gets the properties of the logger. Declaration IReadOnlyDictionary<Type, object> Properties { get; } Property Value Type Description IReadOnlyDictionary < Type , Object > Methods Log(TraceLevel, String, String, Guid, Guid, LogEventType, IEnumerable<Object>, String, String, Int32) Log messages classified as the provided trace level. Declaration LogEvent Log(TraceLevel level, string message, string component = null, Guid correlationId = default(Guid), Guid requestId = default(Guid), LogEventType eventType = LogEventType.Trace, IEnumerable<object> properties = null, string memberName = null, string filePath = null, int lineNumber = 0) Parameters Type Name Description TraceLevel level The trace level. String message A composite format string that includes one or more format items. String component The component in which log is created Guid correlationId The correlation identifier. Guid requestId The request identifier. LogEventType eventType Log event type IEnumerable < Object > properties Extra properties for the log event String memberName Calling function. String filePath File name where code is located. Int32 lineNumber Line number where code is located. Returns Type Description LogEvent Log Event object. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.CreateObserver<T>(IObservable<T>, Action<T>, Action<Exception>, Action) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) LoggingExtensions.Log(IGraphLogger, TraceLevel, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Error(IGraphLogger, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Error(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Info(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Warn(IGraphLogger, Exception, String, String, Guid, String, String, Int32) LoggingExtensions.Warn(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.Verbose(IGraphLogger, String, String, Guid, String, String, Int32) LoggingExtensions.LogHttpMessage(IGraphLogger, TraceLevel, TransactionDirection, HttpTraceType, String, String, String, IEnumerable<KeyValuePair<String, IEnumerable<String>>>, Int32, String, Nullable<Int64>, Guid, Guid, String, String, Int32) LoggingExtensions.Metric(IGraphLogger, String, String, Int64, Dictionary<String, String>, Boolean, String, Guid, String, String, Int32) LoggingExtensions.SerializeAndObfuscate(IGraphLogger, Object, Formatting) LoggingExtensions.Obfuscate(IGraphLogger, Object, ObfuscationTag) LoggingExtensions.GetHeaderText(IGraphLogger, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) LoggingExtensions.CreateShim(IGraphLogger, String, Nullable<Guid>, IEnumerable<Object>, ObfuscationConfiguration) LoggingExtensions.CreateILogger(IGraphLogger, String, Guid, LogEventType, IEnumerable<Object>) LoggingExtensions.EnterMethod(IGraphLogger, Guid, String, String, Int32) LoggingExtensions.LeaveMethod(IGraphLogger, Guid, String, String, Int32)"
  },
  "common/Microsoft.Graph.Communications.Common.JsonUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.JsonUtils.html",
    "title": "Class JsonUtils",
    "keywords": "Class JsonUtils Json Utils Inheritance Object JsonUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class JsonUtils Fields JsonContentType Json content type Declaration public const string JsonContentType = \"application/json\" Field Value Type Description String"
  },
  "common/Microsoft.Graph.AdditionalDataExtensions.html": {
    "href": "common/Microsoft.Graph.AdditionalDataExtensions.html",
    "title": "Class AdditionalDataExtensions",
    "keywords": "Class AdditionalDataExtensions The identity set extensions Inheritance Object AdditionalDataExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class AdditionalDataExtensions Methods GetValue<T>(IDictionary<String, Object>, String, T) Gets the object using the key from additional data. Declaration public static T GetValue<T>(this IDictionary<string, object> additionalData, string key, T default = null) Parameters Type Name Description IDictionary < String , Object > additionalData The additional data. String key The key. T default The default value if value could not be parsed. Returns Type Description T /// The converted value. Type Parameters Name Description T The expected type for the specified key. SetInAdditionalData(Object, String, Object) Sets the object with given key in additional data. Declaration public static void SetInAdditionalData(this object obj, string key, object value) Parameters Type Name Description Object obj The identity. String key The key. Object value The value."
  },
  "common/Microsoft.Graph.Communications.Common.OData.ODataConfiguration.html": {
    "href": "common/Microsoft.Graph.Communications.Common.OData.ODataConfiguration.html",
    "title": "Class ODataConfiguration",
    "keywords": "Class ODataConfiguration OData Configuration object to be used for different classes. Inheritance Object ODataConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.OData Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ODataConfiguration Constructors ODataConfiguration(Boolean, Assembly[]) Initializes a new instance of the ODataConfiguration class. Declaration public ODataConfiguration(bool addOdataType, params Assembly[] odataAssemblies) Parameters Type Name Description Boolean addOdataType If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property. Assembly [] odataAssemblies The OData assemblies. Properties JsonSerializerSettingsForOData Gets json serializer settings for OData. Declaration public JsonSerializerSettings JsonSerializerSettingsForOData { get; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings Newtonsoft.Json.JsonSerializerSettings for serializing/deserializing OData objects. Methods FillODataJsonSerializerSettings(Boolean, JsonSerializerSettings) Fills the json serializer settings. Declaration public JsonSerializerSettings FillODataJsonSerializerSettings(bool addOdataType, JsonSerializerSettings settings) Parameters Type Name Description Boolean addOdataType If true, attach the @odata.type property to each object, otherwise only attach this property if it's already present. Newtonsoft.Json.JsonSerializerSettings settings The settings. Returns Type Description Newtonsoft.Json.JsonSerializerSettings Serialization settings. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.SecureStringUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.SecureStringUtils.html",
    "title": "Class SecureStringUtils",
    "keywords": "Class SecureStringUtils SecureString Utilities Inheritance Object SecureStringUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class SecureStringUtils Methods ConvertToUnsecureString(SecureString) Converts a SecureString into a managed string for consumption Declaration public static string ConvertToUnsecureString(this SecureString secureString) Parameters Type Name Description SecureString secureString The SecureString to convert into a managed string Returns Type Description String String representation of the SecureString"
  },
  "client/Microsoft.Graph.Communications.Common.Telemetry.LogProperties.html": {
    "href": "client/Microsoft.Graph.Communications.Common.Telemetry.LogProperties.html",
    "title": "Class LogProperties",
    "keywords": "Class LogProperties The log properties. Inheritance Object LogProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Client.dll Syntax public static class LogProperties Remarks For better logging experience, all property names should be specific enough. Avoid using generic name such as Id, Name, etc."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.Http.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.Http.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.Transport.Http",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.Transport.Http Classes HttpUtils Utilities for Http transport"
  },
  "client/Microsoft.Graph.Communications.Client.Authentication.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Authentication.html",
    "title": "Namespace Microsoft.Graph.Communications.Client.Authentication",
    "keywords": "Namespace Microsoft.Graph.Communications.Client.Authentication Structs RequestValidationResult The result of the request validation. Interfaces IRequestAuthenticationProvider The authentication provider interface. This is used to authenticate Inbound requests from Microsoft Graph. It validates the request was issued by Microsoft Graph. Outbound requests to Microsoft Graph. Tenant token is acquired to provide Microsoft Graph the permissions the bot has been consented by the tenant admin"
  },
  "core/Microsoft.Graph.Communications.Core.Exceptions.ErrorConstants.Messages.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Exceptions.ErrorConstants.Messages.html",
    "title": "Class ErrorConstants.Messages",
    "keywords": "Class ErrorConstants.Messages Error Messages Inheritance Object ErrorConstants.Messages Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core.Exceptions Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class Messages Fields AuthenticationProviderMissing The authentication provider missing Declaration public const string AuthenticationProviderMissing = \"Authentication provider is required before sending a request.\" Field Value Type Description String BaseUrlMissing The base URL missing Declaration public const string BaseUrlMissing = \"Base URL cannot be null or empty.\" Field Value Type Description String ClientErrorAuthenticatingRequest The client error processing notifications Declaration public const string ClientErrorAuthenticatingRequest = \"Unexpected exception happened on client when authenticating request.\" Field Value Type Description String ClientErrorProcessingNotifications The client error processing notifications Declaration public const string ClientErrorProcessingNotifications = \"Unexpected exception happened on client when processing notification.\" Field Value Type Description String InvalidTypeForDateConverter The invalid type for date converter Declaration public const string InvalidTypeForDateConverter = \"DateConverter can only serialize objects of type Date.\" Field Value Type Description String LocationHeaderNotSetOnRedirect The location header not set on redirect Declaration public const string LocationHeaderNotSetOnRedirect = \"Location header not present in redirection response.\" Field Value Type Description String MessageContentIsEmpty The message content is empty Declaration public const string MessageContentIsEmpty = \"Unexpected empty message content.\" Field Value Type Description String NotificationChangeTypeIsEmpty The notification change type is empty Declaration public const string NotificationChangeTypeIsEmpty = \"No change type specified for the incoming notification.\" Field Value Type Description String NotificationResourceDataIsEmpty The notification resource data is empty Declaration public const string NotificationResourceDataIsEmpty = \"No resource data specified for the incoming notification.\" Field Value Type Description String NotificationResourceNotRecognized The notification resource is not recognized Declaration public const string NotificationResourceNotRecognized = \"Resource in notification is not recognized.\" Field Value Type Description String NotificationResourcePathIsEmpty The notification resource path is empty Declaration public const string NotificationResourcePathIsEmpty = \"No resource path specified for the incoming notification.\" Field Value Type Description String NotificationsAreEmpty The notifications are empty Declaration public const string NotificationsAreEmpty = \"Notifications received from server are empty.\" Field Value Type Description String NotificationUriNotSet The notification URI not set Declaration public const string NotificationUriNotSet = \"Notification URI is not set for the resource.\" Field Value Type Description String OverallTimeoutCannotBeSet The overall timeout cannot be set Declaration public const string OverallTimeoutCannotBeSet = \"Overall timeout cannot be set after the first request is sent.\" Field Value Type Description String RehydrationFailedNotFound The re-hydration failed not found Declaration public const string RehydrationFailedNotFound = \"Rehydration is performed on a resource that doesn't exist.\" Field Value Type Description String RehydrationFailedWithEmptyResource The re-hydration failed with empty resource Declaration public const string RehydrationFailedWithEmptyResource = \"Rehydration failed since service returned an empty resource.\" Field Value Type Description String RequestTimedOut The request timed out Declaration public const string RequestTimedOut = \"The request timed out.\" Field Value Type Description String RequestUrlMissing The request URL missing Declaration public const string RequestUrlMissing = \"Request URL is required to send a request.\" Field Value Type Description String TooManyRedirectsFormatString The too many redirects format string Declaration public const string TooManyRedirectsFormatString = \"More than {0} redirects encountered while sending the request.\" Field Value Type Description String UnableToCreateInstanceOfTypeFormatString The unable to create instance of type format string Declaration public const string UnableToCreateInstanceOfTypeFormatString = \"Unable to create an instance of type {0}.\" Field Value Type Description String UnableToDeserializeNotification The unable to deserialize notification Declaration public const string UnableToDeserializeNotification = \"Unable to deserialize the notification.\" Field Value Type Description String UnexpectedExceptionOnSend The unexpected exception on send Declaration public const string UnexpectedExceptionOnSend = \"An error occurred sending the request.\" Field Value Type Description String UnexpectedExceptionResponse The unexpected exception response Declaration public const string UnexpectedExceptionResponse = \"Unexpected exception returned from the service.\" Field Value Type Description String"
  },
  "common/Microsoft.Graph.Communications.Common.Transport.RequestType.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.RequestType.html",
    "title": "Enum RequestType",
    "keywords": "Enum RequestType Type of request that we want to issue on the transport Namespace : Microsoft.Graph.Communications.Common.Transport Assembly : Microsoft.Graph.Communications.Common.dll Syntax public enum RequestType Fields Name Description Create Request to create a resource Delete Request to delete a resource Get Request to get a resource Replace Request to replace a resource Update Request to update a resource Extension Methods AdditionalDataExtensions.SetInAdditionalData(String, Object) Extensions.Pin() Extensions.ChangeType(Type) Extensions.ChangeType<T>() Extensions.TryDispose(IGraphLogger) EnumUtils.GetDescription() ReflectionUtils.GetPropertyUsingReflection(String) ReflectionUtils.SetPropertyUsingReflection(String, Object) Validator.IsNull(String, String) Validator.NotNull<RequestType>(String, String) Validator.Equals<RequestType>(RequestType, String, String) Validator.Equals<RequestType, TE>(RequestType, String) Validator.NotEquals<RequestType>(RequestType, String, String) GraphRequestExtensions.ToHttpMethod()"
  },
  "client/Microsoft.Graph.Communications.Common.Telemetry.LogProperties.ChatData.html": {
    "href": "client/Microsoft.Graph.Communications.Common.Telemetry.LogProperties.ChatData.html",
    "title": "Class LogProperties.ChatData",
    "keywords": "Class LogProperties.ChatData Chat data. Inheritance Object LogProperties.ChatData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class ChatData Constructors ChatData() Declaration public ChatData() Properties ChatId Gets or sets the chat identifier. Declaration public string ChatId { get; set; } Property Value Type Description String TenantId Gets or sets the tenant identifier. Declaration public string TenantId { get; set; } Property Value Type Description String"
  },
  "client/Microsoft.Graph.Communications.Common.Telemetry.LogProperties.CallData.html": {
    "href": "client/Microsoft.Graph.Communications.Common.Telemetry.LogProperties.CallData.html",
    "title": "Class LogProperties.CallData",
    "keywords": "Class LogProperties.CallData Call data. Inheritance Object LogProperties.CallData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class CallData Constructors CallData() Declaration public CallData() Properties CallId Gets or sets the call identifier. Declaration public string CallId { get; set; } Property Value Type Description String TenantId Gets or sets the tenant identifier. Declaration public string TenantId { get; set; } Property Value Type Description String"
  },
  "calls/Microsoft.Graph.Communications.Calls.PlayOperationResult.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.PlayOperationResult.html",
    "title": "Class PlayOperationResult",
    "keywords": "Class PlayOperationResult Class to define parameters required for joining a meeting. Inheritance Object PlayOperationResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public class PlayOperationResult Constructors PlayOperationResult(ResultInfo) Initializes a new instance of the PlayOperationResult class. Declaration public PlayOperationResult(ResultInfo resultInfo) Parameters Type Name Description ResultInfo resultInfo The result information. Properties ResultInfo Gets the result information. Declaration public ResultInfo ResultInfo { get; } Property Value Type Description ResultInfo The result information."
  },
  "common/Microsoft.Graph.Communications.Common.MetricUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.MetricUtils.html",
    "title": "Class MetricUtils",
    "keywords": "Class MetricUtils The metric utils class Inheritance Object MetricUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class MetricUtils Methods MeasureDurationAsync(Func<Task>, Action<Int64>) Mesure the duration of task. Declaration public static Task MeasureDurationAsync(Func<Task> task, Action<long> setMetricTask) Parameters Type Name Description Func < Task > task The task to measure Action < Int64 > setMetricTask The task to set metric Returns Type Description Task The task for wait"
  },
  "common/Microsoft.Graph.Communications.Common.MathUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.MathUtils.html",
    "title": "Class MathUtils",
    "keywords": "Class MathUtils Various math utilities Inheritance Object MathUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class MathUtils Methods CeilingRound(Int32, Int32) Gets the ceiling value after rounding. Declaration public static int CeilingRound(this int n, int round) Parameters Type Name Description Int32 n Value to round up. Int32 round Rounding increment. Returns Type Description Int32 Ceiling value."
  },
  "core/Microsoft.Graph.NotificationsExtensions.html": {
    "href": "core/Microsoft.Graph.NotificationsExtensions.html",
    "title": "Class NotificationsExtensions",
    "keywords": "Class NotificationsExtensions Communications notifications extensions. Inheritance Object NotificationsExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class NotificationsExtensions Methods GetResourceData(CommsNotification) Gets the resource data. Declaration public static object GetResourceData(this CommsNotification notification) Parameters Type Name Description CommsNotification notification The notification. Returns Type Description Object The resource data object for the specified notification. GetResourceData<T>(CommsNotification) Gets the resource data. Declaration public static T GetResourceData<T>(this CommsNotification notification) Parameters Type Name Description CommsNotification notification The notification. Returns Type Description T The resource data T object for the specified notification. Type Parameters Name Description T The expected resource data type. SetResourceData(CommsNotification, Object) Sets the resource data. Declaration public static void SetResourceData(this CommsNotification notification, object data) Parameters Type Name Description CommsNotification notification The notification. Object data The data."
  },
  "common/Microsoft.Graph.Communications.Common.StateMachine-1.Transition.html": {
    "href": "common/Microsoft.Graph.Communications.Common.StateMachine-1.Transition.html",
    "title": "Class StateMachine<TStateEnum>.Transition",
    "keywords": "Class StateMachine<TStateEnum>.Transition Single transition from Source to Targets Inheritance Object StateMachine<TStateEnum>.Transition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public sealed class Transition Constructors Transition(TStateEnum, TStateEnum[]) Initializes a new instance of the StateMachine<TStateEnum>.Transition class. Declaration public Transition(TStateEnum source, params TStateEnum[] targets) Parameters Type Name Description TStateEnum source The source. TStateEnum[] targets The targets. Properties Source Gets the source state. Declaration public TStateEnum Source { get; } Property Value Type Description TStateEnum The source. Targets Gets the target states. Declaration public TStateEnum[] Targets { get; } Property Value Type Description TStateEnum[] The targets. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.GraphUriFilters.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.GraphUriFilters.html",
    "title": "Class GraphUriFilters",
    "keywords": "Class GraphUriFilters Uri filters to filter PII in graph urls. Inheritance Object GraphUriFilters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class GraphUriFilters Constructors GraphUriFilters() Declaration public GraphUriFilters() Properties ChatUriFilters Gets the chat URI filters. Declaration public static List<UriFilter> ChatUriFilters { get; } Property Value Type Description List < UriFilter > Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.ClientLogEventId.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.ClientLogEventId.html",
    "title": "Enum ClientLogEventId",
    "keywords": "Enum ClientLogEventId Event ids for client logs Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public enum ClientLogEventId Fields Name Description ClientHttpTrace The event id for client HTTP trace. ClientTrace The event id for client trace Extension Methods AdditionalDataExtensions.SetInAdditionalData(String, Object) Extensions.Pin() Extensions.ChangeType(Type) Extensions.ChangeType<T>() Extensions.TryDispose(IGraphLogger) EnumUtils.GetDescription() ReflectionUtils.GetPropertyUsingReflection(String) ReflectionUtils.SetPropertyUsingReflection(String, Object) Validator.IsNull(String, String) Validator.NotNull<ClientLogEventId>(String, String) Validator.Equals<ClientLogEventId>(ClientLogEventId, String, String) Validator.Equals<ClientLogEventId, TE>(ClientLogEventId, String) Validator.NotEquals<ClientLogEventId>(ClientLogEventId, String, String)"
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.VideoSendBuffer.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.VideoSendBuffer.html",
    "title": "Class VideoSendBuffer",
    "keywords": "Class VideoSendBuffer Creates a Video Buffer for Send and also implements Dispose Inheritance Object VideoSendBuffer Namespace : Microsoft.Graph.Communications.Calls.Media Assembly : Microsoft.Graph.Communications.Calls.Media.dll Syntax public class VideoSendBuffer : VideoMediaBuffer Constructors VideoSendBuffer(Byte[], UInt32, VideoFormat, Int64) Initializes a new instance of the VideoSendBuffer class. Declaration public VideoSendBuffer(byte[] buffer, uint length, VideoFormat format, long timeStamp = 0L) Parameters Type Name Description Byte [] buffer The buffer. UInt32 length The length. VideoFormat format The format. Int64 timeStamp The time stamp. VideoSendBuffer(IntPtr, Int64, VideoFormat, Int64) Initializes a new instance of the VideoSendBuffer class. Declaration public VideoSendBuffer(IntPtr data, long length, VideoFormat videoFormat, long timeStamp = 0L) Parameters Type Name Description IntPtr data The data. Int64 length The length. VideoFormat videoFormat The video format. Int64 timeStamp The time stamp. Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing"
  },
  "core/Microsoft.Graph.Routing.CloudNamespace.html": {
    "href": "core/Microsoft.Graph.Routing.CloudNamespace.html",
    "title": "Enum CloudNamespace",
    "keywords": "Enum CloudNamespace Enumeration defining various cloud environment type Namespace : Microsoft.Graph.Routing Assembly : Microsoft.Graph.Communications.Core.dll Syntax public enum CloudNamespace Fields Name Description DoD Represents a service running on the DoD cloud installation of NGC or a user homed on the DoD cloud. GCCH Represents a service running on the GCCH cloud installation of NGC or a user homed on the GCCH cloud. NotApplicable Used for users like 'teamsvisitor' or on premise sfb user for whom cloud namespace is not applicable Public Represents a service running on the public cloud installation of NGC or a user homed on the public cloud."
  },
  "common/Microsoft.Graph.Communications.Common.SafeNativeMethods.html": {
    "href": "common/Microsoft.Graph.Communications.Common.SafeNativeMethods.html",
    "title": "Class SafeNativeMethods",
    "keywords": "Class SafeNativeMethods Contains p/invokes and associated wrappers for the Native methods Inheritance Object SafeNativeMethods Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class SafeNativeMethods Methods GetPreciseSystemTime() Gets precise system time Declaration public static DateTime GetPreciseSystemTime() Returns Type Description DateTime Precise system time"
  },
  "client/Microsoft.Graph.Communications.Client.Authentication.RequestValidationResult.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Authentication.RequestValidationResult.html",
    "title": "Struct RequestValidationResult",
    "keywords": "Struct RequestValidationResult The result of the request validation. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.Graph.Communications.Client.Authentication Assembly : Microsoft.Graph.Communications.Client.dll Syntax public struct RequestValidationResult Fields IsValid Indicates whether the request is valid. Declaration public bool IsValid Field Value Type Description Boolean TenantId The tenant id for the incoming request. Declaration public string TenantId Field Value Type Description String"
  },
  "client/Microsoft.Graph.Communications.Client.Authentication.IRequestAuthenticationProvider.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Authentication.IRequestAuthenticationProvider.html",
    "title": "Interface IRequestAuthenticationProvider",
    "keywords": "Interface IRequestAuthenticationProvider The authentication provider interface. This is used to authenticate Inbound requests from Microsoft Graph. It validates the request was issued by Microsoft Graph. Outbound requests to Microsoft Graph. Tenant token is acquired to provide Microsoft Graph the permissions the bot has been consented by the tenant admin Namespace : Microsoft.Graph.Communications.Client.Authentication Assembly : Microsoft.Graph.Communications.Client.dll Syntax public interface IRequestAuthenticationProvider Methods AuthenticateOutboundRequestAsync(HttpRequestMessage, String) Authenticates the specified request message. This method will be called any time there is an outbound request. This method should add any required headers for authentication (eg: Authorization). Declaration Task AuthenticateOutboundRequestAsync(HttpRequestMessage request, string tenant) Parameters Type Name Description HttpRequestMessage request The outbound http request object. String tenant The tenant for which this request belongs to. Returns Type Description Task The Task . SDK awaits on this task to make sure the bot has included the required headers. ValidateInboundRequestAsync(HttpRequestMessage) Validates the inbound request. This method will be called any time we have an incoming request. Returning IsValid false will result in a Forbidden response being created. SDK waits until a successful validation is returned along with tenant data in RequestValidationResult to fire any events. Declaration Task<RequestValidationResult> ValidateInboundRequestAsync(HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request The incoming request. Returns Type Description Task < RequestValidationResult > The RequestValidationResult structure."
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaSession.MediaProperties.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaSession.MediaProperties.html",
    "title": "Class MediaSession.MediaProperties",
    "keywords": "Class MediaSession.MediaProperties Gets the media properties. Inheritance Object MediaSession.MediaProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls.Media Assembly : Microsoft.Graph.Communications.Calls.Media.dll Syntax public class MediaProperties Constructors MediaProperties() Declaration public MediaProperties() Properties MediaSessionId Gets or sets the media session identifier. Declaration public Guid MediaSessionId { get; set; } Property Value Type Description Guid"
  },
  "core/Microsoft.Graph.ContractsConstants.html": {
    "href": "core/Microsoft.Graph.ContractsConstants.html",
    "title": "Class ContractsConstants",
    "keywords": "Class ContractsConstants OData Model Constants Inheritance Object ContractsConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class ContractsConstants"
  },
  "core/Microsoft.Graph.ContractsConstants.Signature.html": {
    "href": "core/Microsoft.Graph.ContractsConstants.Signature.html",
    "title": "Class ContractsConstants.Signature",
    "keywords": "Class ContractsConstants.Signature Signature for Assembly visibility. Inheritance Object ContractsConstants.Signature Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class Signature Fields VisibleToCastle Visible to property added to InternalsVisibleTo Castle signed builds. Declaration public const string VisibleToCastle = \", PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\" Field Value Type Description String VisibleToMicrosoft Visible to property added to InternalsVisibleTo Microsoft signed builds. Declaration public const string VisibleToMicrosoft = \", PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9\" Field Value Type Description String"
  },
  "core/Microsoft.Graph.Communications.Core.Exceptions.ErrorConstants.Codes.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Exceptions.ErrorConstants.Codes.html",
    "title": "Class ErrorConstants.Codes",
    "keywords": "Class ErrorConstants.Codes Error Codes Inheritance Object ErrorConstants.Codes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core.Exceptions Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class Codes Fields BridgeGone Error code indicating the bridge is gone/deleted from the server. Declaration public const string BridgeGone = \"BridgeGone\" Field Value Type Description String ChatGone Error code indicating the chat is gone/deleted from the server. Declaration public const string ChatGone = \"ChatGone\" Field Value Type Description String ClientCallbackError The client callback error code. Declaration public const string ClientCallbackError = \"clientCallbackError\" Field Value Type Description String ClientContextMissing The client context missing error code. Declaration public const string ClientContextMissing = \"clientContextIsMissing\" Field Value Type Description String GeneralException The general exception error code. Declaration public const string GeneralException = \"generalException\" Field Value Type Description String InvalidRequest The invalid request error code. Declaration public const string InvalidRequest = \"invalidRequest\" Field Value Type Description String ItemNotFound The item not found error code. Declaration public const string ItemNotFound = \"itemNotFound\" Field Value Type Description String MismatchedCompletedOperation The mismatched completed operation error code. Declaration public const string MismatchedCompletedOperation = \"mismatchedCompletedOperation\" Field Value Type Description String NotAllowed The not allowed error code. Declaration public const string NotAllowed = \"notAllowed\" Field Value Type Description String OperationFailed The operation failed error code. Declaration public const string OperationFailed = \"operationFailed\" Field Value Type Description String RehydrationFailedWithEmptyResource The re-hydration failed with empty resource error code. Declaration public const string RehydrationFailedWithEmptyResource = \"rehydrationFailedWithEmptyResource\" Field Value Type Description String RehydrationFailedWithNotFound The re-hydration failed with not found error code. Declaration public const string RehydrationFailedWithNotFound = \"rehydrationFailedWithNotFound\" Field Value Type Description String Timeout The timeout error code. Declaration public const string Timeout = \"timeout\" Field Value Type Description String TooManyRedirects The too many redirects error code. Declaration public const string TooManyRedirects = \"tooManyRedirects\" Field Value Type Description String"
  },
  "core/Microsoft.Graph.Communications.Core.CommsGeneratedErrorConstants.html": {
    "href": "core/Microsoft.Graph.Communications.Core.CommsGeneratedErrorConstants.html",
    "title": "Class CommsGeneratedErrorConstants",
    "keywords": "Class CommsGeneratedErrorConstants The generated error constants. Inheritance Object CommsGeneratedErrorConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class CommsGeneratedErrorConstants"
  },
  "core/Microsoft.Graph.Communications.Core.CommsGeneratedErrorConstants.Messages.html": {
    "href": "core/Microsoft.Graph.Communications.Core.CommsGeneratedErrorConstants.Messages.html",
    "title": "Class CommsGeneratedErrorConstants.Messages",
    "keywords": "Class CommsGeneratedErrorConstants.Messages The messages. Inheritance Object CommsGeneratedErrorConstants.Messages Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class Messages Fields ResponseObjectUsedForUpdate Response object used for update error message. Declaration public const string ResponseObjectUsedForUpdate = \"Do not use objects returned in a response for updating an object in Microsoft Graph. Create a new {0} object and only set the updated properties on it.\" Field Value Type Description String"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.html",
    "title": "Enum ObfuscationTag",
    "keywords": "Enum ObfuscationTag Tag used to provide a hint for the type of obfuscation to perform. Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public enum ObfuscationTag Fields Name Description Fqdn FQDN that needs to be obfuscated. An example would be \"lyncfrontend.lync.com\" Generic A generic blob containing sensitive data that must be obfuscated completely. Guid A guid type that has to be obfuscated. Identity The subject of some information whose data needs to be obfuscated. An example would be \"The user {coolgal} is attempting to to perform some action\". MRIs are also considered identities. IpAddress IP address that needs to be obfuscated. An example would be \"187.23.33.1\" Pstn PSTN related information. An example would be a telephone number like \"+10005559999\". Uri Uri that needs to be obfuscated. This can have any scheme like http, https, etc. An example would be \" https://cheatdays.com/fitguy&quot ; This could be either absolute or relative uri. Extension Methods AdditionalDataExtensions.SetInAdditionalData(String, Object) Extensions.Pin() Extensions.ChangeType(Type) Extensions.ChangeType<T>() Extensions.TryDispose(IGraphLogger) EnumUtils.GetDescription() ReflectionUtils.GetPropertyUsingReflection(String) ReflectionUtils.SetPropertyUsingReflection(String, Object) Validator.IsNull(String, String) Validator.NotNull<ObfuscationTag>(String, String) Validator.Equals<ObfuscationTag>(ObfuscationTag, String, String) Validator.Equals<ObfuscationTag, TE>(ObfuscationTag, String) Validator.NotEquals<ObfuscationTag>(ObfuscationTag, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer.html",
    "title": "Class ObfuscationSerializer",
    "keywords": "Class ObfuscationSerializer The obfuscation serializer can be used to serialize and de-serialize an obfuscation schema, as well as generate a schema from specified assemblies. Inheritance Object ObfuscationSerializer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class ObfuscationSerializer Constructors ObfuscationSerializer() Declaration public ObfuscationSerializer() Properties Members Gets or sets the members belonging to the class. Declaration public ObfuscationMember[] Members { get; set; } Property Value Type Description ObfuscationMember [] Methods ExtractFromAssemblies(Assembly[]) Extracts the obfuscation members from the specified assemblies. Declaration public ObfuscationMember[] ExtractFromAssemblies(params Assembly[] assemblies) Parameters Type Name Description Assembly [] assemblies The assemblies. Returns Type Description ObfuscationMember [] The list of ObfuscationMember stucts extracted from the specified assemblies. GenerateSchema(ObfuscationMember[]) Generates the schema from the specified obfuscation members. Declaration public string GenerateSchema(params ObfuscationMember[] members) Parameters Type Name Description ObfuscationMember [] members The obfuscation classes. Returns Type Description String The schema associated with the specified classes. LoadFromSchema(String) Loads the obfuscations classes from the specified schema. Declaration public ObfuscationMember[] LoadFromSchema(string schema) Parameters Type Name Description String schema The schema. Returns Type Description ObfuscationMember [] The loaded obfuscation classes. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.HighResolutionDateTime.html": {
    "href": "common/Microsoft.Graph.Communications.Common.HighResolutionDateTime.html",
    "title": "Class HighResolutionDateTime",
    "keywords": "Class HighResolutionDateTime High resolution datetime Inheritance Object HighResolutionDateTime Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class HighResolutionDateTime Properties IsAvailable Gets a value indicating whether high resolution datetime is available Declaration public static bool IsAvailable { get; } Property Value Type Description Boolean UtcNow Gets UTC now Declaration public static DateTime UtcNow { get; } Property Value Type Description DateTime"
  },
  "common/Microsoft.Graph.Communications.Common.GuidUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.GuidUtils.html",
    "title": "Class GuidUtils",
    "keywords": "Class GuidUtils Guid Utils Inheritance Object GuidUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class GuidUtils Methods EnsureNotEmpty(Guid) Ensures Guid is not empty by generating a random guid if it is empty Declaration public static Guid EnsureNotEmpty(this Guid guid) Parameters Type Name Description Guid guid input guid Returns Type Description Guid A guaranteed guid that is not empty EnsureNotEmpty(Nullable<Guid>) Ensures Guid is not empty by generating a random guid if it is empty Declaration public static Guid EnsureNotEmpty(this Guid? guid) Parameters Type Name Description Nullable < Guid > guid input guid Returns Type Description Guid A guaranteed guid that is not empty ParseOrNew(String) Parse and return the guid if valid else return new guid Declaration public static Guid ParseOrNew(string input) Parameters Type Name Description String input input Returns Type Description Guid Guid of input or new guid"
  },
  "core/Microsoft.Graph.IdentitySetExtensions.html": {
    "href": "core/Microsoft.Graph.IdentitySetExtensions.html",
    "title": "Class IdentitySetExtensions",
    "keywords": "Class IdentitySetExtensions Extentions for graph api contracts Inheritance Object IdentitySetExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class IdentitySetExtensions Fields DodAppParticipantPrefix The application participant prefix for dod cloud Declaration public const string DodAppParticipantPrefix = \"28:dod-global:\" Field Value Type Description String DodDirectoryAppParticipantPrefix The directory application participant prefix for dod cloud Declaration public const string DodDirectoryAppParticipantPrefix = \"28:dod:\" Field Value Type Description String DodDirectoryParticipantPrefix The directory participant prefix for DoD cloud Declaration public const string DodDirectoryParticipantPrefix = \"8:dod:\" Field Value Type Description String DodOnPremisesParticipantPrefix The external prefix for DoD cloud Declaration public const string DodOnPremisesParticipantPrefix = \"8:dod-sfb:\" Field Value Type Description String EncryptedParticipantPrefix The encrypted participant prefix Declaration public const string EncryptedParticipantPrefix = \"29:\" Field Value Type Description String GcchAppParticipantPrefix The application participant prefix for gcch cloud Declaration public const string GcchAppParticipantPrefix = \"28:gcch-global:\" Field Value Type Description String GcchDirectoryAppParticipantPrefix The directory application participant prefix for gcch cloud Declaration public const string GcchDirectoryAppParticipantPrefix = \"28:gcch:\" Field Value Type Description String GcchDirectoryParticipantPrefix The directory participant prefix for GCCH cloud Declaration public const string GcchDirectoryParticipantPrefix = \"8:gcch:\" Field Value Type Description String GcchOnPremisesParticipantPrefix The external prefix for GCCH cloud Declaration public const string GcchOnPremisesParticipantPrefix = \"8:gcch-sfb:\" Field Value Type Description String PhoneParticipantPrefix The phone participant prefix Declaration public const string PhoneParticipantPrefix = \"4:\" Field Value Type Description String PublicAppParticipantPrefix The application participant prefix Declaration public const string PublicAppParticipantPrefix = \"28:\" Field Value Type Description String PublicDirectoryAppParticipantPrefix The directory application participant prefix for public cloud Declaration public const string PublicDirectoryAppParticipantPrefix = \"28:orgid:\" Field Value Type Description String PublicDirectoryParticipantPrefix The directory participant prefix for public cloud Declaration public const string PublicDirectoryParticipantPrefix = \"8:orgid:\" Field Value Type Description String PublicOnPremisesParticipantPrefix The external prefix for public cloud Declaration public const string PublicOnPremisesParticipantPrefix = \"8:sfb:\" Field Value Type Description String SkypeParticipantPrefix The skype participant prefix Declaration public const string SkypeParticipantPrefix = \"8:\" Field Value Type Description String TeamsVisitorParticipantPrefix The teams visitor participant prefix For anonymous users we need to support 8:teamsvisitor:objectId Declaration public const string TeamsVisitorParticipantPrefix = \"8:teamsvisitor:\" Field Value Type Description String Methods CreateIdentitySetByMri(String, String, String) Creates participant from MRI if possible. For chat service thread mris we return null Declaration public static IdentitySet CreateIdentitySetByMri(string mri, string tenantId, string displayName) Parameters Type Name Description String mri Participant MRI String tenantId The tenant identifier. String displayName The display name. Returns Type Description IdentitySet Created identity set Exceptions Type Condition ArgumentOutOfRangeException mri GetAppParticipantPrefix(CloudNamespace) Gets app participant prefix for the provided CloudNamespace . Declaration public static string GetAppParticipantPrefix(CloudNamespace cloudNamespace) Parameters Type Name Description CloudNamespace cloudNamespace The cloud where the app participant belongs Returns Type Description String Prefix to be used to construct the MRI GetDirectoryAppParticipantEnv(CloudNamespace) Returns the env differentiator part of the app participant prefix corresponding to cloudNamespace . This differentiator doesn't have participant prefix (8:, 4:, 28: or 29:) in it. Declaration public static string GetDirectoryAppParticipantEnv(CloudNamespace cloudNamespace) Parameters Type Name Description CloudNamespace cloudNamespace Cloud environment where the identity set belongs Returns Type Description String Env differentiator part of the app participant prefix corresponding to cloudNamespace GetDirectoryAppParticipantPrefix(CloudNamespace) Gets directory app participant prefix for the provided CloudNamespace . Declaration public static string GetDirectoryAppParticipantPrefix(CloudNamespace cloudNamespace) Parameters Type Name Description CloudNamespace cloudNamespace The cloud where the directory app participant belongs Returns Type Description String Prefix to be used to construct the MRI GetDirectoryParticipantPrefix(CloudNamespace) Gets a user prefix for the provided CloudNamespace . Declaration public static string GetDirectoryParticipantPrefix(CloudNamespace cloudNamespace) Parameters Type Name Description CloudNamespace cloudNamespace The cloud where the user belongs Returns Type Description String Prefix to be used to construct the MRI GetEnumerator(IdentitySet) Enumerates through all the Identity objects found in this IdentitySet Declaration public static IEnumerable<KeyValuePair<string, Identity>> GetEnumerator(this IdentitySet identitySet) Parameters Type Name Description IdentitySet identitySet The identity set. Returns Type Description IEnumerable < KeyValuePair < String , Identity >> The IEnumerable{KeyValuePair{string, Identity}} for the specified IdentitySet . GetMri(IdentitySet, CloudNamespace) Gets participant MRI The priority order is: User, Guest, Encrypted, Application Instance, Application, Phone Declaration public static string GetMri(this IdentitySet identitySet, CloudNamespace cloudNamespace) Parameters Type Name Description IdentitySet identitySet Participant identity set CloudNamespace cloudNamespace Cloud environment where the identity set belongs Returns Type Description String Participant MRI GetObjectIdForAppParticipant(String) Get the object id for an app Declaration public static string GetObjectIdForAppParticipant(string mri) Parameters Type Name Description String mri participant mri Returns Type Description String The object id of the participant> GetObjectIdForDirectoryAppParticipant(String) Get the object id for a directory app participant Declaration public static string GetObjectIdForDirectoryAppParticipant(string mri) Parameters Type Name Description String mri participant mri Returns Type Description String The object id of the participant> GetObjectIdForDirectoryParticipant(String) /Get the object id for a directory participant Declaration public static string GetObjectIdForDirectoryParticipant(string mri) Parameters Type Name Description String mri participant mri Returns Type Description String The object id of the participant> GetObjectIdForOnPremisesParticipant(String) /Get the object id for an external participant Declaration public static string GetObjectIdForOnPremisesParticipant(string mri) Parameters Type Name Description String mri participant mri Returns Type Description String The object id of the participant> GetOnPremisesParticipantPrefix(CloudNamespace) Gets an external prefix for the provided CloudNamespace . Declaration public static string GetOnPremisesParticipantPrefix(CloudNamespace cloudNamespace) Parameters Type Name Description CloudNamespace cloudNamespace The cloud where the user belongs Returns Type Description String Prefix to be used to construct the MRI GetPrimaryIdentity(IdentitySet) Gets the primary identity from the specified IdentitySet . The priority order is: User, Guest, Phone, Encrypted, OnPremises, Application Instance, Application Declaration public static Identity GetPrimaryIdentity(this IdentitySet identitySet) Parameters Type Name Description IdentitySet identitySet The identity set. Returns Type Description Identity Primary Identity IsConsumer(IdentitySet) Indicates whether this identity set is a consumer identity. Declaration public static bool IsConsumer(this IdentitySet identitySet) Parameters Type Name Description IdentitySet identitySet The identity set. Returns Type Description Boolean true if the identity is a consumer identity, false otherwise. MriHasAppParticipantPrefix(String) Returns whether a MRI is a directory participant prefix or not. Declaration public static bool MriHasAppParticipantPrefix(string mri) Parameters Type Name Description String mri Participant MRI Returns Type Description Boolean true if mri is a valid directory participant prefix MriHasDirectoryAppParticipantPrefix(String) Returns whether a MRI is a directory participant prefix or not. Declaration public static bool MriHasDirectoryAppParticipantPrefix(string mri) Parameters Type Name Description String mri Participant MRI Returns Type Description Boolean true if mri is a valid directory participant prefix MriHasDirectoryParticipantPrefix(String) Returns whether a MRI is a directory participant prefix or not. Declaration public static bool MriHasDirectoryParticipantPrefix(string mri) Parameters Type Name Description String mri Participant MRI Returns Type Description Boolean true if mri is a valid directory participant prefix MriHasOnPremisesParticipantPrefix(String) Returns whether a MRI is an external participant prefix or not. Declaration public static bool MriHasOnPremisesParticipantPrefix(string mri) Parameters Type Name Description String mri Participant MRI Returns Type Description Boolean true if mri is a valid external participant prefix"
  },
  "calls/Microsoft.Graph.Communications.Calls.ParticipantExtensions.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.ParticipantExtensions.html",
    "title": "Class ParticipantExtensions",
    "keywords": "Class ParticipantExtensions Extensions for the stateful participant resource. Inheritance Object ParticipantExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public static class ParticipantExtensions Methods InviteAsync(IParticipantCollection, IdentitySet, String, CancellationToken) Invite a participant into the existing call. Declaration public static Task InviteAsync(this IParticipantCollection participantCollection, IdentitySet identitySet, string replacesCallId = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IParticipantCollection participantCollection The participant collection into which a new participant is being invited. IdentitySet identitySet The identity set of the invited participant. String replacesCallId The replaces call identifier. This is an optional field used for consultative transfer. This is used to bring a participant from an existing call. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. This does not guarantee that the participant has joined. Any updates on the participant collection will be delivered via notification and can be observed using IParticipantCollection.OnUpdated Exceptions Type Condition ArgumentNullException If IdentitySet is null."
  },
  "calls/Microsoft.Graph.Communications.Calls.JoinMeetingParameters.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.JoinMeetingParameters.html",
    "title": "Class JoinMeetingParameters",
    "keywords": "Class JoinMeetingParameters Class to define parameters required for joining a meeting. Inheritance Object JoinMeetingParameters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public class JoinMeetingParameters Constructors JoinMeetingParameters(ChatInfo, MeetingInfo, IMediaSession) Initializes a new instance of the JoinMeetingParameters class. Use this constructor for app hosted media. Declaration public JoinMeetingParameters(ChatInfo chatInfo, MeetingInfo meetingInfo, IMediaSession mediaSession) Parameters Type Name Description ChatInfo chatInfo The chat information. MeetingInfo meetingInfo The meeting information. IMediaSession mediaSession The media session. JoinMeetingParameters(ChatInfo, MeetingInfo, IEnumerable<Modality>, IEnumerable<MediaInfo>) Initializes a new instance of the JoinMeetingParameters class. Use this constructor for service hosted media. Declaration public JoinMeetingParameters(ChatInfo chatInfo, MeetingInfo meetingInfo, IEnumerable<Modality> requestedModalities, IEnumerable<MediaInfo> prefetchPrompts = null) Parameters Type Name Description ChatInfo chatInfo The chat information. MeetingInfo meetingInfo The meeting information. IEnumerable < Modality > requestedModalities The list of modalities for the call IEnumerable < MediaInfo > prefetchPrompts The list of media files to prefetch Properties AdditionalData Gets or sets the additional data. Declaration public IDictionary<string, object> AdditionalData { get; set; } Property Value Type Description IDictionary < String , Object > AllowGuestToBypassLobby Gets or sets a value indicating whether to bypass lobby when joining a group call as guest. Declaration public bool? AllowGuestToBypassLobby { get; set; } Property Value Type Description Nullable < Boolean > ChatInfo Gets the chat information. Declaration public ChatInfo ChatInfo { get; } Property Value Type Description ChatInfo CorrelationId Gets or sets the correlation identifier. Declaration [Obsolete(\"Please use AddAsync(JoinMeetingParameters parameters, Guid scenarioId).\")] public Guid CorrelationId { get; set; } Property Value Type Description Guid GuestIdentity Gets or sets the guest identity. Declaration public Identity GuestIdentity { get; set; } Property Value Type Description Identity MediaSession Gets the media session. Declaration public IMediaSession MediaSession { get; } Property Value Type Description IMediaSession MeetingInfo Gets the meeting information. Declaration public MeetingInfo MeetingInfo { get; } Property Value Type Description MeetingInfo PrefetchPrompts Gets the list of media files to prefetch. Declaration public IEnumerable<MediaInfo> PrefetchPrompts { get; } Property Value Type Description IEnumerable < MediaInfo > RequestedModalities Gets the list of modalities to join the call with. Declaration public IEnumerable<Modality> RequestedModalities { get; } Property Value Type Description IEnumerable < Modality > Subject Gets or sets the subject. Declaration public string Subject { get; set; } Property Value Type Description String TenantId Gets or sets the tenant id Declaration public string TenantId { get; set; } Property Value Type Description String"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.html",
    "title": "Namespace Microsoft.Graph.Communications.Common.Telemetry.HttpLogging",
    "keywords": "Namespace Microsoft.Graph.Communications.Common.Telemetry.HttpLogging Classes HttpLogData The log data for http trace. HttpObfuscationHelpers Static class that provides helper functions for HTTP Logging."
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpObfuscationHelpers.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpObfuscationHelpers.html",
    "title": "Class HttpObfuscationHelpers",
    "keywords": "Class HttpObfuscationHelpers Static class that provides helper functions for HTTP Logging. Inheritance Object HttpObfuscationHelpers Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class HttpObfuscationHelpers Methods GetUrlText(Uri, Boolean, IEnumerable<UriFilter>, IObfuscationEngine) Converts the URL to its representation depending on the filters. Declaration public static string GetUrlText(Uri url, bool obfuscationEnabled, IEnumerable<UriFilter> uriFilters = null, IObfuscationEngine engine = null) Parameters Type Name Description Uri url The URL. Boolean obfuscationEnabled if set to true [filter pii]. IEnumerable < UriFilter > uriFilters The URI filters. IObfuscationEngine engine Custom obfuscation engine. If null, use (redacted) Returns Type Description String String representation LogHeaderText(ObfuscationConfiguration, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) Logs the header text. Declaration public static IEnumerable<string> LogHeaderText(this ObfuscationConfiguration configuration, IEnumerable<KeyValuePair<string, IEnumerable<string>>> headers) Parameters Type Name Description ObfuscationConfiguration configuration The configuration. IEnumerable < KeyValuePair < String , IEnumerable < String >>> headers The headers. Returns Type Description IEnumerable < String > The obfuscated header and value pairs. LogHeaderText(ObfuscationConfiguration, String, IEnumerable<String>) Logs the header text. Declaration public static string LogHeaderText(this ObfuscationConfiguration configuration, string headerName, IEnumerable<string> headerValues) Parameters Type Name Description ObfuscationConfiguration configuration The configuration. String headerName Name of the header. IEnumerable < String > headerValues The header values. Returns Type Description String The obfuscated header and value pair."
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.ILogEventFormatter.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.ILogEventFormatter.html",
    "title": "Interface ILogEventFormatter",
    "keywords": "Interface ILogEventFormatter Interface to format log event. Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface ILogEventFormatter Methods Format(LogEvent) Format the log event. Declaration string Format(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The log event Returns Type Description String The formatted text. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "core/Microsoft.Graph.Communications.Core.CommsConstants.HttpPropertyNames.html": {
    "href": "core/Microsoft.Graph.Communications.Core.CommsConstants.HttpPropertyNames.html",
    "title": "Class CommsConstants.HttpPropertyNames",
    "keywords": "Class CommsConstants.HttpPropertyNames Constants used for HTTP property names Inheritance Object CommsConstants.HttpPropertyNames Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class HttpPropertyNames Fields ResponseHeaders The Response Headers string Declaration public const string ResponseHeaders = \"responseHeaders\" Field Value Type Description String StatusCode The Status Code string Declaration public const string StatusCode = \"statusCode\" Field Value Type Description String"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.LogEvent.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.LogEvent.html",
    "title": "Class LogEvent",
    "keywords": "Class LogEvent Log data Inheritance Object LogEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class LogEvent Constructors LogEvent() Declaration public LogEvent() Properties CallerInfo Gets or sets the caller information Declaration public CallerInfo CallerInfo { get; set; } Property Value Type Description CallerInfo CallerInfoString Gets the caller information string. Declaration public string CallerInfoString { get; } Property Value Type Description String Component Gets or sets the component in which the log is created. Declaration public string Component { get; set; } Property Value Type Description String CorrelationId Gets or sets the correlation id Declaration public Guid CorrelationId { get; set; } Property Value Type Description Guid EventType Gets or sets the type of the event. Declaration public LogEventType EventType { get; set; } Property Value Type Description LogEventType Level Gets or sets the trace level of the event. Declaration public TraceLevel Level { get; set; } Property Value Type Description TraceLevel LogicalThreadId Gets or sets the logical thread identifier. Declaration public uint LogicalThreadId { get; set; } Property Value Type Description UInt32 ManagedThreadId Gets or sets the thread ID. Declaration public int ManagedThreadId { get; set; } Property Value Type Description Int32 Message Gets or sets the Description of the event. Declaration public string Message { get; set; } Property Value Type Description String ProcessId Gets or sets the process ID. Declaration public int ProcessId { get; set; } Property Value Type Description Int32 Properties Gets or sets the Custom properties for the event. Declaration public IReadOnlyDictionary<Type, object> Properties { get; set; } Property Value Type Description IReadOnlyDictionary < Type , Object > PropertiesString Gets the custom properties in string format. Declaration public string PropertiesString { get; } Property Value Type Description String RequestId Gets or sets the request identifier. Declaration public Guid RequestId { get; set; } Property Value Type Description Guid Timestamp Gets or sets the Timestamp of the event. Declaration public DateTime Timestamp { get; set; } Property Value Type Description DateTime Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String) LoggingExtensions.GetTypedProperties(LogEvent, Type) LoggingExtensions.GetTypedProperty<T>(LogEvent)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.html",
    "title": "Class JsonConverters",
    "keywords": "Class JsonConverters Json converters. Inheritance Object JsonConverters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class JsonConverters"
  },
  "calls/Microsoft.Graph.Communications.Calls.ICallCollection.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.ICallCollection.html",
    "title": "Interface ICallCollection",
    "keywords": "Interface ICallCollection The stateful call collection interface. Inherited Members IDisposable.Dispose() IReadOnlyCollection<ICall>.Count IEnumerable<ICall>.GetEnumerator() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public interface ICallCollection : IResourceCollection<ICallCollection, ICall, Call>, IResourceCollection<ICall, Call>, IResourceCollection, IResourceBase, IDisposable, IReadOnlyCollection<ICall>, IEnumerable<ICall>, IEnumerable Methods AddAsync(Call, IMediaSession, Guid, CancellationToken) Create a new call and add to the collection. Declaration Task<ICall> AddAsync(Call resource, IMediaSession mediaSession = null, Guid scenarioId = default(Guid), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Call resource The call resource to be added. IMediaSession mediaSession The media session object, if any. This is valid only for application hosted media scenarios. Guid scenarioId The scenario identitifer. This parameter should be used for tracking scenarios across multiple calls. Automatically generated by the SDK if not provided. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < ICall > The ICall that has been created. This call has not yet been established and those notifications will fire on ICall.OnUpdated Events OnIncoming The incoming call event. This event is triggered when a new call is being received by the bot. Declaration event CollectionEventHandler<ICallCollection, ICall> OnIncoming Event Type Type Description CollectionEventHandler < ICallCollection , ICall > Extension Methods CallCollectionExtensions.AddAsync(ICallCollection, JoinMeetingParameters, Guid, CancellationToken)"
  },
  "calls/Microsoft.Graph.Communications.Calls.CallCollectionExtensions.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.CallCollectionExtensions.html",
    "title": "Class CallCollectionExtensions",
    "keywords": "Class CallCollectionExtensions Extensions for call collections. Inheritance Object CallCollectionExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public static class CallCollectionExtensions Methods AddAsync(ICallCollection, JoinMeetingParameters, Guid, CancellationToken) Join a new meeting with the provided parameters Declaration public static Task<ICall> AddAsync(this ICallCollection callCollection, JoinMeetingParameters parameters, Guid scenarioId = default(Guid), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ICallCollection callCollection The call collection. JoinMeetingParameters parameters The join meeting parameters. Guid scenarioId The scenario identitifer. This parameter should be used for tracking scenarios across multiple calls. Automatically generated by the SDK if not provided. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < ICall > The stateful call object once the call is joined."
  },
  "common/Microsoft.Graph.Communications.Common.Transport.Http.HttpUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Transport.Http.HttpUtils.html",
    "title": "Class HttpUtils",
    "keywords": "Class HttpUtils Utilities for Http transport Inheritance Object HttpUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Transport.Http Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class HttpUtils Methods GetRequestTypeForHttpMethod(String) Gets the type of the request for the given http method. Declaration public static RequestType GetRequestTypeForHttpMethod(string httpMethod) Parameters Type Name Description String httpMethod The HTTP method. Returns Type Description RequestType RequestType corresponding to the httpMethod Exceptions Type Condition InvalidOperationException Thrown if httpMethod has no corresponding RequestType"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine.html",
    "title": "Interface IObfuscationEngine",
    "keywords": "Interface IObfuscationEngine Obfuscation engine that can obfuscate data. Namespace : Microsoft.Graph.Communications.Common.Telemetry.Obfuscation Assembly : Microsoft.Graph.Communications.Common.dll Syntax public interface IObfuscationEngine Properties Enabled Gets a value indicating whether obfuscation is enabled. Declaration bool Enabled { get; } Property Value Type Description Boolean ObfuscationConfiguration Gets or sets the obfuscation configuration. This is also set when configuration is linked to an obfuscation engine. Declaration ObfuscationConfiguration ObfuscationConfiguration { get; set; } Property Value Type Description ObfuscationConfiguration Methods Obfuscate(Object, ObfuscationTag) Obfuscates the specified payload. Declaration string Obfuscate(object payload, ObfuscationTag obfuscationTag) Parameters Type Name Description Object payload The payload. ObfuscationTag obfuscationTag The obfuscation tag. Returns Type Description String Obfuscated data. Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.TaskExtension.html": {
    "href": "common/Microsoft.Graph.Communications.Common.TaskExtension.html",
    "title": "Class TaskExtension",
    "keywords": "Class TaskExtension Extensions for Task Inheritance Object TaskExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class TaskExtension Methods ExpectExceptionAsync(Task, Type) Except an exception Declaration public static Task ExpectExceptionAsync(this Task task, Type expectedEx) Parameters Type Name Description Task task task Type expectedEx expected exception Returns Type Description Task Task representing completion ExpectExceptionAsync<T>(Task<T>, Type) Except an exception Declaration public static Task ExpectExceptionAsync<T>(this Task<T> task, Type expectedEx) Parameters Type Name Description Task <T> task task Type expectedEx expected exception Returns Type Description Task Task representing completion Type Parameters Name Description T type IgnoreExceptionAsync(Task, Type) Ignore exception Declaration public static Task IgnoreExceptionAsync(this Task task, Type exceptionType) Parameters Type Name Description Task task task Type exceptionType exception type Returns Type Description Task Task representing completion IgnoreExceptionAsync<T>(Task<T>, Type) Ignore exception Declaration public static Task<T> IgnoreExceptionAsync<T>(this Task<T> task, Type exceptionType) Parameters Type Name Description Task <T> task task Type exceptionType exception type Returns Type Description Task <T> Task representing completion Type Parameters Name Description T type"
  },
  "common/Microsoft.Graph.Communications.Common.StringUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.StringUtils.html",
    "title": "Class StringUtils",
    "keywords": "Class StringUtils String Utils Inheritance Object StringUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class StringUtils Methods ConvertOrDefault<T>(String, T) Convert string to type or return default Declaration public static T ConvertOrDefault<T>(string value, T defaultValue = null) Parameters Type Name Description String value input value T defaultValue default value Returns Type Description T result of the conversion Type Parameters Name Description T Type of return value EqualsIgnoreCase(String, String) Case insensitive string comparison Declaration public static bool EqualsIgnoreCase(this string valueA, string valueB) Parameters Type Name Description String valueA Input string A String valueB Input string B Returns Type Description Boolean Value indicating whether strings are equal in a case insensitive comparision FromBase64(String) Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Declaration public static byte[] FromBase64(this string data) Parameters Type Name Description String data The string to convert. Returns Type Description Byte [] An array of 8-bit unsigned integers. FromBase64Url(String) Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Declaration public static byte[] FromBase64Url(this string data) Parameters Type Name Description String data The string to convert. Returns Type Description Byte [] An array of 8-bit unsigned integers. GetSHA256Hash(String) Creates a SHA256 hash of the passed string. Declaration public static string GetSHA256Hash(this string input) Parameters Type Name Description String input The input string. Returns Type Description String The SHA256 hash. Join(IEnumerable<String>, String) Concatenates the members of a constructed IEnumerable<T> collection of type String , using the specified separator between each member. Declaration public static string Join(this IEnumerable<string> values, string separator) Parameters Type Name Description IEnumerable < String > values A collection that contains the strings to concatenate. String separator The string to use as a separator. separator is included in the returned string only if values has more than one element. Returns Type Description String A string that consists of the members of values delimited by the separator string. If values has no members, the method returns Empty . NamespaceInCamelCase(String) Returns a namespace in camel case. Declaration public static string NamespaceInCamelCase(this string value) Parameters Type Name Description String value Value to convert. Returns Type Description String The namespace string in camel case. NamespaceInPascalCase(String) Returns a namespace in pascal case. Declaration public static string NamespaceInPascalCase(this string value) Parameters Type Name Description String value Value to convert. Returns Type Description String The namespace string in pascal case. SafeFormat(String, Object[]) Format a string with arguments. Declaration public static string SafeFormat(this string text, params object[] args) Parameters Type Name Description String text Format string. Object [] args Optional arguments. Returns Type Description String Formatted string. ToBase64(ArraySegment<Byte>, Nullable<Int32>, Nullable<Int32>) Convert array segment to base 64 representation. Declaration public static string ToBase64(this ArraySegment<byte> data, int? offset = default(int? ), int? count = default(int? )) Parameters Type Name Description ArraySegment < Byte > data Data to convert. Nullable < Int32 > offset Optional override offset. Nullable < Int32 > count Optional override count. Returns Type Description String Base 64 encoded string. ToBase64(Byte[]) Convert byte array to base64. Declaration public static string ToBase64(this byte[] data) Parameters Type Name Description Byte [] data The data. Returns Type Description String Base64 representation. ToBase64Url(ArraySegment<Byte>, Nullable<Int32>, Nullable<Int32>) Convert array segment to base 64 URL representation. Declaration public static string ToBase64Url(this ArraySegment<byte> data, int? offset = default(int? ), int? count = default(int? )) Parameters Type Name Description ArraySegment < Byte > data Data to convert. Nullable < Int32 > offset Optional override offset. Nullable < Int32 > count Optional override count. Returns Type Description String Base 64 encoded string. ToCamelCase(String) Converts value to camel casing. Declaration public static string ToCamelCase(this string value) Parameters Type Name Description String value Value to convert. Returns Type Description String Returns string in camel case. ToPascalCase(String) Converts value to pascal casing. Declaration public static string ToPascalCase(this string value) Parameters Type Name Description String value Value to convert. Returns Type Description String Returns string in pascal case. TrimEnd(String, String) Remove a substring from the end of a given string. This is called iteratively. Declaration public static string TrimEnd(this string target, string trimString) Parameters Type Name Description String target The target. String trimString The trim string. Returns Type Description String The string after being trimmed. TrimStart(String, String) Remove a substring from the beginning of a given string. This is called iteratively. Declaration public static string TrimStart(this string target, string trimString) Parameters Type Name Description String target The target. String trimString The trim string. Returns Type Description String The string after being trimmed."
  },
  "core/Microsoft.Graph.ContractsConstants.AuthConstants.html": {
    "href": "core/Microsoft.Graph.ContractsConstants.AuthConstants.html",
    "title": "Class ContractsConstants.AuthConstants",
    "keywords": "Class ContractsConstants.AuthConstants Various constants used by the AuthZ layer Inheritance Object ContractsConstants.AuthConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class AuthConstants Fields ConsumerTenantIds list of tenant ids that are considered as skype consumer tenants Declaration public static readonly ICollection<string> ConsumerTenantIds Field Value Type Description ICollection < String >"
  },
  "core/Microsoft.Graph.Communications.Core.html": {
    "href": "core/Microsoft.Graph.Communications.Core.html",
    "title": "Namespace Microsoft.Graph.Communications.Core",
    "keywords": "Namespace Microsoft.Graph.Communications.Core Classes CommsConstants The communications constants. CommsConstants.HttpPropertyNames Constants used for HTTP property names CommsGeneratedErrorConstants The generated error constants. CommsGeneratedErrorConstants.Codes The codes CommsGeneratedErrorConstants.Messages The messages. GraphModelExtensions Generic graph model extensions."
  },
  "core/Microsoft.Graph.Communications.Core.CommsGeneratedErrorConstants.Codes.html": {
    "href": "core/Microsoft.Graph.Communications.Core.CommsGeneratedErrorConstants.Codes.html",
    "title": "Class CommsGeneratedErrorConstants.Codes",
    "keywords": "Class CommsGeneratedErrorConstants.Codes The codes Inheritance Object CommsGeneratedErrorConstants.Codes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class Codes Fields NotAllowed Not allowed error code. Declaration public const string NotAllowed = \"notAllowed\" Field Value Type Description String"
  },
  "core/Microsoft.Graph.Communications.Core.CommsConstants.html": {
    "href": "core/Microsoft.Graph.Communications.Core.CommsConstants.html",
    "title": "Class CommsConstants",
    "keywords": "Class CommsConstants The communications constants. Inheritance Object CommsConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class CommsConstants"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.html",
    "title": "Class CallerInfo",
    "keywords": "Class CallerInfo Class that encapsulates the caller's (creator's) information Inheritance Object CallerInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class CallerInfo Constructors CallerInfo(String, String, Int32) Initializes a new instance of the CallerInfo class. Declaration public CallerInfo(string memberName = \"\", string filePath = \"\", int lineNumber = 0) Parameters Type Name Description String memberName Name of the member. String filePath The file path. Int32 lineNumber The line number. Methods GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides Object.GetHashCode() ToString() Returns a String that represents the caller info. Declaration public override string ToString() Returns Type Description String A String that represents the caller info. Overrides Object.ToString() Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.AadApplicationIdentity.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.AadApplicationIdentity.html",
    "title": "Class AadApplicationIdentity",
    "keywords": "Class AadApplicationIdentity The application identity in Azure AD. Inheritance Object AadApplicationIdentity Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class AadApplicationIdentity Remarks For better logging experience, all property names should be specific enough. Avoid using generic name such as Id, Name, etc. Constructors AadApplicationIdentity() Declaration public AadApplicationIdentity() Properties AppId Gets or sets the id of application. Declaration public string AppId { get; set; } Property Value Type Description String AppName Gets or sets the name of application. Declaration public string AppName { get; set; } Property Value Type Description String Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.AudioSendBuffer.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.AudioSendBuffer.html",
    "title": "Class AudioSendBuffer",
    "keywords": "Class AudioSendBuffer Creates an Audio Buffer for Send and also implements Dispose Inheritance Object AudioSendBuffer Namespace : Microsoft.Graph.Communications.Calls.Media Assembly : Microsoft.Graph.Communications.Calls.Media.dll Syntax public class AudioSendBuffer : AudioMediaBuffer Constructors AudioSendBuffer(IntPtr, Int64, AudioFormat, Int64) Initializes a new instance of the AudioSendBuffer class. Declaration public AudioSendBuffer(IntPtr data, long length, AudioFormat audioFormat, long timeStamp = 0L) Parameters Type Name Description IntPtr data The buffer data. Int64 length The length of the buffer. AudioFormat audioFormat The audio format. Int64 timeStamp The time stamp. Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing"
  },
  "calls/Microsoft.Graph.Communications.Calls.IMediaSession.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.IMediaSession.html",
    "title": "Interface IMediaSession",
    "keywords": "Interface IMediaSession The IMediaSession interface. For local media scenarios, this session object represents the modalities and the media configuration. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public interface IMediaSession : IDisposable Properties MediaSessionId Gets the id of this media session. Declaration Guid MediaSessionId { get; } Property Value Type Description Guid Modalities Gets the supported modalities Declaration Modality[] Modalities { get; } Property Value Type Description Modality [] Methods GetMediaConfiguration() Get the media configuration Declaration JObject GetMediaConfiguration() Returns Type Description Newtonsoft.Json.Linq.JObject A Newtonsoft.Json.Linq.JObject produced by the Media library."
  },
  "core/Microsoft.Graph.IdentityExtensions.html": {
    "href": "core/Microsoft.Graph.IdentityExtensions.html",
    "title": "Class IdentityExtensions",
    "keywords": "Class IdentityExtensions Extensions for graph api contracts Inheritance Object IdentityExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class IdentityExtensions Methods GetApplicationInstance(IdentitySet) Gets the application instance identity from identity set. This is part of additional data. Declaration public static Identity GetApplicationInstance(this IdentitySet identitySet) Parameters Type Name Description IdentitySet identitySet The identity set. Returns Type Description Identity Identity GetEncrypted(IdentitySet) Get the encrypted identity part of the additional data This identity must be retrieved when other identities are not listed Declaration public static Identity GetEncrypted(this IdentitySet identity) Parameters Type Name Description IdentitySet identity The identity Returns Type Description Identity The encrypted identity GetGuest(IdentitySet) Gets the guest identity from identity set. This is part of additional data. Declaration public static Identity GetGuest(this IdentitySet identitySet) Parameters Type Name Description IdentitySet identitySet The identity set. Returns Type Description Identity Identity GetIdentityProvider(Identity) Gets the identity provider. Declaration public static string GetIdentityProvider(this Identity identity) Parameters Type Name Description Identity identity The identity. Returns Type Description String The identity provider string. GetOnPremises(IdentitySet) Gets the on-premises identity from identity set. This is part of additional data. Declaration public static Identity GetOnPremises(this IdentitySet identitySet) Parameters Type Name Description IdentitySet identitySet The identity set. Returns Type Description Identity Identity GetPhone(IdentitySet) Gets the phone identity from identity set. This is part of additional data. Declaration public static Identity GetPhone(this IdentitySet identitySet) Parameters Type Name Description IdentitySet identitySet The identity set. Returns Type Description Identity Identity GetTenantId(Identity) Gets the tenant identifier. Declaration public static string GetTenantId(this Identity identity) Parameters Type Name Description Identity identity The identity. Returns Type Description String The tenant identifier string. SetApplicationInstance(IdentitySet, Identity) Sets the application instance identity in identity set. This is part of additional data. Declaration public static void SetApplicationInstance(this IdentitySet identitySet, Identity identity) Parameters Type Name Description IdentitySet identitySet The identity set. Identity identity The identity. SetEncrypted(IdentitySet, Identity) Sets the encrypted identity to the additional data This identity must be retrieved when other identities are not listed Declaration public static void SetEncrypted(this IdentitySet identitySet, Identity identity) Parameters Type Name Description IdentitySet identitySet The identity set. Identity identity The identity SetGuest(IdentitySet, Identity) Sets the guest identity in identity set. This is part of additional data. Declaration public static void SetGuest(this IdentitySet identitySet, Identity identity) Parameters Type Name Description IdentitySet identitySet The identity set. Identity identity The identity. SetIdentityProvider(Identity, String) Sets the identity provider. Declaration public static void SetIdentityProvider(this Identity identity, string identityProvider) Parameters Type Name Description Identity identity The identity. String identityProvider The identity provider. SetPhone(IdentitySet, Identity) Sets the phone identity in identity set. This is part of additional data. Declaration public static void SetPhone(this IdentitySet identitySet, Identity identity) Parameters Type Name Description IdentitySet identitySet The identity set. Identity identity The identity. SetTenantId(Identity, String) Sets the tenant identifier. Declaration public static void SetTenantId(this Identity identity, string tenantId) Parameters Type Name Description Identity identity The identity. String tenantId The tenant identifier."
  },
  "client/Microsoft.Graph.Communications.Client.Transport.GraphClientContext.html": {
    "href": "client/Microsoft.Graph.Communications.Client.Transport.GraphClientContext.html",
    "title": "Class GraphClientContext",
    "keywords": "Class GraphClientContext The context for the graph client wrapper. Inheritance Object GraphClientContext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Client.Transport Assembly : Microsoft.Graph.Communications.Client.dll Syntax public class GraphClientContext Constructors GraphClientContext() Declaration public GraphClientContext() Properties ScenarioId Gets or sets the scenario identifier. Declaration public Guid ScenarioId { get; set; } Property Value Type Description Guid TenantId Gets or sets the tenant. Declaration public string TenantId { get; set; } Property Value Type Description String"
  },
  "calls/Microsoft.Graph.Communications.Calls.RecordOperationResult.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.RecordOperationResult.html",
    "title": "Class RecordOperationResult",
    "keywords": "Class RecordOperationResult Class to define parameters required for joining a meeting. Inheritance Object RecordOperationResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public class RecordOperationResult Constructors RecordOperationResult(String, String, ResultInfo) Initializes a new instance of the RecordOperationResult class. Declaration public RecordOperationResult(string recordingLocation, string recordingAccessToken, ResultInfo resultInfo) Parameters Type Name Description String recordingLocation The location of the recording. String recordingAccessToken Token to access the recording. ResultInfo resultInfo The result information. Properties RecordingAccessToken Gets the recording access token required to retrieve the recording. Declaration public string RecordingAccessToken { get; } Property Value Type Description String RecordingLocation Gets the recording location. Link to the \"live raw stream as it is being recorded\" or \"recorded stream after it’s recorded\". Client need to call GET request on this link passing RecordingAccessToken as bearer token in order to download the stream. Declaration public string RecordingLocation { get; } Property Value Type Description String ResultInfo Gets the result information. Declaration public ResultInfo ResultInfo { get; } Property Value Type Description ResultInfo The result information."
  },
  "core/Microsoft.Graph.ContractsConstants.NotificationProperties.html": {
    "href": "core/Microsoft.Graph.ContractsConstants.NotificationProperties.html",
    "title": "Class ContractsConstants.NotificationProperties",
    "keywords": "Class ContractsConstants.NotificationProperties Notification properties constants Inheritance Object ContractsConstants.NotificationProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class NotificationProperties Fields ResourceData The resource data Declaration public const string ResourceData = \"resourceData\" Field Value Type Description String"
  },
  "core/Microsoft.Graph.ContractsConstants.IdentityProperties.html": {
    "href": "core/Microsoft.Graph.ContractsConstants.IdentityProperties.html",
    "title": "Class ContractsConstants.IdentityProperties",
    "keywords": "Class ContractsConstants.IdentityProperties Identity properties constants Inheritance Object ContractsConstants.IdentityProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class IdentityProperties Fields ApplicationInstance The application instance identity. Declaration public const string ApplicationInstance = \"applicationInstance\" Field Value Type Description String Encrypted The encrypted identity. Declaration public const string Encrypted = \"encrypted\" Field Value Type Description String Guest The guest identity. Declaration public const string Guest = \"guest\" Field Value Type Description String Hidden The hidden identity. Declaration public const string Hidden = \"hidden\" Field Value Type Description String IdentityProvider The identity provider TODO: Deprecated Declaration public const string IdentityProvider = \"identityProvider\" Field Value Type Description String IdentityProviderAAD The AAD identity provider TODO: Deprecated Declaration public const string IdentityProviderAAD = \"AAD\" Field Value Type Description String IdentityProviderMSA The MSA identity provider TODO: Deprecated Declaration public const string IdentityProviderMSA = \"MSA\" Field Value Type Description String IdentityProviderNone The None identity provider TODO: Deprecated Declaration public const string IdentityProviderNone = \"None\" Field Value Type Description String OnPremises The on-premises identity. Declaration public const string OnPremises = \"onPremises\" Field Value Type Description String Phone The phone identity. Declaration public const string Phone = \"phone\" Field Value Type Description String TenantId The tenant identity. Declaration public const string TenantId = \"tenantId\" Field Value Type Description String"
  },
  "core/Microsoft.Graph.ContractsConstants.EntityContainerNames.html": {
    "href": "core/Microsoft.Graph.ContractsConstants.EntityContainerNames.html",
    "title": "Class ContractsConstants.EntityContainerNames",
    "keywords": "Class ContractsConstants.EntityContainerNames Singleton/EntitySet constants Inheritance Object ContractsConstants.EntityContainerNames Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class EntityContainerNames Fields Application The application singleton root. Compatible for old path. Declaration public const string Application = \"app\" Field Value Type Description String CallRecords The \"callRecords\" Declaration public const string CallRecords = \"callRecords\" Field Value Type Description String Communications The communications singleton for v1. Declaration public const string Communications = \"communications\" Field Value Type Description String Me The \"me\" Declaration public const string Me = \"me\" Field Value Type Description String Presence The \"presence\" Declaration public const string Presence = \"presence\" Field Value Type Description String Users The users Declaration public const string Users = \"users\" Field Value Type Description String"
  },
  "core/Microsoft.Graph.ContractsConstants.CallProperties.html": {
    "href": "core/Microsoft.Graph.ContractsConstants.CallProperties.html",
    "title": "Class ContractsConstants.CallProperties",
    "keywords": "Class ContractsConstants.CallProperties Call properties constants Inheritance Object ContractsConstants.CallProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class CallProperties Fields AllowGuestToBypassLobby The lobbyBypass value for group call join. Declaration public const string AllowGuestToBypassLobby = \"allowGuestToBypassLobby\" Field Value Type Description String"
  },
  "core/Microsoft.Graph.Communications.Core.Exceptions.ErrorConstants.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Exceptions.ErrorConstants.html",
    "title": "Class ErrorConstants",
    "keywords": "Class ErrorConstants Error Constants Inheritance Object ErrorConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core.Exceptions Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class ErrorConstants"
  },
  "core/index.html": {
    "href": "core/index.html",
    "title": "Graph Communications Core SDK",
    "keywords": "Graph Communications Core SDK This library contains the common contracts and helpers not present in Microsoft.Graph SDK . The Core components can be found in the Microsoft.Graph namespace. Select a class on the left to dive into the reference docs Accompanying Information Accessing the Microsoft Teams Service through a Microsoft API Cloud Video Interop (CVI) partners and contact centers may integrate with Microsoft Teams to aid their solution. Contact centers may route calls to Microsoft Teams but may not build a separate or independent communications related solution while using Microsoft Teams as a base for the solution."
  },
  "common/index.html": {
    "href": "common/index.html",
    "title": "Graph Common Utilities Documentation",
    "keywords": "Graph Common Utilities Documentation This is the documentation for Microsoft.Graph.Communications.Common nuget package. This is the nuget containing all the utilities used throughout the Communications SDK. It contains telemetry, http, obfuscation support along with helper methods. For more information on logging please see the graph logger guide Select a class on the left to dive into the reference docs"
  },
  "calls_media/index.html": {
    "href": "calls_media/index.html",
    "title": "Graph Communications Media SDK",
    "keywords": "Graph Communications Media SDK The Media components can be found in the Microsoft.Graph.Communications.Calls.Media namespace. More information of utilizing Real-time Media Calling functionality in bots can be found here This is presented as an extension on top of the Graph Communications Calling SDK to provide extra functionalities with Microsoft.Skype.Bots.Media library. IMediaSession The Media SDK provides very light integration with the Microsoft.Skype.Bots.Media library. There are only a few pieces of data that the signaling SDK requires to integrate with the media libraries. As a convenience the Media SDK provides an IMediaSession generator . For greater customization of media libraries developers are welcome to exclude this package and implement their own IMediaSession . Media Requirements The Communications SDK is quite flexible, however, the media library has it's own set of Requirements . Local Testing Local testing of Application Hosted Media scenarios is possible in some environments. Please refer to the testing guide to enable local testing. Select a class on the left to dive into the reference docs Accompanying Information Accessing the Microsoft Teams Service through a Microsoft API Cloud Video Interop (CVI) partners and contact centers may integrate with Microsoft Teams to aid their solution. Contact centers may route calls to Microsoft Teams but may not build a separate or independent communications related solution while using Microsoft Teams as a base for the solution."
  },
  "calls/index.html": {
    "href": "calls/index.html",
    "title": "Graph Communications Calling SDK",
    "keywords": "Graph Communications Calling SDK The Calling components can be found in the Microsoft.Graph.Communications.Calls namespace. State Management The Graph Communications Calling SDK exposes a different set of APIs to manage states of resources in memory. Bots built using this SDK need to register event handlers for each newly created resource in order to be informed of any changes happening on that resource. The strengths and limitations of each are further explained in the State Management article. Media Session For calls with locally hosted media the ICallCollection has an extended AddAsync method which expects an IMediaSession object. This object contains the IAudioSocket and IVideoSocket composition. The IMediaSession also knows how to construct the MediaConfiguration required by the back end services to enable the AV stream to flow through the call instance. A Media Extension SDK has been added on top of this SDK to support locally hosted media scenarios. To use this extension the ICommunicationsClient must be built with MediaCommunicationsClientBuilderExtensions.SetMediaPlatformSettings . The MediaCommunicationsClientExtensions.CreateMediaSession extension method facilitates the creation of IMediaSession objects. Please see the calls with locally hosted media article for more information on the IMediaSession object. Select a class on the left to dive into the reference docs Accompanying Information Accessing the Microsoft Teams Service through a Microsoft API Cloud Video Interop (CVI) partners and contact centers may integrate with Microsoft Teams to aid their solution. Contact centers may route calls to Microsoft Teams but may not build a separate or independent communications related solution while using Microsoft Teams as a base for the solution."
  },
  "articles/calls/StateManagement.html": {
    "href": "articles/calls/StateManagement.html",
    "title": "State Management",
    "keywords": "State Management All states of resources associated with a Call in the Graph Communications Calling SDK are handled internally. The notifications and events for a particular ICall or a particular resource contained in ICall are always received on a single application instance. This means that the instance should be maintaining the state of a call in memory and a single ICall object exists throughout the duration of the call. These are called Stateful calls and the bots are called Stateful bots. The notification or events for any call can hit any instance of the application. This means that everytime a notification comes to an instance, a new Call object is created by the Graph Communications Calling Core SDK and is destroyed once the notification/event has been handled. Any state required for the call should be maintained by the bot logic. These type of bots are called Stateless bots signifying that the Graph Communications Calling Core SDK itself does not maintain any state for the bot. Differences Between Stateless and Stateful Bots The major difference between Stateless and Stateful bots is that maintaining Stateful bots requires that the bot instance would not go down when a call is in progress. If the instance goes down, the call object is lost and no notifications or events are received by the Graph Communications Calling SDK and the calls gets dropped by the server. On the contrast, in Stateless bots, even if the bot instance goes down, the events and notifications go to the other instances of the bot and the bot can continue its logic. Important In Application Hosted Media Calls , the media is handled by a single instance of the bot. Therefore, all the notifications should reach the same instance of the bot for signaling of the media to be properly handled. Thus stateless scenarios for Application Hosted Media bots are not supported."
  },
  "articles/calls/serviceHostedMediaCalls.html": {
    "href": "articles/calls/serviceHostedMediaCalls.html",
    "title": "Service Hosted Media Calls",
    "keywords": "Service Hosted Media Calls Service Hosted Media calls are those calls in which the bot offloads the media to the Microsoft infrastructure. This makes the bot much more lightweight, but it cannot access the raw audio/video streams. Creating a Service Hosted Media Call When creating an object of the Call resource, MediaConfig needs to be set to ServiceHostedMediaConfig ."
  },
  "articles/calls/register-calling-bot.html": {
    "href": "articles/calls/register-calling-bot.html",
    "title": "Registering a calling bot",
    "keywords": "Registering a calling bot In this topic you will learn how to register a new Calling Bot. Register your bot in the Azure Bot Service Complete the following steps: Register a bot by creating a Bot Channels Registration through Azure Bot Channel Registration . Once you complete the registration, take a note of the registered config values (Bot Name, Application Id, and Application Secret). You will need these values later in the code samples. In the resource blade, click Channels . Enable the Microsoft Teams channel and enable calling on the Calling tab. Fill in the Webhook (for calling) where you will receive incoming notifications. E.g. https://{your domain}/api/calls . Refer to Connect a bot to channels for more information on how to configure channels. Permissions Add Microsoft Graph permissions for calling to your bot Microsoft Graph exposes granular permissions controlling the access apps have to resources. As a developer, you decide which permissions for Microsoft Graph your app requests. The Microsoft Graph Communications Calling APIs support Application permissions, which are used by apps that run without a signed-in user present; for example, apps that run as background services or bots. Application permissions can only be consented by a tenant administrator. Calling bots and applications have some capabilties that will need tenant administrator consent. Below is a list of those permissions: Permission Display String Description Admin Consent Required Calls.Initiate.All Initiate outgoing 1:1 calls from the app (preview) Allows the app to place outbound calls to a single user and transfer calls to users in your organization's directory, without a signed-in user. Yes Calls.InitiateGroupCall.All Initiate outgoing group calls from the app (preview) Allows the app to place outbound calls to multiple users and add participants to meetings in your organization, without a signed-in user. Yes Calls.JoinGroupCall.All Join Group Calls and Meetings as an app (preview) Allows the app to join group calls and scheduled meetings in your organization, without a signed-in user. The app will be joined with the privileges of a directory user to meetings in your tenant. Yes Calls.JoinGroupCallasGuest.All Join Group Calls and Meetings as a guest (preview) Allows the app to anonymously join group calls and scheduled meetings in your organization, without a signed-in user. The app will be joined as a guest to meetings in your tenant. Yes Calls.AccessMedia.All *see below* Access media streams in a call as an app (preview) Allows the app to get direct access to participant media streams in a call, without a signed-in user. Yes Important: You may not use the Microsoft.Graph.Calls.Media API to record or otherwise persist media content from calls or meetings that your bot accesses. Assigning permissions You pre-configure the application permissions your app needs when you register your app. To add permissions from the Azure Bot Registration Portal: From the Settings blade, click Manage . This is the link appearing by the Microsoft App ID . This link will open a window where you can click on API permissions and then click Add a permission in the right pane. Select Microsoft Graph , choose Application Permissions and then select the permissions your app requires in the Select Permissions dialog. Getting administrator consent An administrator can either consent to these permissions using the Azure portal when your app is installed in their organization, or you can provide a sign-up experience in your app through which administrators can consent to the permissions you configured. Once administrator consent is recorded by Azure AD, your app can request tokens without having to request consent again. You can rely on an administrator to grant the permissions your app needs at the Azure portal , but often a better option is to provide a sign-up experience for administrators by using the Azure AD v2.0 /adminconsent endpoint. Please refer to the instructions on constructing an Admin Consent URL for more detail. Note : Constructing the Tenant Admin Consent URL requires a configured Redirect URI/Reply URL in the App Registration Portal . To add reply URLs for your bot, access your bot registration, choose Advanced Options > Edit Application Manifest. Add your Redirect URI to the field replyURLs. Important : Any time you make a change to the configured permissions, you must also repeat the Admin Consent process. Changes made in the app registration portal will not be reflected until consent has been reapplied by the tenant's administrator. Register bot in Microsoft Teams The code samples can be used in combination with a Microsoft Teams App Manifest settings to add the Calling and Video buttons for a 1:1 bot interaction. To develop calling bot, add 'supportsCalling' and 'supportsVideo' boolean properties to the bots section in the app manifest and the bot is all set to receive calls once installed (either to a personal context or a team). App Manifests can be uploaded through the App Studio in the Microsoft Teams client. In the Teams client, select Apps from the left pane and then select App Studio . From the top pane, click Manifest editor and then Create a new app from the left pane. In the App details tab, provide the basic information. Navigate to the Capabilities section, and select the Bots tab. Then select Set Up in the right pane. Fill in the desired bot name Select the Select from one of my existing bots option, and find your bot from above in the dropdown. Check all options under Calling Bot and Scope Press Save"
  },
  "articles/calls/MultipleAppSupport.html": {
    "href": "articles/calls/MultipleAppSupport.html",
    "title": "Supporting Multiple Applications Within Single Code Base",
    "keywords": "Supporting Multiple Applications Within Single Code Base Some developers may wish to support multiple applications from within the same application code. With very little effort, this can be done using multiple instances of ICommunicationsClient . There are some steps that should be taken to ensure that we make outbound requests with the right application, and we forward incoming notifications to the right application. This writeup will demonstrate how to alter the existing samples to add multiple application support. We have not created a sample of this scenario explicitly given that it is not a standard way to use the Graph SDK. Create multiple communications clients First, each application instance requires it's own ICommunicationsClient instance, given that it supports a single IRequestAuthenticationProvider Let's change the Bot ICommunicationsClient Client to an IDictionary<string, ICommunicationsClient> Clients and create our clients. /// <summary> /// Prevents a default instance of the <see cref=\"Bot\"/> class from being created. /// </summary> private Bot() { this.AddClient( Service.Instance.Configuration.MicrosoftAppId, Service.Instance.Configuration.MicrosoftAppPassword); this.AddClient( Service.Instance.Configuration.MicrosoftApp2Id, Service.Instance.Configuration.MicrosoftApp2Password); } private void AddClient(string appId, string appSecret) { // Create a unique notification uri for first app instance // This appends the app id to the callback uri so we get // https://base.uri/callbacks/{appId} var notificationUri = new Uri( Service.Instance.Configuration.CallControlBaseUrl, appId); var builder = new CommunicationsClientBuilder(\"AudioVideoPlaybackBot\", appId); builder .SetAuthenticationProvider( new AuthenticationProvider( appId, appSecret, Service.Instance.Configuration.TokenAudienceResourceLink)) .SetNotificationUrl(notificationUri) .SetMediaPlatformSettings(Service.Instance.Configuration.MediaPlatformSettings) .SetServiceBaseUrl(Service.Instance.Configuration.PlaceCallEndpointUrl); var client = builder.Build(); this.Clients.Add(appId, client); client.Calls().OnIncoming += this.CallsOnIncoming; client.Calls().OnUpdated += this.CallsOnUpdated; } /// <summary> /// Gets the contained app clients /// </summary> public IDictionary<string, ICommunicationsClient> Clients { get; } Let's also add a reference to the ICallCollection to the call handler for ease of access. This will allow us to reference the correct collection/client from any given call id. /// <summary> /// Initializes a new instance of the <see cref=\"CallHandler\"/> class. /// </summary> /// <param name=\"callCollection\">The call collection.</param> /// <param name=\"call\">The call.</param> public CallHandler(ICallCollection callCollection, ICall call); /// <summary> /// Gets the call collection /// </summary> public ICallCollection CallCollection { get; } /// <summary> /// Gets the call /// </summary> public ICall Call { get; } Handle notifications Next we need to adjust the incoming call controller to forward the notifications to the right client. If there is no need to handle incoming call, then the above configuration will automatically route the the correct apps endpoint. If we need to handle incoming call, we can either have a default app process all those scenarios, or the callback URI of each app can contain the app id. For example, if our service URI is https://base.uri/callback , we can set all our bots to use this URI directly, but then we lose knowledge of which app is receiving the incoming call. If we change each app's callback URI to https://base.uri/callback/{appId} (example: https://base.uri/callback/9ecd52e5-6592-42b7-b562-093f37f13bde , where the appId is 9ecd52e5-6592-42b7-b562-093f37f13bde) then we have the app context when an incoming call occurs. Of course there are other ways to get the app ID, like from the auth token or the payload, but this is one simple option. To handle the app id in the URI the controllers for callbacks need to be changed to the following: /// <summary> /// Gets a reference to singleton sample bot/client instance /// </summary> private IDictionary<string, ICommunicationsClient> Clients => Bot.Instance.Clients; /// <summary> /// Handle a callback for an incoming call. /// Here we don't know what application is receiving the callback. /// </summary> /// <returns> /// The <see cref=\"HttpResponseMessage\"/>. /// </returns> [HttpPost] [Route(\"\")] public Task<HttpResponseMessage> OnIncomingRequestAsync() { // Pick some app id to handle this call. var appId = this.Clients.Keys.First(); return this.OnIncomingRequestAsync(appId); } /// <summary> /// Handle a callback for an incoming call or notification. /// Here we've added the application id to the callback URI. /// </summary> /// <returns> /// The <see cref=\"HttpResponseMessage\"/>. /// </returns> [HttpPost] [Route(\"{appId}\")] public async Task<HttpResponseMessage> OnIncomingRequestAsync(string appId) { Log.Info(new CallerInfo(), LogContext.FrontEnd, $\"Received HTTP {this.Request.Method}, {this.Request.RequestUri}\"); // Pass the incoming message to the sdk. The sdk takes care of what to do with it. var client = this.Clients[appId]; var response = await client.ProcessNotificationAsync(this.Request).ConfigureAwait(false); // Enforce the connection close to ensure that requests are evenly load balanced so // calls do no stick to one instance of the worker role. response.Headers.ConnectionClose = true; return response; } Additional notes There are a few items not addressed here. For instance, when a VTC joins a meeting, which app should it use? This has been purposefuly excluded from this guide given that it is unique business logic. Some may want a different bot configuration for each client, others may associate unique permissions to each bot and use depending on action being performed."
  },
  "articles/calls/IVR.html": {
    "href": "articles/calls/IVR.html",
    "title": "Interactive Voice Response (IVR)",
    "keywords": "Interactive Voice Response (IVR) Graph Communications Calling SDK and Core SDK can be used to make and manage IVR calls. Features Join exiting calls Answer incoming calls Subscribe to tones Transfer call Play media Record Cancel media operations Calling SDK Snippets Join Existing Call and Answer Incoming Call Please refer to the concept articles Redirect and Transfer In order to do a redirect or transfer, you need to create an invitation object. This invitation target is the transferee in blind transfer and the original caller in consultative transfer. var target = new InvitationParticipantInfo { Identity = new IdentitySet { User = new Identity { Id = \"**The Target's AAD ID**\", DisplayName = \"**(optional) The Target's Display Name**\", } } }; ICall call = this.GetIncomingCall(); await call.RedirectAsync(new[] { target }).ConfigureAwait(false); Blind transfer To make a blind transfer, only the target needs to be specified. ICall oritinalCall = this.Client.Calls()[\"*call id to transfer*\"]; await oritinalCall.TransferAsync(target).ConfigureAwait(false); Consultative transfer ICall newCall = this.Client.Calls()[\"*call id of second call*\"]; await newCall.TransferAsync(target, \"*id of the original call*\").ConfigureAwait(false); Subscribe to tones ICall call = this.Client.Calls()[\"*id of the call*\"]; await call.SubscribeToToneAsync().ConfigureAwait(false); Any tones that are received are sent as part of a call update in ToneInfo property of the call resource. Play media prompts ICall call = this.Client.Calls()[\"*id of the call*\"]; await call.PlayPromptAsync(*A list of media prompts to play*).ConfigureAwait(false); Record ICall call = this.Client.Calls()[\"*id of the call*\"]; HttpClient httpClient = this.HttpClient; RecordOperationResult result = await call.RecordAsync(*record options*).ConfigureAwait(false); string location = result.RecordResourceLocation; string token = result.RecordResourceAccessToken; // Stream the content of the recording somewhere. using (var outputStream = new MemoryStream()) using (var request = new HttpRequestMessage(HttpMethod.Get, new Uri(location))) { // Set the authorization header. request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token); using(var response = await httpClient.SendAsync(request).ConfigureAwait(false)) using(var content = await response.Content.ReadAsStreamAsync().ConfigureAwait(false)) { await content.CopyToAsync(outputStream); outputStream?.Seek(0, SeekOrigin.Begin); // Do something with stream. } } Cancel media processing This API will cancel all prompts that are queued to be played. ICall call = this.Client.Calls()[\"*id of the call*\"]; await call.CancelMediaProcessingAsync().ConfigureAwait(false);"
  },
  "articles/calls/calling-notifications.html": {
    "href": "articles/calls/calling-notifications.html",
    "title": "Notifications in Calling",
    "keywords": "Notifications in Calling Refer to Registering a Calling Bot on how to register the callback URL. This callback is used for all incoming calls to the application. Protocol determination The incoming notification is provided in legacy format for compatibility with the previous protocol . In order to convert the call to the Microsoft Graph protocol, the bot must determine the notification is in legacy format and reply with: HTTP/1.1 204 No Content The application will again receive the notification but this time it will be in the Microsoft Graph protocol. You may configure the protocol your application supports and avoid receiving the initial callback in legacy format. The setting is available as a configuration option in the Skype Channel. Redirects for region affinity We will invoke your callback from the data-center hosting the call. The call may start in any data-center and does not take into account region affinities. The notification will be sent to your deployment depending on the GeoDNS resolution. If your application determines, by inspecting the initial notification payload or otherwise, that it needs to run in a different deployment, the application may reply with: HTTP/1.1 302 Found Location: your-new-location You may decide to pickup the call and answer . You can specify the callback URL to handle this particular call. This is useful for stateful instances where your call is handled by a particular partition and you want to embed this information on the callback URL for routing to the right instance. Authenticating the callback Application should inspect the token passed by on the notification to validate the request. Whenever the API raises a web hook event, the API gets an OAUTH token from us, with audience as the application's App ID and adds it in the Authorization header as a Bearer token. The application is expected to validate this token before accepting the callback request. POST https://bot.contoso.com/api/calls Content-Type: application/json Authentication: Bearer <TOKEN> \"value\": [ \"subscriptionId\": \"2887CEE8344B47C291F1AF628599A93C\", \"subscriptionExpirationDateTime\": \"2016-11-20T18:23:45.9356913Z\", \"changeType\": \"updated\", \"resource\": \"/app/calls/8A934F51F25B4EE19613D4049491857B\", \"resourceData\": { \"@odata.type\": \"#microsoft.graph.call\", \"state\": \"Established\" } ] The OAUTH token would have values like the following, and will be signed by us. The openid configuration published at https://api.aps.skype.com/v1/.well-known/OpenIdConfiguration can be used to verify the token. { \"aud\": \"0efc74f7-41c3-47a4-8775-7259bfef4241\", \"iss\": \"https://api.botframework.com\", \"iat\": 1466741440, \"nbf\": 1466741440, \"exp\": 1466745340, \"tid\": \"1fdd12d0-4620-44ed-baec-459b611f84b2\" } aud audience is the App ID URI specified for the application. tid is the tenant id for contoso iss is the token issuer, https://api.botframework.com The listener interface on the web hook URL can validate the token, ensure it has not expired, checking whether it has been signed by our published openid configuration. You must also check whether audience matches your App ID before accepting the callback request. Sample shows how to validate inbound requests. Additional information You can read more about AAD tokens and Validation"
  },
  "articles/Testing.html": {
    "href": "articles/Testing.html",
    "title": "Testing of Bots",
    "keywords": "Testing of Bots This document describes how to setup the Graph Communications Calling SDK to run on your localhost, run tests against it against the Graph Platform. Caution Do not use this testing setup for production traffic. Please limit it to debugging your bot locally with test traffic because of security concerns. Prerequisites The testing setup requires ngrok to create tunnels to localhost. Go to ngrok and sign up for a free account. Once you signed up, go to the dashboard and get your authtoken. Create an ngrok configuration file ngrok.yml with the following data authtoken: <Your-AuthToken> Tip Free ngrok account does not provide static tunnels. Tunnels change everytime a tunnel is created. So, if using free account, it is recommended to not close ngrok until it's use is completed. Tip Ngrok does not require sign up if you do not use TCP tunnels. Setting up Signaling In order for the platform to talk to your bot, the bot needs to be reached over the internet. So, an ngrok tunnel is created in http mode with an address pointing to a port on your localhost. Add the following lines to your ngrok config tunnels: signaling: addr: <Localhost Signaling Port> proto: http Setting up Application Hosted Media Note This section is only required for Application Hosted Media bots and can be skipped if you do not host media yourself. Application Hosted Media uses certificates and TCP tunnels to properly work. The following steps are required in order for proper media establishment. Ngrok's public TCP endpoints have fixed urls. They are 0.tcp.ngrok.io , 1.tcp.ngrok.io , etc. You should have a dns CNAME entry for your service that points to these urls. In this example, let's say 0.bot.contoso.com is pointing to 0.tcp.ngrok.io , and similarly for other urls. Now you require an SSL certificate for the url you own. To make it easy, use an SSL certificate issued to a wild card domain. In this case, it would be *.bot.contoso.com . This ssl certificate is validated by Media flow so should match your media flow's public url. Note down the thumbprint and install the certificate in your machine certificates. Now, we setup a TCP tunnel to forward the traffic to localhost. Write the following lines into your ngrok config. media: addr: <Localhost Media Port> proto: tcp Important Because ngrok's tcp urls can be same for multiple users (just differing in ports), it is possible for a third party to look like your service. This is a security issue. Therefore this document should be followed only for testing and also using a separate domain that is not linked to your production services. Start Ngok Now that ngrok configuration is ready, start it up. Download the ngrok executable and run the following command ngrok.exe start -all -config <Path to your ngrok.yml> This would start ngrok and provide you the public urls which provide the tunnels to your localhost. The output looks like the following Forwarding http://signal.ngrok.io -> localhost:12345 Forwarding https://signal.ngrok.io -> localhost:12345 Forwarding tcp://1.tcp.ngrok.io:12332 -> localhost:8445 Here, 12345 is my signaling port, 8445 is the local media port and 12332 is the remote media port exposed by ngrok. Note that we have a forwarding from 1.bot.contoso.com to 1.tcp.ngrok.io . This will be used as the media url for bot. Update Code Once ngrok is up and running, we update the code to use the config we just setup. Update Signaling In the builder, change the NotficationUrl to the signaling url provided by ngrok. clientBuilder.SetNotificationUrl( new Uri(\"https://signal.ngrok.io/notificationEndpoint\")) Important Replace signal with the one provided by ngrok and the NotificationEndpoint with the controller path that receives notification. Important The url in SetNotificationUrl must be HTTPS. Important Your local instance must be listening to http traffic on the signaling port. The requests made by Graph Platform will reach the bot as localhost http traffic when End to End encryption is not setup. Update Media Update your MediaPlatformSettings to the following. var mediaPlatform = new MediaPlatformSettings { ApplicationId = <Your application id> MediaPlatformInstanceSettings = new MediaPlatformInstanceSettings { CertificateThumbprint = <Your SSL Cert thumbprint>, InstanceInternalPort = <Localhost media port>, InstancePublicPort = <Ngrok exposed remote media port>, InstancePublicIPAddress = new IPAddress(0x0), ServiceFqdn = <Media url for bot (eg: 1.bot.contoso.com)>, }, } Caution The Certificate Thumbprint provided above should match the Service FQDN. That is why the DNS entries are required. Caveats The free accounts of ngrok do NOT provide End to End encryption. The HTTPS data ends at the ngrok url and the data flows unencrypted from ngrok to localhost. You require paid ngrok account and configuration update to use End to End encryption. See ngrok docs for steps on setting up secure E2E tunnels. Because the bot callback url is dynamic, incoming call scenarios won't work as they are part of bot registration and they are static. One way to fix this is to use a paid ngrok account which provides fixed subdomains to which you can point your bot and the platform."
  },
  "README.html": {
    "href": "README.html",
    "title": "Get started",
    "keywords": "Get started Review the documentation to understand the concepts behind using our SDK (which is also used by the samples). Get started quickly with our samples ."
  },
  "README.Internal.html": {
    "href": "README.Internal.html",
    "title": "How to generate docs",
    "keywords": "How to generate docs Download and unzip docfx.zip from https://github.com/dotnet/docfx/releases , extract it to a local folder, and add it to PATH so you can run it anywhere. Install Visual STUDIO 2017 Developer tools v15.0 and later After installation, open a X64 Native Tools Command Prompt for VS 2017. Run docfx in the docs folder, this will generate a _site folder Pack the _site folder with the project level README.md that explains how to go through the docs. How to serve the docs Download and unzip docfx.zip from https://github.com/dotnet/docfx/releases , extract it to a local folder, and add it to PATH so you can run it anywhere. Open a console window and cd <path_to_site> to the directory which contains the _site folder Serve the docs site using docfx serve .\\_site command Goto http://localhost:8080 in your browser to view the documentation."
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.TransactionDirection.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.TransactionDirection.html",
    "title": "Enum TransactionDirection",
    "keywords": "Enum TransactionDirection Direction for request message. Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public enum TransactionDirection Fields Name Description Incoming The incoming request message. Outgoing The outgoing request message. Extension Methods AdditionalDataExtensions.SetInAdditionalData(String, Object) Extensions.Pin() Extensions.ChangeType(Type) Extensions.ChangeType<T>() Extensions.TryDispose(IGraphLogger) EnumUtils.GetDescription() ReflectionUtils.GetPropertyUsingReflection(String) ReflectionUtils.SetPropertyUsingReflection(String, Object) Validator.IsNull(String, String) Validator.NotNull<TransactionDirection>(String, String) Validator.Equals<TransactionDirection>(TransactionDirection, String, String) Validator.Equals<TransactionDirection, TE>(TransactionDirection, String) Validator.NotEquals<TransactionDirection>(TransactionDirection, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.html",
    "title": "Enum LogEventFormatterFlags",
    "keywords": "Enum LogEventFormatterFlags The log event formatter enums Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public enum LogEventFormatterFlags Fields Name Description ForDefault For default case, which includes all fields. ForILoggerFactory For ILoggerFactory binding format, which doesn't include component and level, as these fields are set in ILogger outside of message. IncludeManagedThreadId Managed thread ID IncludeProcessId Process ID IncludesCallInfo Call info IncludesComponent Component IncludesCorrelationId Correlation ID IncludesLevel Level IncludesProperties Properties IncludesTimestamp Timestamp Extension Methods AdditionalDataExtensions.SetInAdditionalData(String, Object) Extensions.Pin() Extensions.ChangeType(Type) Extensions.ChangeType<T>() Extensions.TryDispose(IGraphLogger) EnumUtils.GetDescription() ReflectionUtils.GetPropertyUsingReflection(String) ReflectionUtils.SetPropertyUsingReflection(String, Object) Validator.IsNull(String, String) Validator.NotNull<LogEventFormatterFlags>(String, String) Validator.Equals<LogEventFormatterFlags>(LogEventFormatterFlags, String, String) Validator.Equals<LogEventFormatterFlags, TE>(LogEventFormatterFlags, String) Validator.NotEquals<LogEventFormatterFlags>(LogEventFormatterFlags, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.HttpConstants.html": {
    "href": "common/Microsoft.Graph.Communications.Common.HttpConstants.html",
    "title": "Class HttpConstants",
    "keywords": "Class HttpConstants The constant values for http. Inheritance Object HttpConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class HttpConstants Fields GraphV1Prefixes Expected values of x-ms-gateway-serviceRoot header in the requests coming in to PMA from GraphV1 endpoints Declaration public static readonly IEnumerable<string> GraphV1Prefixes Field Value Type Description IEnumerable < String >"
  },
  "common/Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.html": {
    "href": "common/Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.html",
    "title": "Class HttpConstants.HeaderNames",
    "keywords": "Class HttpConstants.HeaderNames The header names. Inheritance Object HttpConstants.HeaderNames Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class HeaderNames Fields Accept The accept header. Declaration public const string Accept = \"Accept\" Field Value Type Description String AccessControlAllowCredentials Access-Control-Allow-Credentials Declaration public const string AccessControlAllowCredentials = \"Access-Control-Allow-Credentials\" Field Value Type Description String AccessControlAllowHeaders Access-Control-Allow-Headers Declaration public const string AccessControlAllowHeaders = \"Access-Control-Allow-Headers\" Field Value Type Description String AccessControlAllowOrigin Access-Control-Allow-Origin Declaration public const string AccessControlAllowOrigin = \"Access-Control-Allow-Origin\" Field Value Type Description String AccessControlMaxAge Access-Control-Max-Age Declaration public const string AccessControlMaxAge = \"Access-Control-Max-Age\" Field Value Type Description String AccessControlRequestHeaders Access-Control-Request-Headers Declaration public const string AccessControlRequestHeaders = \"Access-Control-Request-Headers\" Field Value Type Description String AccessControlRequestMethod Access-Control-Request-Method Declaration public const string AccessControlRequestMethod = \"Access-Control-Request-Method\" Field Value Type Description String Authorization The authorization header. Declaration public const string Authorization = \"Authorization\" Field Value Type Description String CacheControl The cache control header. Declaration public const string CacheControl = \"Cache-Control\" Field Value Type Description String CalleeRegion The callee region header. Declaration public const string CalleeRegion = \"X-Microsoft-Skype-Callee-Region\" Field Value Type Description String CallerRegion The caller region header. Declaration public const string CallerRegion = \"X-Microsoft-Skype-Caller-Region\" Field Value Type Description String ChainId The chain identifier header. This header is used to correlate requests to each other within the NGC stack. Declaration public const string ChainId = \"X-Microsoft-Skype-Chain-ID\" Field Value Type Description String ClientRequestId The client request identifier header. This header is used to track individual requests between the client and SF services. Declaration public const string ClientRequestId = \"Client-Request-Id\" Field Value Type Description String Connection The connection header. Declaration public const string Connection = \"Connection\" Field Value Type Description String ContentLength The content length header. Declaration public const string ContentLength = \"Content-Length\" Field Value Type Description String ContentType The content type header. Declaration public const string ContentType = \"Content-Type\" Field Value Type Description String ContextId The context identifier header. Declaration public const string ContextId = \"ContextId\" Field Value Type Description String Date The date header. Declaration public const string Date = \"Date\" Field Value Type Description String Duration The duration header. Declaration public const string Duration = \"Duration\" Field Value Type Description String GatewayServiceRootHeader the header that graph adds to the proxied request to PMA Declaration public const string GatewayServiceRootHeader = \"x-ms-gateway-serviceRoot\" Field Value Type Description String Host The host header. Declaration public const string Host = \"Host\" Field Value Type Description String Location The location header. Declaration public const string Location = \"Location\" Field Value Type Description String MessageId The message identifier header. This header is used to track individual requests within the NGC stack. Declaration public const string MessageId = \"X-Microsoft-Skype-Message-ID\" Field Value Type Description String MsAttribution X-MS-Attribution. Declaration public const string MsAttribution = \"X-MS-Attribution\" Field Value Type Description String MsDiagnostics The microsoft graph diagnostics header. Declaration public const string MsDiagnostics = \"x-ms-ags-diagnostic\" Field Value Type Description String MsParticipants X-MS-Participants. Declaration public const string MsParticipants = \"X-MS-Participants\" Field Value Type Description String ODataVersion The odata version header. Declaration public const string ODataVersion = \"OData-Version\" Field Value Type Description String Origin Origin Declaration public const string Origin = \"Origin\" Field Value Type Description String OriginalMessageId The original message identifier header. Declaration public const string OriginalMessageId = \"X-Microsoft-Skype-Original-Message-ID\" Field Value Type Description String PmaInstanceUrl The pma instance URL. Used to retarget PSA to a particular PMA instance. Declaration public const string PmaInstanceUrl = \"X-Microsoft-Pma-Instance\" Field Value Type Description String RedirectDu The redirect du header. Declaration public const string RedirectDu = \"X-Plat-Redirect-Du\" Field Value Type Description String RedirectRegion The redirect region header. Declaration public const string RedirectRegion = \"X-Plat-Redirect-Region\" Field Value Type Description String RequestId The request identifier header. This header is returned by graph to identify the specific request. Declaration public const string RequestId = \"Request-Id\" Field Value Type Description String RoutingTargetRegion The Routing-Target-Region header. Declaration public const string RoutingTargetRegion = \"Routing-Target-Region\" Field Value Type Description String ScenarioId The scenario identifier header. This header is used to correlate requests to each other between client and SF services. Declaration public const string ScenarioId = \"Scenario-Id\" Field Value Type Description String SchedulingServiceTelemetryId Scheduling service telemetry header. This header is used to correlate requests with SS service. Declaration public const string SchedulingServiceTelemetryId = \"X-MS-Skype-MLC-Telemetry-Id\" Field Value Type Description String Skypetoken X-Skypetoken Declaration public const string Skypetoken = \"X-Skypetoken\" Field Value Type Description String StrictTransportSecurity The strict transport security header. Declaration public const string StrictTransportSecurity = \"Strict-Transport-Security\" Field Value Type Description String Tenant The tenant header Declaration public const string Tenant = \"X-Microsoft-Tenant\" Field Value Type Description String TenantRegion The tenant region header. Declaration public const string TenantRegion = \"Tenant-Region\" Field Value Type Description String ThrowSite The throw site header. Declaration public const string ThrowSite = \"X-ThrowSite\" Field Value Type Description String TransferEncoding The transfer encoding header. Declaration public const string TransferEncoding = \"Transfer-Encoding\" Field Value Type Description String UserAgent The user agent header. Declaration public const string UserAgent = \"User-Agent\" Field Value Type Description String WebhooksResource Webhooks-WorkloadResource Declaration public const string WebhooksResource = \"Webhooks-WorkloadResource\" Field Value Type Description String XMsClientUserAgent Client User Agent header. This header has the user agent in requests. Used in requests to presence service at the moment. Declaration public const string XMsClientUserAgent = \"X-Ms-Client-User-Agent\" Field Value Type Description String XMsClientVersion The client version header. This header has the client version in requests. Used in requests to presence service at the moment. Declaration public const string XMsClientVersion = \"X-Ms-Client-Version\" Field Value Type Description String XMsCorrelationId the correlation id header. This header is used to correlate requests with presence service at the moment. Declaration public const string XMsCorrelationId = \"X-Ms-Correlation-Id\" Field Value Type Description String"
  },
  "client/Microsoft.Graph.Communications.Resources.CollectionEventHandler-2.html": {
    "href": "client/Microsoft.Graph.Communications.Resources.CollectionEventHandler-2.html",
    "title": "Delegate CollectionEventHandler<TSender, TEntity>",
    "keywords": "Delegate CollectionEventHandler<TSender, TEntity> The call collection event handler delegate. Namespace : Microsoft.Graph.Communications.Resources Assembly : Microsoft.Graph.Communications.Client.dll Syntax public delegate void CollectionEventHandler<in TSender, TEntity>(TSender sender, CollectionEventArgs<TEntity> e); Parameters Type Name Description TSender sender The sender. CollectionEventArgs <TEntity> e The event arguments. Type Parameters Name Description TSender The type of the sender. TEntity The type of the arguments. Constructors CollectionEventHandler(Object, IntPtr) Declaration public CollectionEventHandler(object object, IntPtr method) Parameters Type Name Description Object object IntPtr method Methods BeginInvoke(TSender, CollectionEventArgs<TEntity>, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(TSender sender, CollectionEventArgs<TEntity> e, AsyncCallback callback, object object) Parameters Type Name Description TSender sender CollectionEventArgs <TEntity> e AsyncCallback callback Object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(TSender, CollectionEventArgs<TEntity>) Declaration public virtual void Invoke(TSender sender, CollectionEventArgs<TEntity> e) Parameters Type Name Description TSender sender CollectionEventArgs <TEntity> e"
  },
  "common/Microsoft.Graph.Communications.Common.ExceptionUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.ExceptionUtils.html",
    "title": "Class ExceptionUtils",
    "keywords": "Class ExceptionUtils Exception utilities Inheritance Object ExceptionUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class ExceptionUtils Methods FindInnerException(Exception) Find the inner exception that caused the error. Declaration public static Exception FindInnerException(this Exception exception) Parameters Type Name Description Exception exception Top level exception. Returns Type Description Exception Inner exception causing the error. FormatException(Exception, Int32) Format the exception including up to depth inner exceptions. Includes stack trace of the last inner exception (up to depth ). Declaration public static string FormatException(this Exception exception, int depth = 4) Parameters Type Name Description Exception exception Top level exception. Int32 depth The depth of inner exceptions, valid range is [1..4]. 1 means that most top exception will be formatted. Returns Type Description String Formatted exception GetBaseException(Exception) Gets the base exception of an exception. If the exception is an AggregateException, then the inner exceptions are flattened before getting the base exception. Declaration public static Exception GetBaseException(Exception exception) Parameters Type Name Description Exception exception The exception Returns Type Description Exception Whether it's base exception"
  },
  "calls/Microsoft.Graph.Communications.Calls.IParticipantCollection.html": {
    "href": "calls/Microsoft.Graph.Communications.Calls.IParticipantCollection.html",
    "title": "Interface IParticipantCollection",
    "keywords": "Interface IParticipantCollection The stateful participant collection interface. Inherited Members IDisposable.Dispose() IReadOnlyCollection<IParticipant>.Count IEnumerable<IParticipant>.GetEnumerator() Namespace : Microsoft.Graph.Communications.Calls Assembly : Microsoft.Graph.Communications.Calls.dll Syntax public interface IParticipantCollection : IResourceCollection<IParticipantCollection, IParticipant, Participant>, IResourceCollection<IParticipant, Participant>, IResourceCollection, IResourceBase, IDisposable, IReadOnlyCollection<IParticipant>, IEnumerable<IParticipant>, IEnumerable Methods GetAsync(String, CancellationToken) Gets the participant from the collection. Declaration Task<IParticipant> GetAsync(string participantId, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String participantId The participant identifier. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IParticipant > The found IParticipant . Exceptions Type Condition ServiceException If the specified participant was not found. InviteAsync(IEnumerable<InvitationParticipantInfo>, CancellationToken) Invites a list of participants given their identities. Declaration Task InviteAsync(IEnumerable<InvitationParticipantInfo> participants, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IEnumerable < InvitationParticipantInfo > participants The list of InvitationParticipantInfo to invite. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The Task that completes after the request has been sent. The invite updates will come in on IParticipantCollection.OnUpdated Extension Methods ParticipantExtensions.InviteAsync(IParticipantCollection, IdentitySet, String, CancellationToken)"
  },
  "core/Microsoft.Graph.html": {
    "href": "core/Microsoft.Graph.html",
    "title": "Namespace Microsoft.Graph",
    "keywords": "Namespace Microsoft.Graph Classes ContractsConstants OData Model Constants ContractsConstants.AuthConstants Various constants used by the AuthZ layer ContractsConstants.CallProperties Call properties constants ContractsConstants.EntityContainerNames Singleton/EntitySet constants ContractsConstants.IdentityProperties Identity properties constants ContractsConstants.NotificationProperties Notification properties constants ContractsConstants.Signature Signature for Assembly visibility. IdentityExtensions Extensions for graph api contracts IdentitySetExtensions Extentions for graph api contracts NotificationsExtensions Communications notifications extensions."
  },
  "core/Microsoft.Graph.Routing.html": {
    "href": "core/Microsoft.Graph.Routing.html",
    "title": "Namespace Microsoft.Graph.Routing",
    "keywords": "Namespace Microsoft.Graph.Routing Enums CloudNamespace Enumeration defining various cloud environment type"
  },
  "core/Microsoft.Graph.Communications.Core.Notifications.FailedNotificationEventArgs.html": {
    "href": "core/Microsoft.Graph.Communications.Core.Notifications.FailedNotificationEventArgs.html",
    "title": "Class FailedNotificationEventArgs",
    "keywords": "Class FailedNotificationEventArgs Event arguments used when exceptions are raised in callbacks. Inheritance Object FailedNotificationEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core.Notifications Assembly : Microsoft.Graph.Communications.Core.dll Syntax public class FailedNotificationEventArgs Constructors FailedNotificationEventArgs(NotificationEventArgs, Exception) Initializes a new instance of the FailedNotificationEventArgs class. Declaration public FailedNotificationEventArgs(NotificationEventArgs notification, Exception exception) Parameters Type Name Description NotificationEventArgs notification The NotificationEventArgs instance containing the event data. Exception exception The exception. Properties Exception Gets the exception being raised. Declaration public Exception Exception { get; } Property Value Type Description Exception Notification Gets the notification that was being processed while this callback failed. Declaration public NotificationEventArgs Notification { get; } Property Value Type Description NotificationEventArgs"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.html",
    "title": "Class HttpLogData",
    "keywords": "Class HttpLogData The log data for http trace. Inheritance Object HttpLogData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry.HttpLogging Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class HttpLogData Constructors HttpLogData() Declaration public HttpLogData() Properties Content Gets or sets the content. Declaration public string Content { get; set; } Property Value Type Description String Headers Gets or sets the headers. Declaration public IEnumerable<string> Headers { get; set; } Property Value Type Description IEnumerable < String > HeadersString Gets the headers string. Declaration public string HeadersString { get; } Property Value Type Description String Method Gets or sets the method. Declaration public string Method { get; set; } Property Value Type Description String ResponseStatusCode Gets or sets the response status code. Declaration public int? ResponseStatusCode { get; set; } Property Value Type Description Nullable < Int32 > ResponseTime Gets or sets the response time in milliseconds. Declaration public long? ResponseTime { get; set; } Property Value Type Description Nullable < Int64 > TraceType Gets or sets the trace type. Declaration public HttpTraceType TraceType { get; set; } Property Value Type Description HttpTraceType TransactionDirection Gets or sets the transaction direction. Declaration public TransactionDirection TransactionDirection { get; set; } Property Value Type Description TransactionDirection Url Gets or sets the url. Declaration public string Url { get; set; } Property Value Type Description String Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.ReflectionUtils.html": {
    "href": "common/Microsoft.Graph.Communications.Common.ReflectionUtils.html",
    "title": "Class ReflectionUtils",
    "keywords": "Class ReflectionUtils Reflection utilities Inheritance Object ReflectionUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class ReflectionUtils Methods DerivesFrom(Type, Type) Check if the type derives from the base type Declaration public static bool DerivesFrom(this Type type, Type baseType) Parameters Type Name Description Type type Type to check Type baseType Base type Returns Type Description Boolean True if it is or derives from the base type DerivesFrom<T>(Type) Check if the type derives from the T type. Declaration public static bool DerivesFrom<T>(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean True if it is or derives from the base type Type Parameters Name Description T The type to check. GetPropertyUsingReflection(Object, String) Get named property of an object Declaration public static object GetPropertyUsingReflection(this object obj, string name) Parameters Type Name Description Object obj Object to get property from. String name Name of the property. Returns Type Description Object Value of the property GetValueCached(PropertyInfo, Object) Gets the value using a cached delegate. Declaration public static object GetValueCached(this PropertyInfo propertyInfo, object object) Parameters Type Name Description PropertyInfo propertyInfo The property info to use. Object object The object containing the property. Returns Type Description Object The fetched object. Implements(Type, Type) Check if type is subclass of a generic type. Declaration public static bool Implements(this Type type, Type checkType) Parameters Type Name Description Type type Type to check. Type checkType Generic type. Returns Type Description Boolean True if it is a subclass. Implements<T>(Type) Check if type is subclass of a generic type. Declaration public static bool Implements<T>(this Type type) Parameters Type Name Description Type type Type to check. Returns Type Description Boolean True if it is a subclass. Type Parameters Name Description T The type to check. SetPropertyUsingReflection(Object, String, Object) Set named property of an object Declaration public static bool SetPropertyUsingReflection(this object obj, string name, object value) Parameters Type Name Description Object obj Object to get property from. String name Name of the property. Object value Value of the property. Returns Type Description Boolean true if the property was set successfully, false otherwise SetValueCached(PropertyInfo, Object, Object) Set the value using a cached delegate. Declaration public static void SetValueCached(this PropertyInfo propertyInfo, object object, object value) Parameters Type Name Description PropertyInfo propertyInfo The property info to use. Object object The object containing the property. Object value The value to be set."
  },
  "core/Microsoft.Graph.Communications.Core.GraphModelExtensions.html": {
    "href": "core/Microsoft.Graph.Communications.Core.GraphModelExtensions.html",
    "title": "Class GraphModelExtensions",
    "keywords": "Class GraphModelExtensions Generic graph model extensions. Inheritance Object GraphModelExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Core Assembly : Microsoft.Graph.Communications.Core.dll Syntax public static class GraphModelExtensions Methods FixModel(Object) Fixes the model to match latest protocol. Declaration public static void FixModel(object object) Parameters Type Name Description Object object The object."
  },
  "common/Microsoft.Graph.html": {
    "href": "common/Microsoft.Graph.html",
    "title": "Namespace Microsoft.Graph",
    "keywords": "Namespace Microsoft.Graph Classes AdditionalDataExtensions The identity set extensions"
  },
  "common/Microsoft.Graph.Communications.Common.OData.ODataConstants.html": {
    "href": "common/Microsoft.Graph.Communications.Common.OData.ODataConstants.html",
    "title": "Class ODataConstants",
    "keywords": "Class ODataConstants The OData constants. Inheritance Object ODataConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.OData Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class ODataConstants Fields ODataType The OData type. Declaration public const string ODataType = \"@odata.type\" Field Value Type Description String"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.MetricLogData.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.MetricLogData.html",
    "title": "Class MetricLogData",
    "keywords": "Class MetricLogData The metric of Geneva Instrumentation Framework (Ifx). Inheritance Object MetricLogData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public class MetricLogData Constructors MetricLogData() Declaration public MetricLogData() Properties AddDefaultDimension Gets or sets a value indicating whether the default dimensions are included. Declaration public bool AddDefaultDimension { get; set; } Property Value Type Description Boolean Dimensions Gets or sets the dimensions. Declaration public Dictionary<string, string> Dimensions { get; set; } Property Value Type Description Dictionary < String , String > Name Gets or sets the name. Declaration public string Name { get; set; } Property Value Type Description String Namespace Gets or sets the namespace. Declaration public string Namespace { get; set; } Property Value Type Description String RawData Gets or sets the raw data. Declaration public long RawData { get; set; } Property Value Type Description Int64 Extension Methods AdditionalDataExtensions.SetInAdditionalData(Object, String, Object) Extensions.Pin(Object) Extensions.ChangeType(Object, Type) Extensions.ChangeType<T>(Object) Extensions.TryDispose(Object, IGraphLogger) ReflectionUtils.GetPropertyUsingReflection(Object, String) ReflectionUtils.SetPropertyUsingReflection(Object, String, Object) Validator.IsNull(Object, String, String) Validator.NotNull<T>(T, String, String) Validator.Equals<T>(T, T, String, String) Validator.Equals<T, TE>(T, T, String) Validator.NotEquals<T>(T, T, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.html",
    "title": "Class LoggingConstants",
    "keywords": "Class LoggingConstants Constants used for logging that are common between server and client. Inheritance Object LoggingConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public static class LoggingConstants Fields ActivityTrackingLatencySeconds The activity tracking latency in seconds Declaration public const string ActivityTrackingLatencySeconds = \"ActivityTrackingLatencySeconds\" Field Value Type Description String AppId AppId constant. Declaration public const string AppId = \"AppId\" Field Value Type Description String ChatId Chat Id. Declaration public const string ChatId = \"ChatId\" Field Value Type Description String ChatInactivityTrackingExceedingInterval The chat inactivity tracking that exceeds the expected interval Declaration public const string ChatInactivityTrackingExceedingInterval = \"ChatInactivityTrackingExceedingInterval\" Field Value Type Description String CosmosDBCollection The name of CosmosDB collection Declaration public const string CosmosDBCollection = \"CosmosDBCollection\" Field Value Type Description String CosmosDBRequestCharge The metric name of CosmosDB request charge Declaration public const string CosmosDBRequestCharge = \"CosmosDBRequestCharge\" Field Value Type Description String CosmosDBRequestLatency The metric name of CosmosDB request latency in milliseconds Declaration public const string CosmosDBRequestLatency = \"CosmosDBRequestLatency\" Field Value Type Description String CosmosDBRequestType The CosmosDB request type, read/create/update/upsert/delete/query Declaration public const string CosmosDBRequestType = \"CosmosDBRequestType\" Field Value Type Description String ErrorCode The error code. Declaration public const string ErrorCode = \"ErrorCode\" Field Value Type Description String FailedBridgedMessages Failed bridged messages constant. Declaration public const string FailedBridgedMessages = \"FailedBridgedMessages\" Field Value Type Description String FailedChatInactivityTracking The failed chat inactivity tracking Declaration public const string FailedChatInactivityTracking = \"FailedChatInactivityTracking\" Field Value Type Description String FailedChatInactivityTrackingSum The failed chat inactivity tracking sum Declaration public const string FailedChatInactivityTrackingSum = \"FailedChatInactivityTrackingSum\" Field Value Type Description String FailedChatNotifications The failed chat notifications Declaration public const string FailedChatNotifications = \"FailedChatNotifications\" Field Value Type Description String FailedRoutingCacheRequests The failed routing cache requests. Declaration public const string FailedRoutingCacheRequests = \"FailedRoutingCacheRequests\" Field Value Type Description String HTTPMetrics The namespace of HTTP metrics Declaration public const string HTTPMetrics = \"HTTPMetrics\" Field Value Type Description String InstanceId Instance ID. Declaration public const string InstanceId = \"InstanceId\" Field Value Type Description String JsonSerializationMaxDepth Max depth of json serializer in case the json serializer settings is configured as ReferenceLoopHandling.Serialize Declaration public const int JsonSerializationMaxDepth = 10 Field Value Type Description Int32 Method Method dimension name. Declaration public const string Method = \"Method\" Field Value Type Description String ObjectId UserId constant. Declaration public const string ObjectId = \"ObjectId\" Field Value Type Description String Operation Operation dimension name. Declaration public const string Operation = \"Operation\" Field Value Type Description String OutgoingChatMessageLatency The time taken to send outgoing message. Declaration public const string OutgoingChatMessageLatency = \"OutgoingChatMessageLatency\" Field Value Type Description String PartitionKey Partition Id. Declaration public const string PartitionKey = \"PartitionKey\" Field Value Type Description String Partner Partner dimension name. Declaration public const string Partner = \"Partner\" Field Value Type Description String PropertyDoesNotExist Property does not exist error message Declaration public const string PropertyDoesNotExist = \"Property doesn't exist in LogEvent Properties dictionary.\" Field Value Type Description String ReplaceId The constant pointing to the replace id to be used for Api Path. Declaration public const string ReplaceId = \"<id>\" Field Value Type Description String RequestId The request ID (used to identify request-response pair) Declaration public const string RequestId = \"RequestId\" Field Value Type Description String RequestPath Request path dimension name. Declaration public const string RequestPath = \"RequestPath\" Field Value Type Description String ResponseTimeInMilliseconds The metric name of HTTP response time Declaration public const string ResponseTimeInMilliseconds = \"Response time in milli-seconds\" Field Value Type Description String Result The result. Declaration public const string Result = \"Result\" Field Value Type Description String RoutingCacheRequests The routing cache requests. Declaration public const string RoutingCacheRequests = \"RoutingCacheRequests\" Field Value Type Description String StatusCode StatusCode dimension name. Declaration public const string StatusCode = \"StatusCode\" Field Value Type Description String SuccessfulBridgedMessages Successful bridged messages constant. Declaration public const string SuccessfulBridgedMessages = \"SuccessfulBridgedMessages\" Field Value Type Description String SuccessfulChatInactivityTracking The successful chat inactivity tracking Declaration public const string SuccessfulChatInactivityTracking = \"SuccessfulChatInactivityTracking\" Field Value Type Description String SuccessfulChatInactivityTrackingSum The successful chat inactivity tracking sum. Declaration public const string SuccessfulChatInactivityTrackingSum = \"SuccessfulChatInactivityTrackingSum\" Field Value Type Description String SuccessfulChatNotifications The successful chat notifications Declaration public const string SuccessfulChatNotifications = \"SuccessfulChatNotifications\" Field Value Type Description String TenantId Tenant Id constant. Declaration public const string TenantId = \"TenantId\" Field Value Type Description String TotalChatInactivityTracking The total chat inactivity tracking Declaration public const string TotalChatInactivityTracking = \"TotalChatInactivityTracking\" Field Value Type Description String UserAgent UserAgent dimension name. Declaration public const string UserAgent = \"UserAgent\" Field Value Type Description String"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.LogEventType.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.LogEventType.html",
    "title": "Enum LogEventType",
    "keywords": "Enum LogEventType Log event type that describes what type of LogEvent this is. Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public enum LogEventType Fields Name Description HttpTrace The event used to track HTTP Calls. Metric The event used to track metrics Trace The event used to track Traces. Extension Methods AdditionalDataExtensions.SetInAdditionalData(String, Object) Extensions.Pin() Extensions.ChangeType(Type) Extensions.ChangeType<T>() Extensions.TryDispose(IGraphLogger) EnumUtils.GetDescription() ReflectionUtils.GetPropertyUsingReflection(String) ReflectionUtils.SetPropertyUsingReflection(String, Object) Validator.IsNull(String, String) Validator.NotNull<LogEventType>(String, String) Validator.Equals<LogEventType>(LogEventType, String, String) Validator.Equals<LogEventType, TE>(LogEventType, String) Validator.NotEquals<LogEventType>(LogEventType, String, String)"
  },
  "common/Microsoft.Graph.Communications.Common.Telemetry.HttpTraceType.html": {
    "href": "common/Microsoft.Graph.Communications.Common.Telemetry.HttpTraceType.html",
    "title": "Enum HttpTraceType",
    "keywords": "Enum HttpTraceType Trace used for HTTP traces. Namespace : Microsoft.Graph.Communications.Common.Telemetry Assembly : Microsoft.Graph.Communications.Common.dll Syntax public enum HttpTraceType Fields Name Description HttpRequest The HTTP request type HttpResponse The HTTP response type. Extension Methods AdditionalDataExtensions.SetInAdditionalData(String, Object) Extensions.Pin() Extensions.ChangeType(Type) Extensions.ChangeType<T>() Extensions.TryDispose(IGraphLogger) EnumUtils.GetDescription() ReflectionUtils.GetPropertyUsingReflection(String) ReflectionUtils.SetPropertyUsingReflection(String, Object) Validator.IsNull(String, String) Validator.NotNull<HttpTraceType>(String, String) Validator.Equals<HttpTraceType>(HttpTraceType, String, String) Validator.Equals<HttpTraceType, TE>(HttpTraceType, String) Validator.NotEquals<HttpTraceType>(HttpTraceType, String, String)"
  },
  "bot_media/Microsoft.Skype.Bots.Media.IMediaPlatformLogger.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.IMediaPlatformLogger.html",
    "title": "Interface IMediaPlatformLogger",
    "keywords": "Interface IMediaPlatformLogger Interface for collecting MediaPlatform logs from the Bots.Media library. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public interface IMediaPlatformLogger Methods WriteLog(LogLevel, String) Log a trace statement Declaration void WriteLog(LogLevel level, string logStatement) Parameters Type Name Description LogLevel level Level of log String logStatement The log itself."
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioMediaReceivedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioMediaReceivedEventArgs.html",
    "title": "Class AudioMediaReceivedEventArgs",
    "keywords": "Class AudioMediaReceivedEventArgs Event arguments of an AudioMediaReceived event. Inheritance Object EventArgs AudioMediaReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioMediaReceivedEventArgs : EventArgs Constructors AudioMediaReceivedEventArgs() Declaration public AudioMediaReceivedEventArgs() Properties Buffer The received audio media buffer. Declaration public AudioMediaBuffer Buffer { get; set; } Property Value Type Description AudioMediaBuffer"
  },
  "bot_media/Microsoft.Skype.Bots.Media.DataSocket.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.DataSocket.html",
    "title": "Class DataSocket",
    "keywords": "Class DataSocket Reserved for the internal use. Inheritance Object DataSocket Implements IDataSocket IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public sealed class DataSocket : IDataSocket, IDisposable, IInternalSocket Constructors DataSocket(DataSocketSettings) Reserverd for internal use. Declaration public DataSocket(DataSocketSettings settings) Parameters Type Name Description DataSocketSettings settings Methods Dispose() Reserved for the internal use. Declaration public void Dispose() Send(DataMediaBuffer, UInt32[]) Reserved for the internal use. Declaration public void Send(DataMediaBuffer buffer, uint[] recipientIds) Parameters Type Name Description DataMediaBuffer buffer UInt32 [] recipientIds Events DataMediaReceived Reserved for the internal use. Declaration public event EventHandler<DataMediaReceivedEventArgs> DataMediaReceived Event Type Type Description EventHandler < DataMediaReceivedEventArgs > DataSendStatusChanged Reserved for the internal use. Declaration public event EventHandler<DataSendStatusChangedEventArgs> DataSendStatusChanged Event Type Type Description EventHandler < DataSendStatusChangedEventArgs > MediaStreamFailure This event is raised if there is a network connection failure with the peer. To recover, the bot will need to start a new call or rejoin the meeting. Declaration public event EventHandler<MediaStreamFailureEventArgs> MediaStreamFailure Event Type Type Description EventHandler < MediaStreamFailureEventArgs > Implements IDataSocket System.IDisposable"
  },
  "bot_media/Microsoft.Skype.Bots.Media.IDataSocket.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.IDataSocket.html",
    "title": "Interface IDataSocket",
    "keywords": "Interface IDataSocket Reserved for the internal use. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public interface IDataSocket : IDisposable Methods Send(DataMediaBuffer, UInt32[]) Reserved for the internal use. Declaration void Send(DataMediaBuffer buffer, uint[] recipientIds) Parameters Type Name Description DataMediaBuffer buffer UInt32 [] recipientIds Events DataMediaReceived Reserved for the internal use. Declaration event EventHandler<DataMediaReceivedEventArgs> DataMediaReceived Event Type Type Description EventHandler < DataMediaReceivedEventArgs > DataSendStatusChanged Reserved for the internal use. Declaration event EventHandler<DataSendStatusChangedEventArgs> DataSendStatusChanged Event Type Type Description EventHandler < DataSendStatusChangedEventArgs > MediaStreamFailure This event is raised if there is a network connection failure with the peer. To recover, the bot will need to start a new call or rejoin the meeting. Declaration event EventHandler<MediaStreamFailureEventArgs> MediaStreamFailure Event Type Type Description EventHandler < MediaStreamFailureEventArgs >"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaReceiveStatus.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaReceiveStatus.html",
    "title": "Enum MediaReceiveStatus",
    "keywords": "Enum MediaReceiveStatus Indicates if the VideoSocket is capable of receiving media. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum MediaReceiveStatus Fields Name Description Active Media can be received, video subscription is allowed Inactive Media cannot be received. Video subscription is not allowed"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaSendStatus.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaSendStatus.html",
    "title": "Enum MediaSendStatus",
    "keywords": "Enum MediaSendStatus Indicates whether an AudioSocket or VideoSocket is capable of sending media. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum MediaSendStatus Fields Name Description Active Media can be sent Inactive Media cannot be sent"
  },
  "bot_media/Microsoft.Skype.Bots.Media.PerfCounterConfiguration.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.PerfCounterConfiguration.html",
    "title": "Class PerfCounterConfiguration",
    "keywords": "Class PerfCounterConfiguration Perf counter configuration Inheritance Object PerfCounterConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class PerfCounterConfiguration Constructors PerfCounterConfiguration() Constructor Declaration public PerfCounterConfiguration() Properties UseMPAzureAppHostPerfCounterProvider If set to true, will use MPAzureAppHost's default perf counter provider which uses the registered win32 perf counters Otherwise, will use the in-memory MPPerfCounterProvider that doesn't load win32 perf counters Declaration public bool UseMPAzureAppHostPerfCounterProvider { get; set; } Property Value Type Description Boolean VerifyPerfCounterConfiguration Default is true If set to false, will not verify the perf counter configuration of the bot (MediaPerf.dll and/or MP perf counters) Declaration public bool VerifyPerfCounterConfiguration { get; set; } Property Value Type Description Boolean Methods IsValidConfiguration(PerfCounterConfiguration) Checks if the config is valid Declaration public static bool IsValidConfiguration(PerfCounterConfiguration perfConfig) Parameters Type Name Description PerfCounterConfiguration perfConfig Returns Type Description Boolean ToString() ToString override Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "bot_media/Microsoft.Skype.Bots.Media.ToneReceivedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.ToneReceivedEventArgs.html",
    "title": "Class ToneReceivedEventArgs",
    "keywords": "Class ToneReceivedEventArgs Event arguments of the ToneReceived event. Inheritance Object EventArgs ToneReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class ToneReceivedEventArgs : EventArgs Constructors ToneReceivedEventArgs() Declaration public ToneReceivedEventArgs() Properties Tone Tone id Declaration public ToneId Tone { get; set; } Property Value Type Description ToneId"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoReceiveStatusChangedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoReceiveStatusChangedEventArgs.html",
    "title": "Class VideoReceiveStatusChangedEventArgs",
    "keywords": "Class VideoReceiveStatusChangedEventArgs Event arguments of a VideoReceiveStatusChanged event. Inheritance Object EventArgs VideoReceiveStatusChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoReceiveStatusChangedEventArgs : EventArgs Constructors VideoReceiveStatusChangedEventArgs() Declaration public VideoReceiveStatusChangedEventArgs() Properties MediaReceiveStatus The media receive status. Declaration public MediaReceiveStatus MediaReceiveStatus { get; set; } Property Value Type Description MediaReceiveStatus MediaType MediaType of the video socket raising the event. This could be Video or Vbss. Declaration public MediaType MediaType { get; set; } Property Value Type Description MediaType SocketId Socket Id associated with the video receive event Declaration public int SocketId { get; set; } Property Value Type Description Int32"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoResolution.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoResolution.html",
    "title": "Enum VideoResolution",
    "keywords": "Enum VideoResolution Video resolution for vbss and video Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum VideoResolution Fields Name Description HD1080p 1920 X 1080 HD720p 1280 X 720 SD180p 320 X 180 SD240p 424 X 240 SD360p 640 X 360 SD540p 960 X 540"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioVideoFramePlayer.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioVideoFramePlayer.html",
    "title": "Class AudioVideoFramePlayer",
    "keywords": "Class AudioVideoFramePlayer AudioVideoFramePlayer is responsible for streaming real time audio and video buffers. This frame player will handle audio and video sync from the audio and video buffer's timestamps Inheritance Object AudioVideoFramePlayer Implements IAudioVideoFramePlayer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioVideoFramePlayer : IAudioVideoFramePlayer Constructors AudioVideoFramePlayer(AudioSocket, VideoSocket, AudioVideoFramePlayerSettings) Constructor for the audio video frame player. Declaration public AudioVideoFramePlayer(AudioSocket audioSocket, VideoSocket videoSocket, AudioVideoFramePlayerSettings audioVideoFramePlayerSettings) Parameters Type Name Description AudioSocket audioSocket VideoSocket videoSocket AudioVideoFramePlayerSettings audioVideoFramePlayerSettings Methods ClearAsync(Boolean, List<VideoFormat>) Clear the enqueued buffers. This will also invoke Dispose() on the buffers still in the queue. Declaration public Task ClearAsync(bool clearAudio = true, List<VideoFormat> videoFormats = null) Parameters Type Name Description Boolean clearAudio true will clear the audio buffers, Default value is set to true List < VideoFormat > videoFormats list of video formats to clear, default is null Returns Type Description Task EnqueueBuffersAsync(IList<AudioMediaBuffer>, IList<VideoMediaBuffer>) Enqueue the audio and video media buffers. Usage should be to enqueue the same audio and video length, if audio and video sockets are active. Declaration public Task EnqueueBuffersAsync(IList<AudioMediaBuffer> audioMediaBuffers, IList<VideoMediaBuffer> videoMediaBuffers) Parameters Type Name Description IList < AudioMediaBuffer > audioMediaBuffers IList < VideoMediaBuffer > videoMediaBuffers Returns Type Description Task ShutdownAsync() Shuts down the player and releases allocated resources Declaration public Task ShutdownAsync() Returns Type Description Task Events LowOnFrames Event to signal the player is low on frames Declaration public event EventHandler<LowOnFramesEventArgs> LowOnFrames Event Type Type Description EventHandler < LowOnFramesEventArgs > Implements IAudioVideoFramePlayer"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioSendStatusChangedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioSendStatusChangedEventArgs.html",
    "title": "Class AudioSendStatusChangedEventArgs",
    "keywords": "Class AudioSendStatusChangedEventArgs Event arguments of an AudioSendStatusChanged event. Inheritance Object EventArgs AudioSendStatusChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioSendStatusChangedEventArgs : EventArgs Constructors AudioSendStatusChangedEventArgs() Declaration public AudioSendStatusChangedEventArgs() Properties MediaSendStatus Status if socket is ready to send media. Declaration public MediaSendStatus MediaSendStatus { get; set; } Property Value Type Description MediaSendStatus"
  },
  "bot_media/Microsoft.Skype.Bots.Media.DominantSpeakerChangedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.DominantSpeakerChangedEventArgs.html",
    "title": "Class DominantSpeakerChangedEventArgs",
    "keywords": "Class DominantSpeakerChangedEventArgs Event arguments of the DominantSpeakerChanged event. Inheritance Object EventArgs DominantSpeakerChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class DominantSpeakerChangedEventArgs : EventArgs Constructors DominantSpeakerChangedEventArgs() Declaration public DominantSpeakerChangedEventArgs() Fields None Constant value which indicates there is no dominant speaker in the conference. Declaration public const uint None = 4294967295U Field Value Type Description UInt32 Properties CurrentDominantSpeaker Current dominant speaker in the conference. The value is the MediaSourceId (MSI) of the dominant speaker in the conference. If there is no dominant speaker in the conference this value will be None (0xFFFFFFFF). Declaration public uint CurrentDominantSpeaker { get; set; } Property Value Type Description UInt32 DominantSpeakerHistory History of the dominant speakers. However, DominantSpeakerHistory won't contain any element to indicate the absence of dominant speaker in the conference. Declaration public uint[] DominantSpeakerHistory { get; set; } Property Value Type Description UInt32 []"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformHealthStatus.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformHealthStatus.html",
    "title": "Enum MediaPlatformHealthStatus",
    "keywords": "Enum MediaPlatformHealthStatus Health status of the media platform Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum MediaPlatformHealthStatus Fields Name Description HeavilyLoaded The media platform is under heavy load and the application should avoid allowing the current call volume to increase Normal The media platform is operating normally Overloaded The media platform is overloaded and new calls may be rejected"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaQualityState.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaQualityState.html",
    "title": "Enum MediaQualityState",
    "keywords": "Enum MediaQualityState Indicates the media quality state Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum MediaQualityState Fields Name Description Detected Detected Recovered Recovered"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformHealthChangedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformHealthChangedEventArgs.html",
    "title": "Class MediaPlatformHealthChangedEventArgs",
    "keywords": "Class MediaPlatformHealthChangedEventArgs Event arguments of the MediaPlatformHealthChangedEvent providing the current and previous health status of the media platform. Inheritance Object EventArgs MediaPlatformHealthChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class MediaPlatformHealthChangedEventArgs : EventArgs Constructors MediaPlatformHealthChangedEventArgs() Declaration public MediaPlatformHealthChangedEventArgs() Properties CurrentHealth The current health status. Declaration public MediaPlatformHealthStatus CurrentHealth { get; set; } Property Value Type Description MediaPlatformHealthStatus PreviousHealth The previous health status. Declaration public MediaPlatformHealthStatus PreviousHealth { get; set; } Property Value Type Description MediaPlatformHealthStatus"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoColorFormat.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoColorFormat.html",
    "title": "Enum VideoColorFormat",
    "keywords": "Enum VideoColorFormat VideoColorFormat Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum VideoColorFormat Fields Name Description H264 H264 NV12 NV12 Rgb24 RGB24 Yuy2 YUY2"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoSendStatusChangedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoSendStatusChangedEventArgs.html",
    "title": "Class VideoSendStatusChangedEventArgs",
    "keywords": "Class VideoSendStatusChangedEventArgs Event arguments of a VideoSendStatusChanged event. Inheritance Object EventArgs VideoSendStatusChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoSendStatusChangedEventArgs : EventArgs Constructors VideoSendStatusChangedEventArgs() Declaration public VideoSendStatusChangedEventArgs() Properties MediaSendStatus The media send status. Declaration public MediaSendStatus MediaSendStatus { get; set; } Property Value Type Description MediaSendStatus MediaType MediaType of the video socket raising the event. This could be Video or Vbss. Declaration public MediaType MediaType { get; set; } Property Value Type Description MediaType PreferredEncodedVideoSourceFormats The preferred video source format if encoded video is sent. Declaration public VideoFormat[] PreferredEncodedVideoSourceFormats { get; set; } Property Value Type Description VideoFormat [] PreferredVideoSourceFormat The preferred video source format if raw video is sent. Declaration public VideoFormat PreferredVideoSourceFormat { get; set; } Property Value Type Description VideoFormat SocketId The 0-based ID of the socket that is raising this event. This socket ID can be used in multiview (ie. more than 1 video socket) to determine which video socket is raising this event. The socket ID property will be present in both single view and multiview cases. The ID maps to the order in which the video sockets are provided to the Microsoft.Skype.Bots.Media.MediaPlatform (or IMediaPlatform) API CreateMediaConfiguration. Eg. If the collection of IVideoSocket objects in the CreateMediaConfiguration API contains { socketA, socketB, socketC }, the sockets will have the ID mapping of: 0 for socketA, 1 for socketB and 2 for socketC. Declaration public int SocketId { get; set; } Property Value Type Description Int32"
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.html",
    "title": "Namespace Microsoft.Graph.Communications.Calls.Media",
    "keywords": "Namespace Microsoft.Graph.Communications.Calls.Media Classes AudioSendBuffer Creates an Audio Buffer for Send and also implements Dispose MediaCallExtensions Stateful call media extensions MediaCommunicationsClientBuilderExtensions The stateful client builder extension. MediaCommunicationsClientExtensions The stateful client extension. MediaSession MediaSession.MediaProperties Gets the media properties. VideoSendBuffer Creates a Video Buffer for Send and also implements Dispose Interfaces ILocalMediaSession"
  },
  "bot_media/Microsoft.Skype.Bots.Media.DataMediaBuffer.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.DataMediaBuffer.html",
    "title": "Class DataMediaBuffer",
    "keywords": "Class DataMediaBuffer Reserved for the internal use. Inheritance Object DataMediaBuffer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public abstract class DataMediaBuffer : IDisposable Constructors DataMediaBuffer() Declaration protected DataMediaBuffer() Properties Data Reserved for the internal use. Declaration public byte[] Data { get; protected set; } Property Value Type Description Byte [] MediaSourceId Reserved for the internal use. Declaration public uint MediaSourceId { get; protected set; } Property Value Type Description UInt32 Methods Dispose() Reserved for the internal use. Declaration public void Dispose() Dispose(Boolean) Reserved for the internal use. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Implements System.IDisposable"
  },
  "bot_media/Microsoft.Skype.Bots.Media.IAudioVideoFramePlayer.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.IAudioVideoFramePlayer.html",
    "title": "Interface IAudioVideoFramePlayer",
    "keywords": "Interface IAudioVideoFramePlayer Interface for the AudioVideoFramePlayer responsible for streaming real time audio video Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public interface IAudioVideoFramePlayer Methods ClearAsync(Boolean, List<VideoFormat>) Clears media buffers from the param settings, if nothing is specified it will clear all the audio and video buffers that are in the queue Declaration Task ClearAsync(bool clearAudio = true, List<VideoFormat> videoFormats = null) Parameters Type Name Description Boolean clearAudio true will clear the audio buffers, default value is set to true List < VideoFormat > videoFormats list of video formats to clear, default value is null Returns Type Description Task EnqueueBuffersAsync(IList<AudioMediaBuffer>, IList<VideoMediaBuffer>) Enqueue the audio and video media buffers. Usage should be to enqueue the same audio and video length, if audio and video socket are active. Declaration Task EnqueueBuffersAsync(IList<AudioMediaBuffer> audioMediaBuffers, IList<VideoMediaBuffer> videoMediaBuffers) Parameters Type Name Description IList < AudioMediaBuffer > audioMediaBuffers IList < VideoMediaBuffer > videoMediaBuffers Returns Type Description Task ShutdownAsync() This will shutdown the player and clean the associated resources Declaration Task ShutdownAsync() Returns Type Description Task Events LowOnFrames This event will be raised if the player is low on frames Declaration event EventHandler<LowOnFramesEventArgs> LowOnFrames Event Type Type Description EventHandler < LowOnFramesEventArgs >"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaStreamFailureEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaStreamFailureEventArgs.html",
    "title": "Class MediaStreamFailureEventArgs",
    "keywords": "Class MediaStreamFailureEventArgs Event arguments of the MediaStreamFailure event. Inheritance Object EventArgs MediaStreamFailureEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class MediaStreamFailureEventArgs : EventArgs Constructors MediaStreamFailureEventArgs() Declaration public MediaStreamFailureEventArgs()"
  },
  "bot_media/Microsoft.Skype.Bots.Media.SkypeMediaException.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.SkypeMediaException.html",
    "title": "Class SkypeMediaException",
    "keywords": "Class SkypeMediaException Root class for the exceptions that are specific to the Skype Media Bots SDK, ie. exceptions other than the standard .NET Framework exceptions. Inheritance Object Exception SkypeMediaException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class SkypeMediaException : Exception, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoQualityType.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoQualityType.html",
    "title": "Enum VideoQualityType",
    "keywords": "Enum VideoQualityType Type of the video media quality Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum VideoQualityType Fields Name Description ReceiveFreeze Video freeze for the received stream"
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.ILocalMediaSession.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.ILocalMediaSession.html",
    "title": "Interface ILocalMediaSession",
    "keywords": "Interface ILocalMediaSession Inherited Members IDisposable.Dispose() Namespace : Microsoft.Graph.Communications.Calls.Media Assembly : Microsoft.Graph.Communications.Calls.Media.dll Syntax public interface ILocalMediaSession : IMediaSession, IDisposable Properties AudioSocket Gets the audio socket associated with this media session. Declaration IAudioSocket AudioSocket { get; } Property Value Type Description IAudioSocket DataSocket Gets the data socket associated with this media session. Declaration IDataSocket DataSocket { get; } Property Value Type Description IDataSocket VbssSocket Gets the VBSS socket associated with this media session. Declaration IVideoSocket VbssSocket { get; } Property Value Type Description IVideoSocket VideoSocket Gets the video socket associated with this media session. If current media session contains multiple sockets, this will return the first one in the list. Declaration IVideoSocket VideoSocket { get; } Property Value Type Description IVideoSocket VideoSockets Gets the list of video socket associated with this media session. Declaration IReadOnlyList<IVideoSocket> VideoSockets { get; } Property Value Type Description IReadOnlyList < IVideoSocket >"
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaCallExtensions.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaCallExtensions.html",
    "title": "Class MediaCallExtensions",
    "keywords": "Class MediaCallExtensions Stateful call media extensions Inheritance Object MediaCallExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls.Media Assembly : Microsoft.Graph.Communications.Calls.Media.dll Syntax public static class MediaCallExtensions Methods CreateMediaSession(ICall, AudioSocketSettings, VideoSocketSettings, VideoSocketSettings, DataSocketSettings, Guid) Creates a local media session for the provided call with a given socket configuration. Declaration public static ILocalMediaSession CreateMediaSession(this ICall call, AudioSocketSettings audioSocketSettings, VideoSocketSettings videoSocketSettings, VideoSocketSettings vbssSocketSettings = null, DataSocketSettings dataSocketSettings = null, Guid mediaSessionId = default(Guid)) Parameters Type Name Description ICall call The call. AudioSocketSettings audioSocketSettings The audio socket settings. VideoSocketSettings videoSocketSettings The video socket settings. VideoSocketSettings vbssSocketSettings The video based screen sharing socket settings. DataSocketSettings dataSocketSettings The data socket settings. Guid mediaSessionId The id for the media session. Returns Type Description ILocalMediaSession A ILocalMediaSession . Exceptions Type Condition ArgumentNullException If the call has not been specified. ArgumentException If the call does not have a valid identifier. CreateMediaSession(ICall, AudioSocketSettings, IEnumerable<VideoSocketSettings>, VideoSocketSettings, DataSocketSettings, Guid) Creates a local media session for the provided call with a given socket configuration. Declaration public static ILocalMediaSession CreateMediaSession(this ICall call, AudioSocketSettings audioSocketSettings, IEnumerable<VideoSocketSettings> videoSocketSettings = null, VideoSocketSettings vbssSocketSettings = null, DataSocketSettings dataSocketSettings = null, Guid mediaSessionId = default(Guid)) Parameters Type Name Description ICall call The call. AudioSocketSettings audioSocketSettings The audio socket settings. IEnumerable < VideoSocketSettings > videoSocketSettings The video socket settings. VideoSocketSettings vbssSocketSettings The video based screen sharing socket settings. DataSocketSettings dataSocketSettings The data socket settings. Guid mediaSessionId The id for the media session. Returns Type Description ILocalMediaSession A ILocalMediaSession . Exceptions Type Condition ArgumentNullException If the call has not been specified. ArgumentException If the call does not have a valid identifier. GetLocalMediaSession(ICall) Gets the local media session for this call object. Declaration public static ILocalMediaSession GetLocalMediaSession(this ICall call) Parameters Type Name Description ICall call The call. Returns Type Description ILocalMediaSession Local media session object Exceptions Type Condition InvalidCastException This call does not have a valid ILocalMediaSession object."
  },
  "bot_media/Microsoft.Skype.Bots.Media.DataMediaReceivedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.DataMediaReceivedEventArgs.html",
    "title": "Class DataMediaReceivedEventArgs",
    "keywords": "Class DataMediaReceivedEventArgs Reserved for the internal use. Inheritance Object EventArgs DataMediaReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class DataMediaReceivedEventArgs : EventArgs Constructors DataMediaReceivedEventArgs() Declaration public DataMediaReceivedEventArgs() Properties Buffer Reserved for the internal use. Declaration public DataMediaBuffer Buffer { get; } Property Value Type Description DataMediaBuffer"
  },
  "bot_media/Microsoft.Skype.Bots.Media.LogLevel.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.LogLevel.html",
    "title": "Enum LogLevel",
    "keywords": "Enum LogLevel Specifies a current logging level for a log line. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum LogLevel Fields Name Description Error Error Log Level Information Information Log Level Verbose Verbose Log Level Warning Warning Log Level"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformInstanceSettings.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformInstanceSettings.html",
    "title": "Class MediaPlatformInstanceSettings",
    "keywords": "Class MediaPlatformInstanceSettings Class that stores the settings of the Azure instance hosting the Bot Media Platform. Inheritance Object MediaPlatformInstanceSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class MediaPlatformInstanceSettings Constructors MediaPlatformInstanceSettings() Declaration public MediaPlatformInstanceSettings() Properties CertificateThumbprint Thumbprint of a local server certificate to support MTLS authentication of the Media Platform with the Microsoft Skype/Teams calling services. Declaration public string CertificateThumbprint { get; set; } Property Value Type Description String InstanceInternalPort Provides Instance InputEndpoint internal port. Declaration public int InstanceInternalPort { get; set; } Property Value Type Description Int32 InstancePublicIPAddress Provides Instance-Level Public IP address. Declaration public IPAddress InstancePublicIPAddress { get; set; } Property Value Type Description IPAddress InstancePublicPort Provides Instance InputEndpoint public port. Declaration public int InstancePublicPort { get; set; } Property Value Type Description Int32 MediaPortRange The media port range to be allocated for bot calls. Specifying media ports is optional. Declaration public PortRange MediaPortRange { get; set; } Property Value Type Description PortRange ServiceFqdn The FQDN of the Azure service hosting the Media Platform. Declaration public string ServiceFqdn { get; set; } Property Value Type Description String"
  },
  "bot_media/Microsoft.Skype.Bots.Media.StreamDirection.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.StreamDirection.html",
    "title": "Enum StreamDirection",
    "keywords": "Enum StreamDirection Stream directionality, from the point-of-view of the local media endpoint. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum StreamDirection Fields Name Description Inactive Media cannot be sent nor received Recvonly Media can be received but not sent Sendonly Media can be sent but not received Sendrecv Media can be sent and received"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoKeyFrameNeededEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoKeyFrameNeededEventArgs.html",
    "title": "Class VideoKeyFrameNeededEventArgs",
    "keywords": "Class VideoKeyFrameNeededEventArgs Event arguments of a VideoKeyFrameNeeded event. Inheritance Object EventArgs VideoKeyFrameNeededEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoKeyFrameNeededEventArgs : EventArgs Constructors VideoKeyFrameNeededEventArgs() Declaration public VideoKeyFrameNeededEventArgs() Properties MediaType MediaType of the video buffer. This could be Video or Vbss. Declaration public MediaType MediaType { get; set; } Property Value Type Description MediaType SocketId The 0-based ID of the socket that is raising this event. This socket ID can be used in multiview (ie. more than 1 video socket) to determine which video socket is raising this event. The socket ID property will be present in both single view and multiview cases. The ID maps to the order in which the video sockets are provided to the Microsoft.Skype.Bots.Media.MediaPlatform (or IMediaPlatform) API CreateMediaConfiguration. Eg. If the collection of IVideoSocket objects in the CreateMediaConfiguration API contains { socketA, socketB, socketC }, the sockets will have the ID mapping of: 0 for socketA, 1 for socketB and 2 for socketC. Declaration public int SocketId { get; set; } Property Value Type Description Int32 VideoFormats VideoFormats for which keyframe is needed Declaration public VideoFormat[] VideoFormats { get; set; } Property Value Type Description VideoFormat []"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoLowOnFramesEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoLowOnFramesEventArgs.html",
    "title": "Class VideoLowOnFramesEventArgs",
    "keywords": "Class VideoLowOnFramesEventArgs Video low on frame event args Inheritance Object EventArgs LowOnFramesEventArgs VideoLowOnFramesEventArgs Inherited Members LowOnFramesEventArgs.MediaType LowOnFramesEventArgs.RemainingMediaLengthInMS EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoLowOnFramesEventArgs : LowOnFramesEventArgs Constructors VideoLowOnFramesEventArgs() Declaration public VideoLowOnFramesEventArgs() Properties VideoFormat The video format for the low on frame event Declaration public VideoFormat VideoFormat { get; set; } Property Value Type Description VideoFormat"
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaSession.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaSession.html",
    "title": "Class MediaSession",
    "keywords": "Class MediaSession Inheritance Object MediaSession Implements ILocalMediaSession IMediaSession IDisposable Namespace : Microsoft.Graph.Communications.Calls.Media Assembly : Microsoft.Graph.Communications.Calls.Media.dll Syntax public class MediaSession : ObjectRootDisposable, ILocalMediaSession, IMediaSession, IDisposable Constructors MediaSession(IGraphLogger, Guid, AudioSocketSettings, VideoSocketSettings, VideoSocketSettings, DataSocketSettings) Initializes a new instance of the MediaSession class. Declaration public MediaSession(IGraphLogger logger, Guid mediaSessionId, AudioSocketSettings audioSocketSettings, VideoSocketSettings videoSocketSettings, VideoSocketSettings vbssSocketSettings = null, DataSocketSettings dataSocketSettings = null) Parameters Type Name Description IGraphLogger logger The logger. Guid mediaSessionId The media session id. AudioSocketSettings audioSocketSettings The audio socket settings. VideoSocketSettings videoSocketSettings The video socket settings. VideoSocketSettings vbssSocketSettings The video based screen sharing socket settings. DataSocketSettings dataSocketSettings The data socket settings. Exceptions Type Condition ArgumentException When no media session id or no valid socket settings have been specified. MediaSession(IGraphLogger, Guid, AudioSocketSettings, IEnumerable<VideoSocketSettings>, VideoSocketSettings, DataSocketSettings) Initializes a new instance of the MediaSession class. Declaration public MediaSession(IGraphLogger logger, Guid mediaSessionId, AudioSocketSettings audioSocketSettings, IEnumerable<VideoSocketSettings> videoSocketSettings = null, VideoSocketSettings vbssSocketSettings = null, DataSocketSettings dataSocketSettings = null) Parameters Type Name Description IGraphLogger logger The logger. Guid mediaSessionId The media session id. AudioSocketSettings audioSocketSettings The audio socket settings. IEnumerable < VideoSocketSettings > videoSocketSettings The video socket settings. VideoSocketSettings vbssSocketSettings The video based screen sharing socket settings. DataSocketSettings dataSocketSettings The data socket settings. Exceptions Type Condition ArgumentException When no media session id or no valid socket settings have been specified. Properties AudioSocket Gets the audio socket associated with this media session. Declaration public IAudioSocket AudioSocket { get; } Property Value Type Description IAudioSocket DataSocket Gets the data socket associated with this media session. Declaration public IDataSocket DataSocket { get; } Property Value Type Description IDataSocket MediaSessionId Declaration public Guid MediaSessionId { get; } Property Value Type Description Guid Modalities Declaration public Modality[] Modalities { get; } Property Value Type Description Modality [] VbssSocket Gets the VBSS socket associated with this media session. Declaration public IVideoSocket VbssSocket { get; } Property Value Type Description IVideoSocket VideoSocket Gets the video socket associated with this media session. If current media session contains multiple sockets, this will return the first one in the list. Declaration public IVideoSocket VideoSocket { get; } Property Value Type Description IVideoSocket VideoSockets Gets the list of video socket associated with this media session. Declaration public IReadOnlyList<IVideoSocket> VideoSockets { get; } Property Value Type Description IReadOnlyList < IVideoSocket > Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing GetMediaConfiguration() Declaration public JObject GetMediaConfiguration() Returns Type Description Newtonsoft.Json.Linq.JObject Implements ILocalMediaSession IMediaSession System.IDisposable"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoSettings.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoSettings.html",
    "title": "Class VideoSettings",
    "keywords": "Class VideoSettings Video Frame player settings Inheritance Object VideoSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoSettings Constructors VideoSettings() Declaration public VideoSettings()"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoSinkEncodingFormat.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoSinkEncodingFormat.html",
    "title": "Enum VideoSinkEncodingFormat",
    "keywords": "Enum VideoSinkEncodingFormat VideoSinkEncodingFormats Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum VideoSinkEncodingFormat Fields Name Description H264 H264 Yuv Yuv"
  },
  "bot_media/Microsoft.Skype.Bots.Media.DataSocketSettings.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.DataSocketSettings.html",
    "title": "Class DataSocketSettings",
    "keywords": "Class DataSocketSettings Reserved for the internal use. Inheritance Object DataSocketSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class DataSocketSettings Constructors DataSocketSettings() Reserved for the internal use. Declaration public DataSocketSettings() Properties CallId Reserved for the internal use. Declaration public string CallId { get; set; } Property Value Type Description String ReceiveDataType Reserved for the internal use. Declaration public DataType ReceiveDataType { get; set; } Property Value Type Description DataType SendDataType Reserved for the internal use. Declaration public DataType SendDataType { get; set; } Property Value Type Description DataType StreamDirections Reserved for the internal use. Declaration public StreamDirection StreamDirections { get; set; } Property Value Type Description StreamDirection"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoMediaReceivedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoMediaReceivedEventArgs.html",
    "title": "Class VideoMediaReceivedEventArgs",
    "keywords": "Class VideoMediaReceivedEventArgs Event arguments of a VideoMediaReceived event. Inheritance Object EventArgs VideoMediaReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoMediaReceivedEventArgs : EventArgs Constructors VideoMediaReceivedEventArgs() Declaration public VideoMediaReceivedEventArgs() Properties Buffer The received video media buffer. Declaration public VideoMediaBuffer Buffer { get; set; } Property Value Type Description VideoMediaBuffer MediaType MediaType of the video socket. This could be Video or Vbss. The MediaType is set after the socket is passed to the CreateMediaConfiguration API. It may also be set via the VideoSocketSettings during socket creation. Declaration public MediaType MediaType { get; set; } Property Value Type Description MediaType SocketId The 0-based ID of the socket that is raising this event. This socket ID can be used in multiview (ie. more than 1 video socket) to determine which video socket is raising this event. The socket ID property will be present in both single view and multiview cases. The ID maps to the order in which the video sockets are provided to the Microsoft.Skype.Bots.Media.MediaPlatform (or IMediaPlatform) API CreateMediaConfiguration. Eg. If the collection of IVideoSocket objects in the CreateMediaConfiguration API contains { socketA, socketB, socketC }, the sockets will have the ID mapping of: 0 for socketA, 1 for socketB and 2 for socketC. Declaration public int SocketId { get; set; } Property Value Type Description Int32"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioSettings.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioSettings.html",
    "title": "Class AudioSettings",
    "keywords": "Class AudioSettings Audio frame player settings Inheritance Object AudioSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioSettings Constructors AudioSettings(UInt32) Default constructor Declaration public AudioSettings(uint buffersizeInMs) Parameters Type Name Description UInt32 buffersizeInMs Properties BufferSizeInMs Audio buffer length in ms Declaration public uint BufferSizeInMs { get; set; } Property Value Type Description UInt32"
  },
  "bot_media/Microsoft.Skype.Bots.Media.DataSendStatusChangedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.DataSendStatusChangedEventArgs.html",
    "title": "Class DataSendStatusChangedEventArgs",
    "keywords": "Class DataSendStatusChangedEventArgs Reserved for the internal use. Inheritance Object EventArgs DataSendStatusChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class DataSendStatusChangedEventArgs : EventArgs Constructors DataSendStatusChangedEventArgs() Declaration public DataSendStatusChangedEventArgs() Properties MediaSendStatus Reserved for the internal use. Declaration public MediaSendStatus MediaSendStatus { get; set; } Property Value Type Description MediaSendStatus"
  },
  "bot_media/Microsoft.Skype.Bots.Media.IMediaPlatform.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.IMediaPlatform.html",
    "title": "Interface IMediaPlatform",
    "keywords": "Interface IMediaPlatform Interface to the MediaPlatform. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public interface IMediaPlatform : IDisposable Properties CurrentHealth The current health status of the media platform. Declaration MediaPlatformHealthStatus CurrentHealth { get; } Property Value Type Description MediaPlatformHealthStatus Methods CreateMediaConfiguration(IAudioSocket) Returns a serialized MediaConfiguration object representing the socket so that the Skype calling cloud can establish an audio/video call to the bot. Declaration JObject CreateMediaConfiguration(IAudioSocket audioSocket) Parameters Type Name Description IAudioSocket audioSocket Socket that handles audio. Returns Type Description Newtonsoft.Json.Linq.JObject Serialized MediaConfiguration object. Exceptions Type Condition InvalidOperationException MediaPlatform is not initialized. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. CreateMediaConfiguration(IAudioSocket, IDataSocket) Reserved for the internal use. Declaration JObject CreateMediaConfiguration(IAudioSocket audioSocket, IDataSocket dataSocket) Parameters Type Name Description IAudioSocket audioSocket IDataSocket dataSocket Returns Type Description Newtonsoft.Json.Linq.JObject CreateMediaConfiguration(IAudioSocket, IVideoSocket) Returns a serialized MediaConfiguration object representing the sockets so that the Skype calling cloud can establish an audio/video call to the bot. Declaration JObject CreateMediaConfiguration(IAudioSocket audioSocket, IVideoSocket videoSocket) Parameters Type Name Description IAudioSocket audioSocket Socket that handles audio. IVideoSocket videoSocket Socket that handles video. Returns Type Description Newtonsoft.Json.Linq.JObject Serialized MediaConfiguration object. Exceptions Type Condition ArgumentException A VideoSocket is not configured correctly. InvalidOperationException MediaPlatform is not initialized. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. CreateMediaConfiguration(IAudioSocket, IList<IVideoSocket>) Returns a serialized MediaConfiguration object representing the sockets so that the Skype calling cloud can establish an audio/video call to the bot. Declaration JObject CreateMediaConfiguration(IAudioSocket audioSocket, IList<IVideoSocket> videoSockets) Parameters Type Name Description IAudioSocket audioSocket Socket that handles audio. IList < IVideoSocket > videoSockets Ordered list of video sockets. If multiview sockets are provided, only the first one can have a send direction (ie. send only or send receive) and all the sockets should have a receive direction. Returns Type Description Newtonsoft.Json.Linq.JObject Serialized MediaConfiguration object. Exceptions Type Condition ArgumentException A VideoSocket is not configured correctly. InvalidOperationException MediaPlatform is not initialized. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. CreateMediaConfiguration(IAudioSocket, IList<IVideoSocket>, IVideoSocket) Returns a serialized MediaConfiguration object representing the sockets so that the Skype calling cloud can establish an audio/video/video-based screen sharing call to the bot. Declaration JObject CreateMediaConfiguration(IAudioSocket audioSocket, IList<IVideoSocket> videoSockets, IVideoSocket vbssSocket) Parameters Type Name Description IAudioSocket audioSocket Socket that handles audio. IList < IVideoSocket > videoSockets Ordered list of video sockets. If multiview sockets are provided, only the first one can have a send direction (ie. send only or send receive) and all the sockets should have a receive direction. IVideoSocket vbssSocket Video socket for the video-based screen sharing (VBSS) modality. Socket must be configured as RecvOnly. Returns Type Description Newtonsoft.Json.Linq.JObject Exceptions Type Condition ArgumentException A VideoSocket is not configured correctly. InvalidOperationException MediaPlatform is not initialized, or a vbssSocket is configured to be sendonly or sendrecv. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. CreateMediaConfiguration(IAudioSocket, IList<IVideoSocket>, IVideoSocket, IDataSocket) Reserved for the internal use. Declaration JObject CreateMediaConfiguration(IAudioSocket audioSocket, IList<IVideoSocket> videoSockets, IVideoSocket vbssSocket, IDataSocket dataSocket) Parameters Type Name Description IAudioSocket audioSocket IList < IVideoSocket > videoSockets IVideoSocket vbssSocket IDataSocket dataSocket Returns Type Description Newtonsoft.Json.Linq.JObject CreateMediaConfiguration(IVideoSocket) Returns a serialized mediaConfiguration object representing the socket so that the Skype calling cloud can establish a video-based screen sharing call to the bot. Declaration JObject CreateMediaConfiguration(IVideoSocket vbssSocket) Parameters Type Name Description IVideoSocket vbssSocket Video socket for the video-based screen sharing (VBSS) modality. Socket must be configured as RecvOnly. Returns Type Description Newtonsoft.Json.Linq.JObject Exceptions Type Condition ArgumentException A VideoSocket is not configured correctly. InvalidOperationException MediaPlatform is not initialized, or a vbssSocket is configured to be sendonly or sendrecv. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. GetCurrentTimestamp() Get a current timestamp, in 100-ns units. To be used when sourcing media buffers. Declaration long GetCurrentTimestamp() Returns Type Description Int64 Initialize(MediaPlatformSettings) Initializes the Media Platform for Bot. Declaration void Initialize(MediaPlatformSettings settings) Parameters Type Name Description MediaPlatformSettings settings Settings to initialize the Bot Media Platform. Events MediaPlatformHealthChanged Raised when there is a change in the media platform's health status. The event arguments report the current and previous platform health conditions. Declaration event EventHandler<MediaPlatformHealthChangedEventArgs> MediaPlatformHealthChanged Event Type Type Description EventHandler < MediaPlatformHealthChangedEventArgs > Remarks A bot application which may handle very high call volumes or perform complex real-time media processing should monitor this event for changes in the media platform health status. When the event reports the platform health status has become HeavilyLoaded, the application should avoid starting new bot calls on the machine instance until the health status returns back to Normal."
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformFactory.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformFactory.html",
    "title": "Class MediaPlatformFactory",
    "keywords": "Class MediaPlatformFactory MediaPlatformFactory that is used to create IMediaPlatform. Inheritance Object MediaPlatformFactory Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public static class MediaPlatformFactory Methods CreateMediaPlatform() Creates the Media Platform for bots. The platform has to be initialized before it is used. Declaration public static IMediaPlatform CreateMediaPlatform() Returns Type Description IMediaPlatform The interface to the Media Platform."
  },
  "bot_media/Microsoft.Skype.Bots.Media.PortRange.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.PortRange.html",
    "title": "Class PortRange",
    "keywords": "Class PortRange The Port range Inheritance Object PortRange Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class PortRange Constructors PortRange(UInt32, UInt32) The PortRange constructor Declaration public PortRange(uint minPort, uint maxPort) Parameters Type Name Description UInt32 minPort The minimum port. UInt32 maxPort The maximum port. Properties MaxPort The maximum port. Declaration public uint MaxPort { get; } Property Value Type Description UInt32 MinPort The minimum port. Declaration public uint MinPort { get; } Property Value Type Description UInt32"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoFormat.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoFormat.html",
    "title": "Class VideoFormat",
    "keywords": "Class VideoFormat VideoFormat Inheritance Object VideoFormat Implements IEquatable < VideoFormat > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoFormat : IEquatable<VideoFormat> Fields H264_1280x720_1_875Fps H264 1280x720 1.875fps video format Declaration public static readonly VideoFormat H264_1280x720_1_875Fps Field Value Type Description VideoFormat H264_1280x720_15Fps H264 1280x720 15fps video format Declaration public static readonly VideoFormat H264_1280x720_15Fps Field Value Type Description VideoFormat H264_1280x720_3_75Fps H264 1280x720 3.75fps video format Declaration public static readonly VideoFormat H264_1280x720_3_75Fps Field Value Type Description VideoFormat H264_1280x720_30Fps H264 1280x720 30fps video format Declaration public static readonly VideoFormat H264_1280x720_30Fps Field Value Type Description VideoFormat H264_1280x720_7_5Fps H264 1280x720 7.5fps video format Declaration public static readonly VideoFormat H264_1280x720_7_5Fps Field Value Type Description VideoFormat H264_1920x1080_1_875Fps H264 1920x1080 1.875fps video format Declaration public static readonly VideoFormat H264_1920x1080_1_875Fps Field Value Type Description VideoFormat H264_1920x1080_15Fps H264 1920x1080 15fps video format Declaration public static readonly VideoFormat H264_1920x1080_15Fps Field Value Type Description VideoFormat H264_1920x1080_3_75Fps H264 1920x1080 3.75fps video format Declaration public static readonly VideoFormat H264_1920x1080_3_75Fps Field Value Type Description VideoFormat H264_1920x1080_30Fps H264 1920x1080 30fps video format Declaration public static readonly VideoFormat H264_1920x1080_30Fps Field Value Type Description VideoFormat H264_1920x1080_7_5Fps H264 1920x1080 7.5fps video format Declaration public static readonly VideoFormat H264_1920x1080_7_5Fps Field Value Type Description VideoFormat H264_320x180_1_875Fps H264 320x180 1.875fps video format Declaration public static readonly VideoFormat H264_320x180_1_875Fps Field Value Type Description VideoFormat H264_320x180_15Fps H264 320x180 15fps video format Declaration public static readonly VideoFormat H264_320x180_15Fps Field Value Type Description VideoFormat H264_320x180_3_75Fps H264 320x180 3.75fps video format Declaration public static readonly VideoFormat H264_320x180_3_75Fps Field Value Type Description VideoFormat H264_320x180_7_5Fps H264 320x180 7.5fps video format Declaration public static readonly VideoFormat H264_320x180_7_5Fps Field Value Type Description VideoFormat H264_424x240_15Fps H264 424x240 15fps video format Declaration public static readonly VideoFormat H264_424x240_15Fps Field Value Type Description VideoFormat H264_640x360_15Fps H264 640x360 15fps video format Declaration public static readonly VideoFormat H264_640x360_15Fps Field Value Type Description VideoFormat H264_640x360_30Fps H264 640x360 30fps video format Declaration public static readonly VideoFormat H264_640x360_30Fps Field Value Type Description VideoFormat H264_960x540_30Fps H264 960x540 30fps video format Declaration public static readonly VideoFormat H264_960x540_30Fps Field Value Type Description VideoFormat NV12_1080x1920_30Fps NV12 1080x1920 30fps video format Declaration public static readonly VideoFormat NV12_1080x1920_30Fps Field Value Type Description VideoFormat NV12_1280x720_1_875Fps NV12 1280x720 1.875fps video format Declaration public static readonly VideoFormat NV12_1280x720_1_875Fps Field Value Type Description VideoFormat NV12_1280x720_15Fps NV12 1280x720 15fps video format Declaration public static readonly VideoFormat NV12_1280x720_15Fps Field Value Type Description VideoFormat NV12_1280x720_3_75Fps NV12 1280x720 3.75fps video format Declaration public static readonly VideoFormat NV12_1280x720_3_75Fps Field Value Type Description VideoFormat NV12_1280x720_30Fps NV12 1280x720 30fps video format Declaration public static readonly VideoFormat NV12_1280x720_30Fps Field Value Type Description VideoFormat NV12_1280x720_7_5Fps NV12 1280x720 7.5fps video format Declaration public static readonly VideoFormat NV12_1280x720_7_5Fps Field Value Type Description VideoFormat NV12_180x320_30Fps NV12 180x320 15fps video format Declaration public static readonly VideoFormat NV12_180x320_30Fps Field Value Type Description VideoFormat NV12_1920x1080_1_875Fps NV12 1920x1080 1.875fps video format Declaration public static readonly VideoFormat NV12_1920x1080_1_875Fps Field Value Type Description VideoFormat NV12_1920x1080_15Fps NV12 1920x1080 15fps video format Declaration public static readonly VideoFormat NV12_1920x1080_15Fps Field Value Type Description VideoFormat NV12_1920x1080_3_75Fps NV12 1920x1080 3.75fps video format Declaration public static readonly VideoFormat NV12_1920x1080_3_75Fps Field Value Type Description VideoFormat NV12_1920x1080_30Fps NV12 1920x1080 30fps video format Declaration public static readonly VideoFormat NV12_1920x1080_30Fps Field Value Type Description VideoFormat NV12_1920x1080_7_5Fps NV12 1920x1080 7.5fps video format Declaration public static readonly VideoFormat NV12_1920x1080_7_5Fps Field Value Type Description VideoFormat NV12_240x424_15Fps NV12 240x424 15fps video format Declaration public static readonly VideoFormat NV12_240x424_15Fps Field Value Type Description VideoFormat NV12_270x480_15Fps NV12 270x480 15fps video format Declaration public static readonly VideoFormat NV12_270x480_15Fps Field Value Type Description VideoFormat NV12_320x180_15Fps NV12 320x180 15fps video format Declaration public static readonly VideoFormat NV12_320x180_15Fps Field Value Type Description VideoFormat NV12_360x640_15Fps NV12 360x640 15fps video format Declaration public static readonly VideoFormat NV12_360x640_15Fps Field Value Type Description VideoFormat NV12_360x640_30Fps NV12 360x640 30fps video format Declaration public static readonly VideoFormat NV12_360x640_30Fps Field Value Type Description VideoFormat NV12_424x240_15Fps NV12 424x240 15fps video format Declaration public static readonly VideoFormat NV12_424x240_15Fps Field Value Type Description VideoFormat NV12_480x270_15Fps NV12 480x270 15fps video format Declaration public static readonly VideoFormat NV12_480x270_15Fps Field Value Type Description VideoFormat NV12_480x848_30Fps NV12 480x848 30fps video format Declaration public static readonly VideoFormat NV12_480x848_30Fps Field Value Type Description VideoFormat NV12_540x960_30Fps NV12 540x960 30fps video format Declaration public static readonly VideoFormat NV12_540x960_30Fps Field Value Type Description VideoFormat NV12_640x360_15Fps NV12 640x360 15fps video format Declaration public static readonly VideoFormat NV12_640x360_15Fps Field Value Type Description VideoFormat NV12_640x360_30Fps NV12 640x360 30fps video format Declaration public static readonly VideoFormat NV12_640x360_30Fps Field Value Type Description VideoFormat NV12_720x1280_30Fps NV12 720x1280 30fps video format Declaration public static readonly VideoFormat NV12_720x1280_30Fps Field Value Type Description VideoFormat NV12_848x480_30Fps NV12 848x480 30fps video format Declaration public static readonly VideoFormat NV12_848x480_30Fps Field Value Type Description VideoFormat NV12_960x540_30Fps NV12 960x540 30fps video format Declaration public static readonly VideoFormat NV12_960x540_30Fps Field Value Type Description VideoFormat Rgb24_1080x1920_30Fps Rgb24 1080x1920 30fps video format Declaration public static readonly VideoFormat Rgb24_1080x1920_30Fps Field Value Type Description VideoFormat Rgb24_1280x720_1_875Fps Rgb24 1280x720 1.875fps video format Declaration public static readonly VideoFormat Rgb24_1280x720_1_875Fps Field Value Type Description VideoFormat Rgb24_1280x720_15Fps Rgb24 1280x720 15fps video format Declaration public static readonly VideoFormat Rgb24_1280x720_15Fps Field Value Type Description VideoFormat Rgb24_1280x720_3_75Fps Rgb24 1280x720 3.75fps video format Declaration public static readonly VideoFormat Rgb24_1280x720_3_75Fps Field Value Type Description VideoFormat Rgb24_1280x720_30Fps Rgb24 1280x720 30fps video format Declaration public static readonly VideoFormat Rgb24_1280x720_30Fps Field Value Type Description VideoFormat Rgb24_1280x720_7_5Fps Rgb24 1280x720 7.5fps video format Declaration public static readonly VideoFormat Rgb24_1280x720_7_5Fps Field Value Type Description VideoFormat Rgb24_180x320_30Fps Rgb24 180x320 15fps video format Declaration public static readonly VideoFormat Rgb24_180x320_30Fps Field Value Type Description VideoFormat Rgb24_1920x1080_1_875Fps Rgb24 1920x1080 1.875fps video format Declaration public static readonly VideoFormat Rgb24_1920x1080_1_875Fps Field Value Type Description VideoFormat Rgb24_1920x1080_15Fps Rgb24 1920x1080 15fps video format Declaration public static readonly VideoFormat Rgb24_1920x1080_15Fps Field Value Type Description VideoFormat Rgb24_1920x1080_3_75Fps Rgb24 1920x1080 3.75fps video format Declaration public static readonly VideoFormat Rgb24_1920x1080_3_75Fps Field Value Type Description VideoFormat Rgb24_1920x1080_30Fps Rgb24 1920x1080 30fps video format Declaration public static readonly VideoFormat Rgb24_1920x1080_30Fps Field Value Type Description VideoFormat Rgb24_1920x1080_7_5Fps Rgb24 1920x1080 7.5fps video format Declaration public static readonly VideoFormat Rgb24_1920x1080_7_5Fps Field Value Type Description VideoFormat Rgb24_240x424_15Fps Rgb24 240x424 15fps video format Declaration public static readonly VideoFormat Rgb24_240x424_15Fps Field Value Type Description VideoFormat Rgb24_270x480_15Fps Rgb24 270x480 15fps video format Declaration public static readonly VideoFormat Rgb24_270x480_15Fps Field Value Type Description VideoFormat Rgb24_320x180_15Fps Rgb24 320x180 15fps video format Declaration public static readonly VideoFormat Rgb24_320x180_15Fps Field Value Type Description VideoFormat Rgb24_360x640_15Fps Rgb24 360x640 15fps video format Declaration public static readonly VideoFormat Rgb24_360x640_15Fps Field Value Type Description VideoFormat Rgb24_360x640_30Fps Rgb24 360x640 30fps video format Declaration public static readonly VideoFormat Rgb24_360x640_30Fps Field Value Type Description VideoFormat Rgb24_424x240_15Fps Rgb24 424x240 15fps video format Declaration public static readonly VideoFormat Rgb24_424x240_15Fps Field Value Type Description VideoFormat Rgb24_480x270_15Fps Rgb24 480x270 15fps video format Declaration public static readonly VideoFormat Rgb24_480x270_15Fps Field Value Type Description VideoFormat Rgb24_480x848_30Fps Rgb24 480x848 30fps video format Declaration public static readonly VideoFormat Rgb24_480x848_30Fps Field Value Type Description VideoFormat Rgb24_540x960_30Fps Rgb24 540x960 30fps video format Declaration public static readonly VideoFormat Rgb24_540x960_30Fps Field Value Type Description VideoFormat Rgb24_640x360_15Fps Rgb24 640x360 15fps video format Declaration public static readonly VideoFormat Rgb24_640x360_15Fps Field Value Type Description VideoFormat Rgb24_640x360_30Fps Rgb24 640x360 30fps video format Declaration public static readonly VideoFormat Rgb24_640x360_30Fps Field Value Type Description VideoFormat Rgb24_720x1280_30Fps Rgb24 720x1280 30fps video format Declaration public static readonly VideoFormat Rgb24_720x1280_30Fps Field Value Type Description VideoFormat Rgb24_848x480_30Fps Rgb24 848x480 30fps video format Declaration public static readonly VideoFormat Rgb24_848x480_30Fps Field Value Type Description VideoFormat Rgb24_960x540_30Fps Rgb24 960x540 30fps video format Declaration public static readonly VideoFormat Rgb24_960x540_30Fps Field Value Type Description VideoFormat Yuy2_1080x1920_30Fps YUY2 1080x1920 30fps video format Declaration public static readonly VideoFormat Yuy2_1080x1920_30Fps Field Value Type Description VideoFormat Yuy2_1280x720_1_875Fps YUY2 1280x720 1.875fps video format Declaration public static readonly VideoFormat Yuy2_1280x720_1_875Fps Field Value Type Description VideoFormat Yuy2_1280x720_15Fps YUY2 1280x720 15fps video format Declaration public static readonly VideoFormat Yuy2_1280x720_15Fps Field Value Type Description VideoFormat Yuy2_1280x720_3_75Fps YUY2 1280x720 3.75fps video format Declaration public static readonly VideoFormat Yuy2_1280x720_3_75Fps Field Value Type Description VideoFormat Yuy2_1280x720_30Fps YUY2 1280x720 30fps video format Declaration public static readonly VideoFormat Yuy2_1280x720_30Fps Field Value Type Description VideoFormat Yuy2_1280x720_7_5Fps YUY2 1280x720 7.5fps video format Declaration public static readonly VideoFormat Yuy2_1280x720_7_5Fps Field Value Type Description VideoFormat Yuy2_180x320_30Fps YUY2 180x320 15fps video format Declaration public static readonly VideoFormat Yuy2_180x320_30Fps Field Value Type Description VideoFormat Yuy2_1920x1080_1_875Fps YUY2 1920x1080 1.875fps video format Declaration public static readonly VideoFormat Yuy2_1920x1080_1_875Fps Field Value Type Description VideoFormat Yuy2_1920x1080_15Fps YUY2 1920x1080 15fps video format Declaration public static readonly VideoFormat Yuy2_1920x1080_15Fps Field Value Type Description VideoFormat Yuy2_1920x1080_3_75Fps YUY2 1920x1080 3.75fps video format Declaration public static readonly VideoFormat Yuy2_1920x1080_3_75Fps Field Value Type Description VideoFormat Yuy2_1920x1080_30Fps YUY2 1920x1080 30fps video format Declaration public static readonly VideoFormat Yuy2_1920x1080_30Fps Field Value Type Description VideoFormat Yuy2_1920x1080_7_5Fps YUY2 1920x1080 7.5fps video format Declaration public static readonly VideoFormat Yuy2_1920x1080_7_5Fps Field Value Type Description VideoFormat Yuy2_240x424_15Fps YUY2 240x424 15fps video format Declaration public static readonly VideoFormat Yuy2_240x424_15Fps Field Value Type Description VideoFormat Yuy2_270x480_15Fps YUY2 270x480 15fps video format Declaration public static readonly VideoFormat Yuy2_270x480_15Fps Field Value Type Description VideoFormat Yuy2_320x180_15Fps YUY2 320x180 15fps video format Declaration public static readonly VideoFormat Yuy2_320x180_15Fps Field Value Type Description VideoFormat Yuy2_360x640_15Fps YUY2 360x640 15fps video format Declaration public static readonly VideoFormat Yuy2_360x640_15Fps Field Value Type Description VideoFormat Yuy2_360x640_30Fps YUY2 360x640 30fps video format Declaration public static readonly VideoFormat Yuy2_360x640_30Fps Field Value Type Description VideoFormat Yuy2_424x240_15Fps YUY2 424x240 15fps video format Declaration public static readonly VideoFormat Yuy2_424x240_15Fps Field Value Type Description VideoFormat Yuy2_480x270_15Fps YUY2 480x270 15fps video format Declaration public static readonly VideoFormat Yuy2_480x270_15Fps Field Value Type Description VideoFormat Yuy2_480x848_30Fps YUY2 480x848 30fps video format Declaration public static readonly VideoFormat Yuy2_480x848_30Fps Field Value Type Description VideoFormat Yuy2_540x960_30Fps YUY2 540x960 30fps video format Declaration public static readonly VideoFormat Yuy2_540x960_30Fps Field Value Type Description VideoFormat Yuy2_640x360_15Fps YUY2 640x360 15fps video format Declaration public static readonly VideoFormat Yuy2_640x360_15Fps Field Value Type Description VideoFormat Yuy2_640x360_30Fps YUY2 640x360 30fps video format Declaration public static readonly VideoFormat Yuy2_640x360_30Fps Field Value Type Description VideoFormat Yuy2_720x1280_30Fps YUY2 720x1280 30fps video format Declaration public static readonly VideoFormat Yuy2_720x1280_30Fps Field Value Type Description VideoFormat Yuy2_848x480_30Fps YUY2 848x480 30fps video format Declaration public static readonly VideoFormat Yuy2_848x480_30Fps Field Value Type Description VideoFormat Yuy2_960x540_30Fps YUY2 960x540 30fps video format Declaration public static readonly VideoFormat Yuy2_960x540_30Fps Field Value Type Description VideoFormat Properties BitRate Bit rate Declaration public uint BitRate { get; } Property Value Type Description UInt32 FrameRate Frame rate Declaration public float FrameRate { get; } Property Value Type Description Single Height Height Declaration public int Height { get; } Property Value Type Description Int32 VideoColorFormat VideoColorFormat Declaration public VideoColorFormat VideoColorFormat { get; } Property Value Type Description VideoColorFormat Width Width Declaration public int Width { get; } Property Value Type Description Int32 Methods Equals(VideoFormat) Equals to compare videoformat objects Declaration public bool Equals(VideoFormat videoFormat) Parameters Type Name Description VideoFormat videoFormat Returns Type Description Boolean Equals(Object) Overrides base Equals to compare objects Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Custom GetHashCode implementation Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() ToString() Provides video format details by overriding the default ToString(). Declaration public override string ToString() Returns Type Description String Details of VideoFormat. Overrides Object.ToString() Operators Equality(VideoFormat, VideoFormat) Overload == operator to do VideoFormat comparison Declaration public static bool operator ==(VideoFormat a, VideoFormat b) Parameters Type Name Description VideoFormat a VideoFormat b Returns Type Description Boolean Inequality(VideoFormat, VideoFormat) Overload != operator to do VideoFormat comparison Declaration public static bool operator !=(VideoFormat a, VideoFormat b) Parameters Type Name Description VideoFormat a VideoFormat b Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoMediaStreamQualityChangedEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoMediaStreamQualityChangedEventArgs.html",
    "title": "Class VideoMediaStreamQualityChangedEventArgs",
    "keywords": "Class VideoMediaStreamQualityChangedEventArgs Event arguments of the video media stream quality event. Inheritance Object EventArgs VideoMediaStreamQualityChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoMediaStreamQualityChangedEventArgs : EventArgs Constructors VideoMediaStreamQualityChangedEventArgs() Declaration public VideoMediaStreamQualityChangedEventArgs() Properties MediaQualityState Indicates the media quality state of the mediaStream quality changed event Declaration public MediaQualityState MediaQualityState { get; set; } Property Value Type Description MediaQualityState SocketId Socket id associated with the event Declaration public int SocketId { get; set; } Property Value Type Description Int32 VideoQualityType Indicates the media quality type of the media stream quality changed event Declaration public VideoQualityType VideoQualityType { get; set; } Property Value Type Description VideoQualityType"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioLowOnFramesEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioLowOnFramesEventArgs.html",
    "title": "Class AudioLowOnFramesEventArgs",
    "keywords": "Class AudioLowOnFramesEventArgs Audio low on frame event args Inheritance Object EventArgs LowOnFramesEventArgs AudioLowOnFramesEventArgs Inherited Members LowOnFramesEventArgs.MediaType LowOnFramesEventArgs.RemainingMediaLengthInMS EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioLowOnFramesEventArgs : LowOnFramesEventArgs Constructors AudioLowOnFramesEventArgs() Declaration public AudioLowOnFramesEventArgs()"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioVideoFramePlayerSettings.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioVideoFramePlayerSettings.html",
    "title": "Class AudioVideoFramePlayerSettings",
    "keywords": "Class AudioVideoFramePlayerSettings AudioVideoFramePlayer settings. This will help configure the player settings. Inheritance Object AudioVideoFramePlayerSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioVideoFramePlayerSettings Constructors AudioVideoFramePlayerSettings(AudioSettings, VideoSettings, UInt32) Constructor Declaration public AudioVideoFramePlayerSettings(AudioSettings audioSettings, VideoSettings videoSettings, uint minEnqueuedMediaLengthInMs) Parameters Type Name Description AudioSettings audioSettings BufferSize needs to be set to the size of AudioMediaBuffer to be sent VideoSettings videoSettings UInt32 minEnqueuedMediaLengthInMs Properties AudioSettings Audio settings Declaration public AudioSettings AudioSettings { get; set; } Property Value Type Description AudioSettings MinEnqueuedMediaLengthInMs The minimum length after which the player will raise the LowOnFrames event Declaration public uint MinEnqueuedMediaLengthInMs { get; set; } Property Value Type Description UInt32 VideoSettings Video Settings Declaration public VideoSettings VideoSettings { get; set; } Property Value Type Description VideoSettings"
  },
  "bot_media/Microsoft.Skype.Bots.Media.HostingEnvironmentConfiguration.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.HostingEnvironmentConfiguration.html",
    "title": "Enum HostingEnvironmentConfiguration",
    "keywords": "Enum HostingEnvironmentConfiguration HostingEnvironmentConfiguration to use for the MediaPlatform. In most cases, the default value is correct. Only in Azure Government clouds do different settings need to be applied. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum HostingEnvironmentConfiguration Fields Name Description AzureGovernment Configuration specifically for hosting the platform in the Azure Government Cloud. AzureGovernmentDoD Configuration specificially for hosting the platform in the Azure Government DoD cloud. Default The default HostingEnvironmentConfiguration for the platform."
  },
  "bot_media/Microsoft.Skype.Bots.Media.LowOnFramesEventArgs.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.LowOnFramesEventArgs.html",
    "title": "Class LowOnFramesEventArgs",
    "keywords": "Class LowOnFramesEventArgs LowOnFrames event arguments Inheritance Object EventArgs LowOnFramesEventArgs AudioLowOnFramesEventArgs VideoLowOnFramesEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class LowOnFramesEventArgs : EventArgs Constructors LowOnFramesEventArgs() Declaration public LowOnFramesEventArgs() Properties MediaType MediaType of the low on frame event Declaration public MediaType MediaType { get; set; } Property Value Type Description MediaType RemainingMediaLengthInMS Remaining enqueued media length in MS Declaration public int RemainingMediaLengthInMS { get; set; } Property Value Type Description Int32"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformSettings.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaPlatformSettings.html",
    "title": "Class MediaPlatformSettings",
    "keywords": "Class MediaPlatformSettings Class that stores settings needed to initialize Bot Media Platform. Inheritance Object MediaPlatformSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class MediaPlatformSettings Constructors MediaPlatformSettings() Declaration public MediaPlatformSettings() Properties ApplicationId String that uniquely identifies the application that initializes the platform. Declaration public string ApplicationId { get; set; } Property Value Type Description String HostingEnvironmentConfiguration Specifies the HostingEnvironmentConfiguration to use for the MediaPlatform. In most cases, the default value is sufficient. Only in Azure Government clouds do different settings need to be applied. Declaration public HostingEnvironmentConfiguration HostingEnvironmentConfiguration { get; set; } Property Value Type Description HostingEnvironmentConfiguration MediaPlatformInstanceSettings The media platform instance settings. Declaration public MediaPlatformInstanceSettings MediaPlatformInstanceSettings { get; set; } Property Value Type Description MediaPlatformInstanceSettings MediaPlatformLogger Optional logger object to receive MediaPlatform traces. Declaration public IMediaPlatformLogger MediaPlatformLogger { get; set; } Property Value Type Description IMediaPlatformLogger RegionAffinity Reserved for the internal use. Declaration public string RegionAffinity { get; set; } Property Value Type Description String"
  },
  "bot_media/Microsoft.Skype.Bots.Media.ToneId.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.ToneId.html",
    "title": "Enum ToneId",
    "keywords": "Enum ToneId DTMF Tone Id enum. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum ToneId Fields Name Description A Tone A B Tone B C Tone C D Tone D Flash Tone flash Pound Pound tone Star Star tone Tone0 Tone 0 Tone1 Tone 1 Tone2 Tone 2 Tone3 Tone 3 Tone4 Tone 4 Tone5 Tone 5 Tone6 Tone 6 Tone7 Tone 7 Tone8 Tone 8 Tone9 Tone 9"
  },
  "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaCommunicationsClientExtensions.html": {
    "href": "calls_media/Microsoft.Graph.Communications.Calls.Media.MediaCommunicationsClientExtensions.html",
    "title": "Class MediaCommunicationsClientExtensions",
    "keywords": "Class MediaCommunicationsClientExtensions The stateful client extension. Inheritance Object MediaCommunicationsClientExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Graph.Communications.Calls.Media Assembly : Microsoft.Graph.Communications.Calls.Media.dll Syntax public static class MediaCommunicationsClientExtensions Methods CreateMediaSession(ICommunicationsClient, AudioSocketSettings, VideoSocketSettings, VideoSocketSettings, DataSocketSettings, Guid) Creates a local media session for the provided communications client with a given socket configuration. Declaration public static ILocalMediaSession CreateMediaSession(this ICommunicationsClient statefulClient, AudioSocketSettings audioSocketSettings, VideoSocketSettings videoSocketSettings, VideoSocketSettings vbssSocketSettings = null, DataSocketSettings dataSocketSettings = null, Guid mediaSessionId = default(Guid)) Parameters Type Name Description ICommunicationsClient statefulClient The stateful client. AudioSocketSettings audioSocketSettings The audio socket settings. VideoSocketSettings videoSocketSettings The video socket settings. VideoSocketSettings vbssSocketSettings The video based screen sharing socket settings. DataSocketSettings dataSocketSettings The data socket settings. Guid mediaSessionId The id for the media session. Returns Type Description ILocalMediaSession A ILocalMediaSession . Exceptions Type Condition ArgumentNullException If the communications client has not been specified. ArgumentException If the client does not have a valid identifier. CreateMediaSession(ICommunicationsClient, AudioSocketSettings, IEnumerable<VideoSocketSettings>, VideoSocketSettings, DataSocketSettings, Guid) Creates a local media session for the provided communications client with a given socket configuration. Declaration public static ILocalMediaSession CreateMediaSession(this ICommunicationsClient client, AudioSocketSettings audioSocketSettings, IEnumerable<VideoSocketSettings> videoSocketSettings = null, VideoSocketSettings vbssSocketSettings = null, DataSocketSettings dataSocketSettings = null, Guid mediaSessionId = default(Guid)) Parameters Type Name Description ICommunicationsClient client The communications client. AudioSocketSettings audioSocketSettings The audio socket settings. IEnumerable < VideoSocketSettings > videoSocketSettings The video socket settings. VideoSocketSettings vbssSocketSettings The video based screen sharing socket settings. DataSocketSettings dataSocketSettings The data socket settings. Guid mediaSessionId The id for the media session. Returns Type Description ILocalMediaSession A ILocalMediaSession . Exceptions Type Condition ArgumentNullException If the communications client has not been specified. ArgumentException If the client does not have a valid identifier."
  },
  "bot_media/Microsoft.Skype.Bots.Media.UnmixedAudioBuffer.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.UnmixedAudioBuffer.html",
    "title": "Struct UnmixedAudioBuffer",
    "keywords": "Struct UnmixedAudioBuffer Represents an unmanaged audio buffer containing unmixed data corresponding to a specific speaker in a conference. This structure contains a pointer to the unmanaged audio buffer, the length of the buffer and the ID of the audio source of the active speaker. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public struct UnmixedAudioBuffer Properties ActiveSpeakerId The ID of the audio source of the active speaker. Declaration public uint ActiveSpeakerId { get; } Property Value Type Description UInt32 Data Pointer to the unmanaged media buffer. Declaration public IntPtr Data { get; } Property Value Type Description IntPtr Length The length in bytes of the media buffer. Declaration public long Length { get; } Property Value Type Description Int64 OriginalSenderTimestamp Original timestamp of the unmixed audio buffer as it was sourced, in 100-ns units. This property may differ from AudioMediaBuffer.Timestamp, which represents the timestamp of when the media content was received by the bot. Declaration public long OriginalSenderTimestamp { get; } Property Value Type Description Int64 Remarks The OriginalSenderTimestamp can have a value of 0 under various circumstances, eg. in the first 4-5 seconds of the call, or during various media events (media reconnects, sample rate changes, etc)."
  },
  "bot_media/Microsoft.Skype.Bots.Media.NetworkMetrics.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.NetworkMetrics.html",
    "title": "Class NetworkMetrics",
    "keywords": "Class NetworkMetrics QoE network level metrics Inheritance Object NetworkMetrics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class NetworkMetrics Constructors NetworkMetrics() Declaration public NetworkMetrics() Properties AverageInboundPacketLossRateInPercentage Average packet loss rate on the inbound media stream Declaration public double AverageInboundPacketLossRateInPercentage { get; set; } Property Value Type Description Double AverageInboundRoundTripDelay Average round trip delay on the inbound media stream Declaration public TimeSpan AverageInboundRoundTripDelay { get; set; } Property Value Type Description TimeSpan AverageOutboundPacketLossRateInPercentage Average packet loss rate on the outbound media stream Declaration public double AverageOutboundPacketLossRateInPercentage { get; set; } Property Value Type Description Double AverageOutboundRoundTripDelay Average round trip delay on the outbound media stream Declaration public TimeSpan AverageOutboundRoundTripDelay { get; set; } Property Value Type Description TimeSpan MaximumInboundPacketLossRateInPercentage Maximum packet loss rate on the inbound media stream Declaration public double MaximumInboundPacketLossRateInPercentage { get; set; } Property Value Type Description Double MaximumInboundRoundTripDelay Maximum round trip delay on the inbound media stream Declaration public TimeSpan MaximumInboundRoundTripDelay { get; set; } Property Value Type Description TimeSpan MaximumOutboundPacketLossRateInPercentage Maximum packet loss rate on the outbound media stream Declaration public double MaximumOutboundPacketLossRateInPercentage { get; set; } Property Value Type Description Double MaximumOutboundRoundTripDelay Maximum round trip delay on the outbound media stream Declaration public TimeSpan MaximumOutboundRoundTripDelay { get; set; } Property Value Type Description TimeSpan TotalInboundPackets Total number of packets received on the inbound media stream Declaration public uint TotalInboundPackets { get; set; } Property Value Type Description UInt32 TotalOutboundPackets Total number of packets sent on the outbound media stream Declaration public uint TotalOutboundPackets { get; set; } Property Value Type Description UInt32"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoSocket.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoSocket.html",
    "title": "Class VideoSocket",
    "keywords": "Class VideoSocket Provides Send and Receive I/O access to a video stream. Inheritance Object VideoSocket Implements IVideoSocket IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public sealed class VideoSocket : IVideoSocket, IDisposable, IInternalVideoSocket, IInternalSocket Constructors VideoSocket(VideoSocketSettings) Initializes a new VideoSocket object. Declaration public VideoSocket(VideoSocketSettings settings) Parameters Type Name Description VideoSocketSettings settings Configuration settings for the VideoSocket Properties MediaType MediaType of the video socket. This could be Video or Vbss. The MediaType is set after the socket is passed to the CreateMediaConfiguration API. It may also be set via the VideoSocketSettings during socket creation. Declaration public MediaType MediaType { get; } Property Value Type Description MediaType ReceiveColorFormat VideoColorFormat to receive Declaration public VideoColorFormat ReceiveColorFormat { get; } Property Value Type Description VideoColorFormat SocketId The 0-based ID of the socket. This socket ID is useful to identify a socket in a multiview (ie. more than 1 video socket) call. The same ID is used in the event args of the VideoMediaReceived and VideoSendStatusChanged events that this class may raise. The socket ID property will be present in both single view and multiview cases. The ID maps to the order in which the video sockets are provided to the CreateMediaConfiguration API. Eg., if the collection of IVideoSocket objects in the CreateMediaConfiguration API contains {socketA, socketB, socketC}, the sockets will have the ID mapping of: 0 for socketA, 1 for socketB and 2 for socketC. Before the call to CreateMediaConfiguration, the SocketId has a value of -1. Declaration public int SocketId { get; } Property Value Type Description Int32 Methods Dispose() Disposes the object. Declaration public void Dispose() GetQualityOfExperienceData() Get the Quality of Experience (QoE) data for the audio socket. Declaration public VideoQualityOfExperienceData GetQualityOfExperienceData() Returns Type Description VideoQualityOfExperienceData Remarks The bot should fetch the QoE data no more than once every 30 seconds. To get accurate metrics, the bot should let media flow for at least 30 seconds before fetching the QoE data. RequestKeyFrame() Allows the application to request for key frame. Only valid for sockets with the ReceiveColorFormat as H264 Declaration public void RequestKeyFrame() Send(VideoMediaBuffer) Sends a frame of video media. Declaration public void Send(VideoMediaBuffer buffer) Parameters Type Name Description VideoMediaBuffer buffer VideoMediaBuffer containing the frame of video media to send. Remarks The application must create a concrete class which derives from the VideoMediaBuffer abstract class. The buffer object passed to the Send method is still potentially in-use after the method returns to the caller. The application must not free the buffer's data until the the buffer object's Dispose() method is invoked by the Media Platform. The application should be sending up to 30 video frames per second. The VideoSocket must be enabled to send media via the VideoSocketSettings.StreamDirections property. SetReceiveBandwidthLimit(UInt32) Sets the bandwidth limit on the receive stream of the VideoSocket. This is only supported if the socket supports receiving H264 video format. It is recommended to wait for the VideoReceiveStatusChanged event with MediaReceiveStatus Active state during the initial call setup before applying the receive bandwidth limit on the socket. Bandwidth range (in bits per second) for various resolutions and frame rates per media type: Media type: Video 1000000 - 4000000 1080p at 30 fps 550000 - 2500000 720p at 30 fps 375000 - 1500000 540p at 30 fps 200000 - 800000 360p at 30 fps 150000 - 250000 360p at 15 fps 120000 - 220000 240p at 15 fps 60000 - 200000 180p at 15 fps 20000 - 100000 180p at 7.5 fps 10000 - 25000 180p at 3.75 fps 1000 - 12500 180p at 1.875 fps Media type: Vbss Resolution: 1080p 2000000 - 4000000 at 30 fps 600000 - 3000000 at 15 fps 300000 - 700000 at 7.5 fps 150000 - 350000 at 3.75 fps 70000 - 200000 at 1.875 fps Declaration public void SetReceiveBandwidthLimit(uint bitsPerSecond) Parameters Type Name Description UInt32 bitsPerSecond The receive bitrate SetSendBandwidthLimit(UInt32) Sets the bandwidth limit on the send stream of the VideoSocket. This is only supported if the socket supports sending H264 video formats. It is recommended to wait for the VideoSendStatusChanged event with MediaSendStatus Active state during the initial call setup before applying the send bandwidth limit on the socket. Bandwidth range (in bits per second) for various resolutions and frame rates per media type: Media type: Video 1000000 - 4000000 1080p at 30 fps 550000 - 2500000 720p at 30 fps 375000 - 1500000 540p at 30 fps 200000 - 800000 360p at 30 fps 150000 - 250000 360p at 15 fps 120000 - 220000 240p at 15 fps 60000 - 200000 180p at 15 fps 20000 - 100000 180p at 7.5 fps 10000 - 25000 180p at 3.75 fps 1000 - 12500 180p at 1.875 fps Media type: Vbss Resolution: 1080p 2000000 - 4000000 at 30 fps 600000 - 3000000 at 15 fps 300000 - 700000 at 7.5 fps 150000 - 350000 at 3.75 fps 70000 - 200000 at 1.875 fps Declaration public void SetSendBandwidthLimit(uint bitsPerSecond) Parameters Type Name Description UInt32 bitsPerSecond The send bitrate Subscribe(VideoResolution) Request to receive the video of the peer in a 1:1 call. No need to specify a MediaSourceId. The bot cannot subscribe to a video source unless the VideoReceiveStatusChanged event is raised indicating the VideoSocket's MediaReceiveStatus is Active . Declaration public void Subscribe(VideoResolution preferredVideoResolution) Parameters Type Name Description VideoResolution preferredVideoResolution The requested video resolution. The received video frames should have this resolution if the bandwidth constraints and sender capabilities allow, however the bot may receive video frames at a resolution lower than requested. Subscribe(VideoResolution, UInt32) Request to receive the video source of a participant in a meeting or group call. The video source must be identified by its MediaSourceId available from the roster. The bot cannot subscribe to a video source unless the VideoReceiveStatusChanged event is raised indicating the VideoSocket's MediaReceiveStatus is Active . Declaration public void Subscribe(VideoResolution preferredVideoResolution, uint MediaSourceId) Parameters Type Name Description VideoResolution preferredVideoResolution The requested video resolution. The received video frames should have this resolution if the bandwidth constraints and sender capabilities allow, however the bot may receive video frames at a resolution lower than requested. UInt32 MediaSourceId Media source identifier of the video source to be received Exceptions Type Condition ObjectDisposedException Thrown if the VideoSocket is disposed. InvalidOperationException Thrown if the subscription is invalid. SkypeMediaException Thrown if an internal media failure occurs. Unsubscribe() Stops the current video subscription on the VideoSocket. The VideoMediaReceived events will stop raising video buffers. Declaration public void Unsubscribe() UpdateVideoSendCapability(VideoSendCapability) Allows the application to update dynamically the send capability (such as SupportedSendVideoFormats or MaxConcurrentSendStreams) of the video socket. The purpose of this API is to allow the application to communicate changes in VideoSocket's send capability to the platform during the call. Declaration public void UpdateVideoSendCapability(VideoSendCapability capability) Parameters Type Name Description VideoSendCapability capability Events MediaStreamFailure This event is raised if there is a network connection failure with the peer. To recover, the bot will need to start a new call or rejoin the meeting. Declaration public event EventHandler<MediaStreamFailureEventArgs> MediaStreamFailure Event Type Type Description EventHandler < MediaStreamFailureEventArgs > Remarks Note: this event can be raised even if there is no active video subscription; i.e., the VideoSocket is \"idle\" and not receiving media. MediaStreamQualityChanged The event is raised if a media stream quality change was detected Declaration public event EventHandler<VideoMediaStreamQualityChangedEventArgs> MediaStreamQualityChanged Event Type Type Description EventHandler < VideoMediaStreamQualityChangedEventArgs > VideoKeyFrameNeeded If the application has configured the VideoSocket to receive encoded media, this event is raised each time a key frame is needed. Events are serialized, so only one event at a time is raised to the app. Declaration public event EventHandler<VideoKeyFrameNeededEventArgs> VideoKeyFrameNeeded Event Type Type Description EventHandler < VideoKeyFrameNeededEventArgs > VideoMediaReceived If the application has configured the VideoSocket to receive media, this event is raised each time a frame of video media is received. Once the application has consumed the buffer, it must call the buffer's Dispose() method. Declaration public event EventHandler<VideoMediaReceivedEventArgs> VideoMediaReceived Event Type Type Description EventHandler < VideoMediaReceivedEventArgs > Remarks The incoming video frame rate is variable. The frame rate can vary between 1.875 frames per second (fps) up to 30 fps. The application must be able to receive up to 30 video buffers per second. Events are serialized, so only one event at a time is raised to the app. The event handler should return as quickly as possible; any time-consuming per-frame processing should be performed asynchronously from the event handler. VideoReceiveStatusChanged If the application has configured the VideoSocket to receive media, this event is raised to inform the application when it is ready to receive media. When the status is active the application can subscribe to a video source, when inactive video subscription won't be allowed Declaration public event EventHandler<VideoReceiveStatusChangedEventArgs> VideoReceiveStatusChanged Event Type Type Description EventHandler < VideoReceiveStatusChangedEventArgs > VideoSendStatusChanged If the application has configured the VideoSocket to send media, this event is raised to inform the application when it may begin sending media and when it should stop. The application cannot send media before receiving a VideoMediaSendStatusChanged event indicating the SendStatus is Active, such media will be discarded. Declaration public event EventHandler<VideoSendStatusChangedEventArgs> VideoSendStatusChanged Event Type Type Description EventHandler < VideoSendStatusChangedEventArgs > Implements IVideoSocket System.IDisposable"
  },
  "bot_media/Microsoft.Skype.Bots.Media.IAudioSocket.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.IAudioSocket.html",
    "title": "Interface IAudioSocket",
    "keywords": "Interface IAudioSocket Interface to an AudioSocket. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public interface IAudioSocket : IDisposable Methods GetQualityOfExperienceData() Get the Quality of Experience (QoE) data for the audio socket. Declaration AudioQualityOfExperienceData GetQualityOfExperienceData() Returns Type Description AudioQualityOfExperienceData Remarks The bot should fetch the QoE data no more than once every 30 seconds. To get accurate metrics, the bot should let media flow for at least 30 seconds before fetching the QoE data. Send(AudioMediaBuffer) Sends a frame of audio media, where a frame contains 20 milliseconds of audio content (PCM samples). Declaration void Send(AudioMediaBuffer buffer) Parameters Type Name Description AudioMediaBuffer buffer AudioMediaBuffer containing the frame of audio media to send. Remarks The application must create a concrete class which derives from the AudioMediaBuffer abstract class. The buffer object passed to the Send method is still potentially in-use after the method returns to the caller. The application must not free the buffer's frame data until the the buffer object's Dispose() method is invoked by the Media Platform. The application should be sending 50 frames of audio media per second with each frame containing 20 milliseconds of audio content. The AudioSocket must be enabled to send media via the AudioSocketSettings.StreamDirections property. SendDtmfTone(ToneId) Sends a DTMF tone. Declaration void SendDtmfTone(ToneId tone) Parameters Type Name Description ToneId tone The DTMF digit. Ranges from 0-16. Remarks Sending DTMF tone is only allowed if the AudioSocket is configured for sending media. SendDtmfTones(IEnumerable<ToneId>, Int32) Sends a sequence of DTMF tones with an optional delay between each tone. Declaration void SendDtmfTones(IEnumerable<ToneId> tones, int delayBetweenTonesInMilliseconds = -1) Parameters Type Name Description IEnumerable < ToneId > tones The list of DTMF digits to be sent. Ranges from 0-16. Int32 delayBetweenTonesInMilliseconds Delay (in milliseconds) between each DTMF tone sent. Remarks By default, the delay is set to -1 which picks a random time between 0 to 500 milliseconds. Events AudioMediaReceived If the application has configured the AudioSocket to receive media, this event is raised each time a frame of audio media is received, where a frame contains 20 milliseconds of audio content (PCM samples). Once the application has consumed the buffer, it must call the buffer's Dispose() method. Declaration event EventHandler<AudioMediaReceivedEventArgs> AudioMediaReceived Event Type Type Description EventHandler < AudioMediaReceivedEventArgs > Remarks The application must be able to handle at least 50 incoming audio buffers per second. Events are serialized, so only one event at a time is raised to the app. The event handler should return as quickly as possible; any time-consuming per-frame processing should be performed asynchronously from the event handler. AudioSendStatusChanged If the application has configured the AudioSocket to send media, this event is raised to inform the application when it may begin sending media and when it should stop. The application cannot send media before receiving a MediaSendStatusChanged event indicating the SendStatus is Started. Declaration event EventHandler<AudioSendStatusChangedEventArgs> AudioSendStatusChanged Event Type Type Description EventHandler < AudioSendStatusChangedEventArgs > DominantSpeakerChanged This event is raised when there is a change in the dominant speaker in the conference. If there is no dominant speaker in the conference, the CurrentDominantSpeaker argument in the event will have the value None (0xFFFFFFFF). Declaration event EventHandler<DominantSpeakerChangedEventArgs> DominantSpeakerChanged Event Type Type Description EventHandler < DominantSpeakerChangedEventArgs > MediaStreamFailure This event is raised if there is a network connection failure with the peer. To recover, the bot will need to start a new call or rejoin the meeting. Declaration event EventHandler<MediaStreamFailureEventArgs> MediaStreamFailure Event Type Type Description EventHandler < MediaStreamFailureEventArgs > ToneReceived This event is raised when the DTMF tone is received. ToneId enum in the event arguments indicates the tone value. Declaration event EventHandler<ToneReceivedEventArgs> ToneReceived Event Type Type Description EventHandler < ToneReceivedEventArgs >"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioMetrics.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioMetrics.html",
    "title": "Class AudioMetrics",
    "keywords": "Class AudioMetrics Audio-specific QoE metrics Inheritance Object AudioMetrics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioMetrics Constructors AudioMetrics() Declaration public AudioMetrics() Properties AverageInboundNetworkJitter Average network jitter on the inbound media stream Declaration public TimeSpan AverageInboundNetworkJitter { get; set; } Property Value Type Description TimeSpan MaximumInboundNetworkJitter Maximum network jitter on the inbound media stream Declaration public TimeSpan MaximumInboundNetworkJitter { get; set; } Property Value Type Description TimeSpan"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioSocket.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioSocket.html",
    "title": "Class AudioSocket",
    "keywords": "Class AudioSocket Provides Send and Receive I/O access to an audio stream. Inheritance Object AudioSocket Implements IAudioSocket IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public sealed class AudioSocket : IAudioSocket, IDisposable, IInternalAudioSocket, IInternalSocket Constructors AudioSocket(AudioSocketSettings) Initializes a new AudioSocket object. Declaration public AudioSocket(AudioSocketSettings settings) Parameters Type Name Description AudioSocketSettings settings Configuration settings for the AudioSocket Methods Dispose() Disposes the object Declaration public void Dispose() GetQualityOfExperienceData() Get the Quality of Experience (QoE) data for the audio socket. Declaration public AudioQualityOfExperienceData GetQualityOfExperienceData() Returns Type Description AudioQualityOfExperienceData Remarks The bot should fetch the QoE data no more than once every 30 seconds. To get accurate metrics, the bot should let media flow for at least 30 seconds before fetching the QoE data. Send(AudioMediaBuffer) Sends a frame of audio media, where a frame contains 20 milliseconds of audio content (PCM samples). Declaration public void Send(AudioMediaBuffer buffer) Parameters Type Name Description AudioMediaBuffer buffer AudioMediaBuffer containing the frame of audio media to send. Remarks The application must create a concrete class which derives from the AudioMediaBuffer abstract class. The buffer object passed to the Send method is still potentially in-use after the method returns to the caller. The application must not free the buffer's frame data until the the buffer object's Dispose() method is invoked by the Media Platform. The application should be sending 50 frames of audio media per second with each frame containing 20 milliseconds of audio content. The AudioSocket must be enabled to send media via the AudioSocketSettings.StreamDirections property. SendDtmfTone(ToneId) Sends a DTMF tone. Declaration public void SendDtmfTone(ToneId tone) Parameters Type Name Description ToneId tone The DTMF digit. Ranges from 0-16. Remarks Sending DTMF tone is only allowed if the AudioSocket is configured for sending media. SendDtmfTones(IEnumerable<ToneId>, Int32) Sends a sequence of DTMF tones with an optional delay between each tone. Declaration public void SendDtmfTones(IEnumerable<ToneId> tones, int delayBetweenTonesInMilliseconds = -1) Parameters Type Name Description IEnumerable < ToneId > tones The list of DTMF digits to be sent. Ranges from 0-16. Int32 delayBetweenTonesInMilliseconds Delay (in milliseconds) between each DTMF digit sent. Remarks By default, the delay is set to -1 which picks a random time between 0 to 500 milliseconds. Events AudioMediaReceived If the application has configured the AudioSocket to receive media, this event is raised each time a frame of audio media is received, where a frame contains 20 milliseconds of audio content (PCM samples). Once the application has consumed the buffer, it must call the buffer's Dispose() method. Declaration public event EventHandler<AudioMediaReceivedEventArgs> AudioMediaReceived Event Type Type Description EventHandler < AudioMediaReceivedEventArgs > Remarks The application must be able to handle at least 50 incoming audio buffers per second. Events are serialized, so only one event at a time is raised to the app. The event handler should return as quickly as possible; any time-consuming per-frame processing should be performed asynchronously from the event handler. AudioSendStatusChanged If the application has configured the AudioSocket to send media, this event is raised to inform the application when it may begin sending media and when it should stop. The application cannot send media before receiving a MediaSendStatusChanged event indicating the SendStatus is Active, such media will be discarded. Declaration public event EventHandler<AudioSendStatusChangedEventArgs> AudioSendStatusChanged Event Type Type Description EventHandler < AudioSendStatusChangedEventArgs > DominantSpeakerChanged This event is raised when there is a change in the dominant speaker in the conference. If there is no dominant speaker in the conference the CurrentDominantSpeaker argument in the event will have the value None (0xFFFFFFFF). Declaration public event EventHandler<DominantSpeakerChangedEventArgs> DominantSpeakerChanged Event Type Type Description EventHandler < DominantSpeakerChangedEventArgs > MediaStreamFailure This event is raised if there is a network connection failure with the peer. To recover, the bot will need to start a new call or rejoin the meeting. Declaration public event EventHandler<MediaStreamFailureEventArgs> MediaStreamFailure Event Type Type Description EventHandler < MediaStreamFailureEventArgs > ToneReceived This event is raised when the DTMF tone is received. ToneId enum indicates the tone value. Declaration public event EventHandler<ToneReceivedEventArgs> ToneReceived Event Type Type Description EventHandler < ToneReceivedEventArgs > Implements IAudioSocket System.IDisposable"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioFormat.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioFormat.html",
    "title": "Enum AudioFormat",
    "keywords": "Enum AudioFormat The audio format. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum AudioFormat Fields Name Description Pcm16K PCM 16K Pcm44KStereo PCM 44.1K Stereo"
  },
  "bot_media/index.html": {
    "href": "bot_media/index.html",
    "title": "Graph Communications Bot Media SDK",
    "keywords": "Graph Communications Bot Media SDK The Real-time Media Platform enables bots to interact with Microsoft Teams calls and meetings using real-time voice, video and screen sharing. This is an advanced capability which allows the bot to send and receive voice and video content frame by frame. The bot has \"raw\" access to the voice, video and screen sharing media streams. (Bots which process media themselves are called application-hosted media bots, as opposed to simpler service-hosted media bots that rely on the Real-time Media platform for all media processing.) For example, in a 1:1 call with a bot, as the user speaks, the bot will receive 50 audio frames per second, with each frame containing 20 milliseconds (ms) of audio. An application-hosted media bot can perform real-time speech recognition as the audio frames are received, rather than having to wait for a recording after the user has stopped speaking. The bot can also send and receive high-definition-resolution video, including video-based screen sharing content. The platform provides a simple \"socket\"-like API for the bot to send and receive media, and handles the real-time encoding and decoding of audio/video packets, using codecs such as SILK and G.722 for audio and H.264 for video. The platform also handles all media packet encryption/decryption and packet network transmission automatically, so the bot just needs to concern itself with the actual audio/video content. A real-time media bot may participate in 1:1 calls as well as meetings with multiple participants. Microsoft Real-Time Media Platform for Bots API (\"Media Access API\") Accompanying Documentation The Media Access API is offered under the terms of the Microsoft APIs Terms of Use ( https://docs.microsoft.com/en-us/legal/microsoft-apis/terms-of-use ) and this accompanying documentation. \"Media Access API\" means (i) any form of machine accessible application programming interface that Microsoft makes publicly available which provides access to a Microsoft Offering that includes media content (e.g., audio or video), including all associated tools, elements, components and executables therein, (ii) any Microsoft sample code that enables interactions with a Microsoft Offering, and (iii) documentation that Microsoft makes available to help enable your access to the Media Access API. Additional Restriction : You may NOT use the Media Access API to record or otherwise persist media content from calls or meetings that your Application accesses, or data derived from that media content. Select a class on the left to dive into the reference docs"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoSocketSettings.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoSocketSettings.html",
    "title": "Class VideoSocketSettings",
    "keywords": "Class VideoSocketSettings The video socket settings. Inheritance Object VideoSocketSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoSocketSettings Constructors VideoSocketSettings() Initializes a VideoSocketSettings object. Declaration public VideoSocketSettings() Properties CallId An alphanumeric string that uniquely identifies a call. Declaration public string CallId { get; set; } Property Value Type Description String MaxConcurrentSendStreams The maximum number of concurrent (simulcast) streams that can be sent. Declaration public uint MaxConcurrentSendStreams { get; set; } Property Value Type Description UInt32 Remarks This setting applies only if the VideoSocket uses H264 encoded video formats. MediaType Specifies the media type of the VideoSocket. Valid types are: MediaType.Video and MediaType.Vbss Declaration public MediaType? MediaType { get; set; } Property Value Type Description Nullable < MediaType > ReceiveColorFormat What color format should received video be delivered in. Currently only NV12 and H264 are allowed. Declaration public VideoColorFormat ReceiveColorFormat { get; set; } Property Value Type Description VideoColorFormat StreamDirections The directionality of the media stream. This indicates whether it is enabled to both send and receive media, or only send or only receive media. Declaration public StreamDirection StreamDirections { get; set; } Property Value Type Description StreamDirection SupportedSendVideoFormats The list of video formats the VideoSocket supports sending. Declaration public IList<VideoFormat> SupportedSendVideoFormats { get; set; } Property Value Type Description IList < VideoFormat > Remarks For the main-video modality ( MediaType.Video ), the following ten H264 send video formats are supported: H264_1920x1080_30Fps H264_1280x720_30Fps H264_960x540_30Fps H264_640x360_30Fps H264_640x360_15Fps H264_424x240_15Fps H264_320x180_15Fps H264_320x180_7_5Fps H264_320x180_3_75Fps H264_320x180_1_875Fps (If the SupportedSendVideoFormats list contains other H264 video formats for main-video, they will be ignored and not used.) At least one of the H264_320x180 video formats must be supported. For best video interoperability, the bot should support all the H264_320x180 formats. For the Vbss modality, all of the send formats must be of the same resolution. The resolution should best match the native resolution of the content to be shared. Downscaling the Vbss content to a lower resolution should be avoided (but may be necessary if the native content resolution is larger than 1080p). The bot should support as many different frame rates as possible. The 1.875 fps frame rate must be supported."
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoQualityOfExperienceData.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoQualityOfExperienceData.html",
    "title": "Class VideoQualityOfExperienceData",
    "keywords": "Class VideoQualityOfExperienceData Video quality of experience data Inheritance Object MediaQualityOfExperienceData VideoQualityOfExperienceData Inherited Members MediaQualityOfExperienceData.NetworkMetrics MediaQualityOfExperienceData.TotalMediaDuration Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoQualityOfExperienceData : MediaQualityOfExperienceData Constructors VideoQualityOfExperienceData() VideoQualityOfExperienceData constructor Declaration public VideoQualityOfExperienceData() Properties VideoMetrics Video-specific quality of experience metrics Declaration public VideoMetrics VideoMetrics { get; set; } Property Value Type Description VideoMetrics"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoSendCapability.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoSendCapability.html",
    "title": "Class VideoSendCapability",
    "keywords": "Class VideoSendCapability The Video Send Capability Inheritance Object VideoSendCapability Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoSendCapability Constructors VideoSendCapability() Declaration public VideoSendCapability() Properties MaxConcurrentSendStreams Maximum number of concurrent streams that can be sent. Declaration public uint MaxConcurrentSendStreams { get; set; } Property Value Type Description UInt32 SupportedSendVideoFormats The list of video formats the VideoSocket supports sending. Declaration public IList<VideoFormat> SupportedSendVideoFormats { get; set; } Property Value Type Description IList < VideoFormat > Remarks For the main-video modality ( MediaType.Video ), the following ten H264 send video formats are supported: H264_1920x1080_30Fps H264_1280x720_30Fps H264_960x540_30Fps H264_640x360_30Fps H264_640x360_15Fps H264_424x240_15Fps H264_320x180_15Fps H264_320x180_7_5Fps H264_320x180_3_75Fps H264_320x180_1_875Fps (If the SupportedSendVideoFormats list contains other H264 video formats for main-video, they will be ignored and not used.) At least one of the H264_320x180 video formats must be supported. For best video interoperability, the bot should support all the H264_320x180 formats. For the Vbss modality, all of the send formats must be of the same resolution. The resolution should best match the native resolution of the content to be shared. Downscaling the Vbss content to a lower resolution should be avoided (but may be necessary if the native content resolution is larger than 1080p). The bot should support as many different frame rates as possible. The 1.875 fps frame rate must be supported. Methods ToString() String representation of VideoSendCapability Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoMetrics.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoMetrics.html",
    "title": "Class VideoMetrics",
    "keywords": "Class VideoMetrics Video-specific quality of experience metrics Inheritance Object VideoMetrics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class VideoMetrics Constructors VideoMetrics() Declaration public VideoMetrics() Properties AverageInboundBitRatePerSecond Average bit rate on the inbound video stream, expressed in bits per second Declaration public uint AverageInboundBitRatePerSecond { get; set; } Property Value Type Description UInt32 AverageInboundFrameRatePerSecond Average frame rate on the inbound video stream, expressed in frames per second Declaration public double AverageInboundFrameRatePerSecond { get; set; } Property Value Type Description Double AverageOutboundBitRatePerSecond Average bit rate on the outbound video stream, expressed in bits per second Declaration public uint AverageOutboundBitRatePerSecond { get; set; } Property Value Type Description UInt32 AverageOutboundFrameRatePerSecond Average frame rate on the outbound video stream, expressed in frames per second Declaration public double AverageOutboundFrameRatePerSecond { get; set; } Property Value Type Description Double"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaQualityOfExperienceData.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaQualityOfExperienceData.html",
    "title": "Class MediaQualityOfExperienceData",
    "keywords": "Class MediaQualityOfExperienceData Media quality of experience (QoE) data Inheritance Object MediaQualityOfExperienceData AudioQualityOfExperienceData VideoQualityOfExperienceData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public abstract class MediaQualityOfExperienceData Constructors MediaQualityOfExperienceData() MediaQualityOfExperienceData constructor Declaration public MediaQualityOfExperienceData() Properties NetworkMetrics QoE network level metrics Declaration public NetworkMetrics NetworkMetrics { get; set; } Property Value Type Description NetworkMetrics TotalMediaDuration Total duration of the media stream Declaration public TimeSpan TotalMediaDuration { get; set; } Property Value Type Description TimeSpan"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioMediaBuffer.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioMediaBuffer.html",
    "title": "Class AudioMediaBuffer",
    "keywords": "Class AudioMediaBuffer Represents an unmanaged buffer containing audio media data. Inheritance Object AudioMediaBuffer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public abstract class AudioMediaBuffer : IDisposable Constructors AudioMediaBuffer() Declaration protected AudioMediaBuffer() Properties ActiveSpeakers Current active speakers in the conference. Declaration public uint[] ActiveSpeakers { get; protected set; } Property Value Type Description UInt32 [] Remarks The value is the IDs (MediaSourceIds) of the audio source of the active speakers in the conference and does not include bot's own MediaSourceId. If there is no active speaker, or there is just silence in the conference, the value is an empty array. AudioFormat The audio format. Declaration public AudioFormat AudioFormat { get; protected set; } Property Value Type Description AudioFormat Data Pointer to the unmanaged media buffer. Declaration public IntPtr Data { get; protected set; } Property Value Type Description IntPtr IsSilence Indicates if the received audio media buffer contains only silence. This property is set automatically for received audio buffers. When sending buffers via the Send method, this property is unused. Declaration public bool IsSilence { get; protected set; } Property Value Type Description Boolean Length The length in bytes of the data in the media buffer. Declaration public long Length { get; protected set; } Property Value Type Description Int64 Timestamp Timestamp of when the media content was received by the bot, or if the bot is sending media, the timestamp of when the media was sourced. It is in 100-ns units. When sourcing media buffers, this property should be set using the value from the MediaPlatform.GetCurrentTimestamp() API. Declaration public long Timestamp { get; protected set; } Property Value Type Description Int64 UnmixedAudioBuffers Contains the list of received unmixed audio buffers (up to four at a time). Declaration public UnmixedAudioBuffer[] UnmixedAudioBuffers { get; protected set; } Property Value Type Description UnmixedAudioBuffer [] Remarks This is useful for advanced meeting scenarios, such as being able to receive separate audio buffers for individual speakers. This value is set only on the receive side when the AudioSocketSetting.ReceiveUnmixedMeetingAudio property is set to true. Creating unmixed audio buffers and sending it on the AudioSocket is not supported. This property is null when unmixed buffers are not requested. Methods Dispose() Disposes the object. Declaration public void Dispose() Dispose(Boolean) Releases unmanaged resources held by the buffer object. Must be implemented in the derived class. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description Boolean disposing If true, both managed and unmanaged resources can be disposed. If false, only unmanaged resources can be disposed. Implements System.IDisposable"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaPlatform.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaPlatform.html",
    "title": "Class MediaPlatform",
    "keywords": "Class MediaPlatform This class represents the Skype Bots Media Platform. Inheritance Object MediaPlatform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public static class MediaPlatform Fields DefaultMaxMediaPort The default maximum media port. Declaration public const uint DefaultMaxMediaPort = 65535U Field Value Type Description UInt32 DefaultMinMediaPort The default minimum media port. Declaration public const uint DefaultMinMediaPort = 49152U Field Value Type Description UInt32 MaxNumberOfConcurrentSendVideoSocketsPerPlatform The maximum number of send video/vbss sockets allowed by the media plaform. Declaration public const int MaxNumberOfConcurrentSendVideoSocketsPerPlatform = 1000 Field Value Type Description Int32 MaxNumberOfVideoSocketsPerCall The maximum number of video sockets that can be passed to the CreateMediaConfiguration API. Declaration public const int MaxNumberOfVideoSocketsPerCall = 10 Field Value Type Description Int32 MinNumberOfCoresRequired The minimum number of cores that the Media Platform requires. Declaration public const int MinNumberOfCoresRequired = 2 Field Value Type Description Int32 Name Name of the Bots Media Platform Declaration public const string Name = \"SkypeBotsMediaPlatform\" Field Value Type Description String Properties CurrentHealth The current health status of the media platform. Declaration public static MediaPlatformHealthStatus CurrentHealth { get; } Property Value Type Description MediaPlatformHealthStatus Methods CreateMediaConfiguration(IAudioSocket) Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for the audio modality. Declaration public static JObject CreateMediaConfiguration(IAudioSocket audioSocket) Parameters Type Name Description IAudioSocket audioSocket Socket that handles audio. Returns Type Description Newtonsoft.Json.Linq.JObject Serialized MediaConfiguration object. Exceptions Type Condition InvalidOperationException MediaPlatform is not initialized. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. CreateMediaConfiguration(IAudioSocket, IDataSocket) Reserved for the internal use. Declaration public static JObject CreateMediaConfiguration(IAudioSocket audioSocket, IDataSocket dataSocket) Parameters Type Name Description IAudioSocket audioSocket IDataSocket dataSocket Returns Type Description Newtonsoft.Json.Linq.JObject CreateMediaConfiguration(IAudioSocket, IVideoSocket) Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for each modality. Declaration public static JObject CreateMediaConfiguration(IAudioSocket audioSocket, IVideoSocket videoSocket) Parameters Type Name Description IAudioSocket audioSocket Socket that handles audio. IVideoSocket videoSocket Socket that handles video. Returns Type Description Newtonsoft.Json.Linq.JObject Serialized MediaConfiguration object. Exceptions Type Condition ArgumentException A VideoSocket is not configured correctly. InvalidOperationException MediaPlatform is not initialized. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. CreateMediaConfiguration(IAudioSocket, IList<IVideoSocket>) Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for each modality. Declaration public static JObject CreateMediaConfiguration(IAudioSocket audioSocket, IList<IVideoSocket> videoSockets) Parameters Type Name Description IAudioSocket audioSocket Socket that handles audio. IList < IVideoSocket > videoSockets Ordered list of video sockets. The order in which the sockets are provided maps to the order of the streams exposed by MediaPaaS (eg. the first video socket in the list will correspond to the first video stream exposed in the list of MediaStreams in MediaPaaS' MediaFlow resource). If multiview sockets are provided, only the first one can have a send direction (ie. send only or send receive) and all the sockets should have a receive direction. Returns Type Description Newtonsoft.Json.Linq.JObject Serialized MediaConfiguration object. Exceptions Type Condition ArgumentException A VideoSocket is not configured correctly. InvalidOperationException MediaPlatform is not initialized. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. CreateMediaConfiguration(IAudioSocket, IList<IVideoSocket>, IVideoSocket) Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for each modality. Declaration public static JObject CreateMediaConfiguration(IAudioSocket audioSocket, IList<IVideoSocket> videoSockets, IVideoSocket vbssSocket) Parameters Type Name Description IAudioSocket audioSocket IList < IVideoSocket > videoSockets Ordered list of video sockets. The order in which the sockets are provided maps to the order of the streams exposed by MediaPaaS (eg. the first video socket in the list will correspond to the first video stream exposed in the list of MediaStreams in MediaPaaS' MediaFlow resource). If multiview sockets are provided, only the first one can have a send direction (ie. send only or send receive) and all the sockets should have a receive direction. IVideoSocket vbssSocket Video socket for the video-based screen sharing (VBSS) modality. Socket must be configured as RecvOnly. Returns Type Description Newtonsoft.Json.Linq.JObject Exceptions Type Condition ArgumentException A VideoSocket is not configured correctly. InvalidOperationException MediaPlatform is not initialized, or a vbssSocket is configured to be sendonly or sendrecv. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. CreateMediaConfiguration(IAudioSocket, IList<IVideoSocket>, IVideoSocket, IDataSocket) Reserved for the internal use. Declaration public static JObject CreateMediaConfiguration(IAudioSocket audioSocket, IList<IVideoSocket> videoSockets, IVideoSocket vbssSocket, IDataSocket dataSocket) Parameters Type Name Description IAudioSocket audioSocket IList < IVideoSocket > videoSockets IVideoSocket vbssSocket IDataSocket dataSocket Returns Type Description Newtonsoft.Json.Linq.JObject CreateMediaConfiguration(IVideoSocket) Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for each modality. Declaration public static JObject CreateMediaConfiguration(IVideoSocket vbssSocket) Parameters Type Name Description IVideoSocket vbssSocket Video socket for the video-based screen sharing (VBSS) modality. Socket must be configured as RecvOnly. Returns Type Description Newtonsoft.Json.Linq.JObject Exceptions Type Condition ArgumentException A VideoSocket is not configured correctly. InvalidOperationException MediaPlatform is not initialized, or a vbssSocket is configured to be sendonly or sendrecv. SkypeMediaException The media platform is currently overloaded and cannot handle new calls. GetCurrentTimestamp() Get a current timestamp, in 100-ns units. To be used when sourcing media buffers. Declaration public static long GetCurrentTimestamp() Returns Type Description Int64 Initialize(MediaPlatformSettings) Initializes the Media Platform for Bot. Declaration public static void Initialize(MediaPlatformSettings settings) Parameters Type Name Description MediaPlatformSettings settings Settings to initialize the Bot Media Platform. Shutdown() Shuts down the Bot Media Platform. Declaration public static void Shutdown() Events MediaPlatformHealthChanged Raised when there is a change in the media platform's health status. The event arguments report the current and previous platform health conditions. Declaration public static event EventHandler<MediaPlatformHealthChangedEventArgs> MediaPlatformHealthChanged Event Type Type Description EventHandler < MediaPlatformHealthChangedEventArgs > Remarks A bot application which may handle very high call volumes or perform complex real-time media processing should monitor this event for changes in the media platform health status. When the event reports the platform health status has become HeavilyLoaded, the application should avoid starting new bot calls on the machine instance until the health status returns back to Normal."
  },
  "bot_media/Microsoft.Skype.Bots.Media.IVideoSocket.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.IVideoSocket.html",
    "title": "Interface IVideoSocket",
    "keywords": "Interface IVideoSocket Interface to a VideoSocket. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public interface IVideoSocket : IDisposable Properties MediaType MediaType of the video socket. This could be Video or Vbss. The MediaType is set after the socket is passed to the CreateMediaConfiguration API Declaration MediaType MediaType { get; } Property Value Type Description MediaType SocketId The 0-based ID of the socket. This socket ID is useful to identify a socket in a multiview (ie. more than 1 video socket) call. The same ID is used in the event args of the VideoMediaReceived and VideoSendStatusChanged events that this class may raise. The socket ID property will be present in both single view and multiview cases. The ID maps to the order in which the video sockets are provided to the CreateMediaConfiguration API. Eg., if the collection of IVideoSocket objects in the CreateMediaConfiguration API contains {socketA, socketB, socketC}, the sockets will have the ID mapping of: 0 for socketA, 1 for socketB and 2 for socketC. Before the call to CreateMediaConfiguration, the SocketId has a value of -1. Declaration int SocketId { get; } Property Value Type Description Int32 Methods GetQualityOfExperienceData() Get the Quality of Experience (QoE) data for the video socket. Declaration VideoQualityOfExperienceData GetQualityOfExperienceData() Returns Type Description VideoQualityOfExperienceData Remarks The bot should fetch the QoE data no more than once every 30 seconds. RequestKeyFrame() Allows the application to request for key frame. Only valid for sockets with the ReceiveColorFormat as H264 Declaration void RequestKeyFrame() Send(VideoMediaBuffer) Sends a frame of video media. Declaration void Send(VideoMediaBuffer buffer) Parameters Type Name Description VideoMediaBuffer buffer VideoMediaBuffer containing the frame of video media to send. Remarks The application must create a concrete class which derives from the VideoMediaBuffer abstract class. The buffer object passed to the Send method is still potentially in-use after the method returns to the caller. The application must not free the buffer's data until the the buffer object's Dispose() method is invoked by the Media Platform. The application should be sending up to 30 video frames per second. The VideoSocket must be enabled to send media via the VideoSocketSettings.StreamDirections property. SetReceiveBandwidthLimit(UInt32) Sets the bandwidth limit on the receive stream of the VideoSocket. This is only supported if the socket supports receiving H264 video format. It is recommended to wait for the VideoReceiveStatusChanged event with MediaReceiveStatus Active state during the initial call setup before applying the receive bandwidth limit on the socket. Bandwidth range (in bits per second) for various resolutions and frame rates per media type: Media type: Video 1000000 - 4000000 1080p at 30 fps 550000 - 2500000 720p at 30 fps 375000 - 1500000 540p at 30 fps 200000 - 800000 360p at 30 fps 150000 - 250000 360p at 15 fps 120000 - 220000 240p at 15 fps 60000 - 200000 180p at 15 fps 20000 - 100000 180p at 7.5 fps 10000 - 25000 180p at 3.75 fps 1000 - 12500 180p at 1.875 fps Media type: Vbss Resolution: 1080p 2000000 - 4000000 at 30 fps 600000 - 3000000 at 15 fps 300000 - 700000 at 7.5 fps 150000 - 350000 at 3.75 fps 70000 - 200000 at 1.875 fps Declaration void SetReceiveBandwidthLimit(uint bitsPerSecond) Parameters Type Name Description UInt32 bitsPerSecond The receive bitrate SetSendBandwidthLimit(UInt32) Sets the bandwidth limit on the send stream of the VideoSocket. This is only supported if the socket supports sending H264 video formats. It is recommended to wait for the VideoSendStatusChanged event with MediaSendStatus Active state during the initial call setup before applying the send bandwidth limit on the socket. Bandwidth range (in bits per second) for various resolutions and frame rates per media type: Media type: Video 1000000 - 4000000 1080p at 30 fps 550000 - 2500000 720p at 30 fps 375000 - 1500000 540p at 30 fps 200000 - 800000 360p at 30 fps 150000 - 250000 360p at 15 fps 120000 - 220000 240p at 15 fps 60000 - 200000 180p at 15 fps 20000 - 100000 180p at 7.5 fps 10000 - 25000 180p at 3.75 fps 1000 - 12500 180p at 1.875 fps Media type: Vbss Resolution: 1080p 2000000 - 4000000 at 30 fps 600000 - 3000000 at 15 fps 300000 - 700000 at 7.5 fps 150000 - 350000 at 3.75 fps 70000 - 200000 at 1.875 fps Declaration void SetSendBandwidthLimit(uint bitsPerSecond) Parameters Type Name Description UInt32 bitsPerSecond The send bitrate Subscribe(VideoResolution) Request to receive the video of the peer in a 1:1 call. No need to specify a MediaSourceId. The bot cannot subscribe to a video source unless the VideoReceiveStatusChanged event is raised indicating the VideoSocket's MediaReceiveStatus is Active . Declaration void Subscribe(VideoResolution preferredVideoResolution) Parameters Type Name Description VideoResolution preferredVideoResolution The requested video resolution. The received video frames should have this resolution if the bandwidth constraints and sender capabilities allow, however the bot may receive video frames at a resolution lower than requested. Subscribe(VideoResolution, UInt32) Request to receive the video source of a participant in a meeting or group call. The video source must be identified by its MediaSourceId available from the roster. The bot cannot subscribe to a video source unless the VideoReceiveStatusChanged event is raised indicating the VideoSocket's MediaReceiveStatus is Active . Declaration void Subscribe(VideoResolution preferredVideoResolution, uint MediaSourceId) Parameters Type Name Description VideoResolution preferredVideoResolution The requested video resolution. The received video frames should have this resolution if the bandwidth constraints and sender capabilities allow, however the bot may receive video frames at a resolution lower than requested. UInt32 MediaSourceId Media source identifier of the video source to be received Exceptions Type Condition ObjectDisposedException Thrown if the VideoSocket is disposed. InvalidOperationException Thrown if the subscription is invalid. SkypeMediaException Thrown if an internal media failure occurs. Unsubscribe() Stops the current video subscription on the VideoSocket. The VideoMediaReceived events will stop raising video buffers. Declaration void Unsubscribe() UpdateVideoSendCapability(VideoSendCapability) Updates the send capabilities (such as SupportedSendVideoFormats or MaxConcurrentSendStreams) of the video socket, allowing the bot to add and remove video formats mid-call. Declaration void UpdateVideoSendCapability(VideoSendCapability capability) Parameters Type Name Description VideoSendCapability capability Events MediaStreamFailure This event is raised if there is a network connection failure with the peer. To recover, the bot will need to start a new call or rejoin the meeting. Declaration event EventHandler<MediaStreamFailureEventArgs> MediaStreamFailure Event Type Type Description EventHandler < MediaStreamFailureEventArgs > Remarks Note: this event can be raised even if there is no active video subscription; i.e., the VideoSocket is \"idle\" and not receiving media. MediaStreamQualityChanged The event is raised if a media stream quality change was detected Declaration event EventHandler<VideoMediaStreamQualityChangedEventArgs> MediaStreamQualityChanged Event Type Type Description EventHandler < VideoMediaStreamQualityChangedEventArgs > VideoKeyFrameNeeded If the application has configured the VideoSocket to receive encoded media, this event is raised each time a key frame is needed. Events are serialized, so only one event at a time is raised to the app. Declaration event EventHandler<VideoKeyFrameNeededEventArgs> VideoKeyFrameNeeded Event Type Type Description EventHandler < VideoKeyFrameNeededEventArgs > VideoMediaReceived If the application has configured the VideoSocket to receive media, this event is raised each time a frame of video media is received. Once the application has consumed the buffer, it must call the buffer's Dispose() method. Declaration event EventHandler<VideoMediaReceivedEventArgs> VideoMediaReceived Event Type Type Description EventHandler < VideoMediaReceivedEventArgs > Remarks The incoming video frame rate is variable. The frame rate can vary between 1.875 frames per second (fps) up to 30 fps. The application must be able to receive up to 30 video buffers per second. Events are serialized, so only one event at a time is raised to the app. The event handler should return as quickly as possible; any time-consuming per-frame processing should be performed asynchronously from the event handler. VideoReceiveStatusChanged If the application has configured the VideoSocket to receive media, this event is raised to inform the application when it is ready to receive media. When the status is active the application can subscribe to a video source, when inactive video subscription won't be allowed Declaration event EventHandler<VideoReceiveStatusChangedEventArgs> VideoReceiveStatusChanged Event Type Type Description EventHandler < VideoReceiveStatusChangedEventArgs > VideoSendStatusChanged If the application has configured the VideoSocket to send media, this event is raised to inform the application when it may begin sending media and when it should stop. The application cannot send media before receiving a VideoMediaSendStatusChanged event indicating the SendStatus is Active, such media will be discarded. Declaration event EventHandler<VideoSendStatusChangedEventArgs> VideoSendStatusChanged Event Type Type Description EventHandler < VideoSendStatusChangedEventArgs >"
  },
  "bot_media/Microsoft.Skype.Bots.Media.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.html",
    "title": "Namespace Microsoft.Skype.Bots.Media",
    "keywords": "Namespace Microsoft.Skype.Bots.Media Classes AudioLowOnFramesEventArgs Audio low on frame event args AudioMediaBuffer Represents an unmanaged buffer containing audio media data. AudioMediaReceivedEventArgs Event arguments of an AudioMediaReceived event. AudioMetrics Audio-specific QoE metrics AudioQualityOfExperienceData Audio quality of experience data AudioSendStatusChangedEventArgs Event arguments of an AudioSendStatusChanged event. AudioSettings Audio frame player settings AudioSocket Provides Send and Receive I/O access to an audio stream. AudioSocketSettings The settings to initialize the AudioSocket. AudioVideoFramePlayer AudioVideoFramePlayer is responsible for streaming real time audio and video buffers. This frame player will handle audio and video sync from the audio and video buffer's timestamps AudioVideoFramePlayerSettings AudioVideoFramePlayer settings. This will help configure the player settings. DataMediaBuffer Reserved for the internal use. DataMediaReceivedEventArgs Reserved for the internal use. DataSendStatusChangedEventArgs Reserved for the internal use. DataSocket Reserved for the internal use. DataSocketSettings Reserved for the internal use. DominantSpeakerChangedEventArgs Event arguments of the DominantSpeakerChanged event. LowOnFramesEventArgs LowOnFrames event arguments MediaPlatform This class represents the Skype Bots Media Platform. MediaPlatformFactory MediaPlatformFactory that is used to create IMediaPlatform. MediaPlatformHealthChangedEventArgs Event arguments of the MediaPlatformHealthChangedEvent providing the current and previous health status of the media platform. MediaPlatformInstanceSettings Class that stores the settings of the Azure instance hosting the Bot Media Platform. MediaPlatformSettings Class that stores settings needed to initialize Bot Media Platform. MediaQualityOfExperienceData Media quality of experience (QoE) data MediaStreamFailureEventArgs Event arguments of the MediaStreamFailure event. NetworkMetrics QoE network level metrics PerfCounterConfiguration Perf counter configuration PortRange The Port range SkypeMediaException Root class for the exceptions that are specific to the Skype Media Bots SDK, ie. exceptions other than the standard .NET Framework exceptions. ToneReceivedEventArgs Event arguments of the ToneReceived event. VideoFormat VideoFormat VideoKeyFrameNeededEventArgs Event arguments of a VideoKeyFrameNeeded event. VideoLowOnFramesEventArgs Video low on frame event args VideoMediaBuffer Represents an unmanaged buffer containing video media data. VideoMediaReceivedEventArgs Event arguments of a VideoMediaReceived event. VideoMediaStreamQualityChangedEventArgs Event arguments of the video media stream quality event. VideoMetrics Video-specific quality of experience metrics VideoQualityOfExperienceData Video quality of experience data VideoReceiveStatusChangedEventArgs Event arguments of a VideoReceiveStatusChanged event. VideoSendCapability The Video Send Capability VideoSendStatusChangedEventArgs Event arguments of a VideoSendStatusChanged event. VideoSettings Video Frame player settings VideoSocket Provides Send and Receive I/O access to a video stream. VideoSocketSettings The video socket settings. Structs UnmixedAudioBuffer Represents an unmanaged audio buffer containing unmixed data corresponding to a specific speaker in a conference. This structure contains a pointer to the unmanaged audio buffer, the length of the buffer and the ID of the audio source of the active speaker. Interfaces IAudioSocket Interface to an AudioSocket. IAudioVideoFramePlayer Interface for the AudioVideoFramePlayer responsible for streaming real time audio video IDataSocket Reserved for the internal use. IMediaPlatform Interface to the MediaPlatform. IMediaPlatformLogger Interface for collecting MediaPlatform logs from the Bots.Media library. IVideoSocket Interface to a VideoSocket. Enums AudioFormat The audio format. DataType Reserved for internal use. HostingEnvironmentConfiguration HostingEnvironmentConfiguration to use for the MediaPlatform. In most cases, the default value is correct. Only in Azure Government clouds do different settings need to be applied. LogLevel Specifies a current logging level for a log line. MediaPlatformHealthStatus Health status of the media platform MediaQualityState Indicates the media quality state MediaReceiveStatus Indicates if the VideoSocket is capable of receiving media. MediaSendStatus Indicates whether an AudioSocket or VideoSocket is capable of sending media. MediaType Indicates the media type of the socket. StreamDirection Stream directionality, from the point-of-view of the local media endpoint. ToneId DTMF Tone Id enum. VideoColorFormat VideoColorFormat VideoQualityType Type of the video media quality VideoResolution Video resolution for vbss and video VideoSinkEncodingFormat VideoSinkEncodingFormats"
  },
  "bot_media/Microsoft.Skype.Bots.Media.MediaType.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.MediaType.html",
    "title": "Enum MediaType",
    "keywords": "Enum MediaType Indicates the media type of the socket. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum MediaType Fields Name Description Audio Audio Data Reserved for internal use. Vbss Video-based screen sharing (VBSS) Video Video"
  },
  "bot_media/Microsoft.Skype.Bots.Media.VideoMediaBuffer.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.VideoMediaBuffer.html",
    "title": "Class VideoMediaBuffer",
    "keywords": "Class VideoMediaBuffer Represents an unmanaged buffer containing video media data. Inheritance Object VideoMediaBuffer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public abstract class VideoMediaBuffer : IDisposable Constructors VideoMediaBuffer() Declaration protected VideoMediaBuffer() Properties Data Pointer to the unmanaged media buffer. Declaration public IntPtr Data { get; protected set; } Property Value Type Description IntPtr Remarks For the H264 video format, Data points to the start code of the first NALU of the frame and the whole buffer contains all the NALUs of the frame in sequence separated by their start codes. The frame data is an unencrypted depacketized H.264 elementary stream. B frames and SEI messages are not supported. Supported NALU types are 7 (SPS), 8 (PPS), 5 (IDR), and 1 (non-IDR). NALU start code prefixes can be either 0x000001 (3 bytes) or 0x00000001 (4 bytes). Fragmentation and packetization of NALUs is automatically handled by the platform. When receiving video in the H264 format, the platform ensures the application always receives decodable, full frames. Length The length of data in the media buffer. Declaration public long Length { get; protected set; } Property Value Type Description Int64 MediaSourceId MediaSourceId (MSI) of the video buffer. Within group or conference video calls, the MSI value identifies the video media source. This property is populated by the Real-Time Media Platform for Bots on received video buffers. When sending buffers via the IVideoSocket.Send API, this property is unused. Declaration public uint MediaSourceId { get; protected set; } Property Value Type Description UInt32 OriginalVideoFormat Original VideoFormat of the buffer when it was sourced. It is only used when receiving video buffers via the IVideoSocket.VideoMediaReceived event handler, in which case the VideoMediaBuffer.VideoFormat property may have different Width and Height values than the OriginalVideoFormat property, which represents the original format of the buffer. The reason is that the buffer may have been resized before being transmitted, so the original Width and Height may have been resized. If the Width and Height properties of OriginalVideoFormat differ from the VideoFormat property, the consumer of the VideoMediaBuffer raised in the VideoMediaReceived event should resize the buffer to fit the OriginalVideoFormat size. When sending buffers via the IVideoSocket.Send API, this property should always be null. Declaration public VideoFormat OriginalVideoFormat { get; protected set; } Property Value Type Description VideoFormat Stride Stride of the video buffer. This property is optional when sourcing video buffers that are sent via the IVideoSocket.Send API. Stride (also called pitch) represents the number of bytes it takes to read one row of pixels in memory. It may differ from the width depending on the color format. Declaration public int Stride { get; protected set; } Property Value Type Description Int32 Timestamp Timestamp of when the media content was sourced, in 100-ns units. When sourcing media buffers, this property should be set using the value from the MediaPlatform.GetCurrentTimestamp() API. Declaration public long Timestamp { get; protected set; } Property Value Type Description Int64 VideoFormat VideoFormat of the video media buffer. Declaration public VideoFormat VideoFormat { get; protected set; } Property Value Type Description VideoFormat Methods Dispose() Disposes the object. Declaration public void Dispose() Dispose(Boolean) Releases unmanaged resources held by the buffer object. Must be implemented in the derived class. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description Boolean disposing If true, both managed and unmanaged resources can be disposed. If false, only unmanaged resources can be disposed. Implements System.IDisposable"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioQualityOfExperienceData.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioQualityOfExperienceData.html",
    "title": "Class AudioQualityOfExperienceData",
    "keywords": "Class AudioQualityOfExperienceData Audio quality of experience data Inheritance Object MediaQualityOfExperienceData AudioQualityOfExperienceData Inherited Members MediaQualityOfExperienceData.NetworkMetrics MediaQualityOfExperienceData.TotalMediaDuration Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioQualityOfExperienceData : MediaQualityOfExperienceData Constructors AudioQualityOfExperienceData() AudioQualityOfExperienceData constructor Declaration public AudioQualityOfExperienceData() Properties AudioMetrics Audio-specific QoE metrics Declaration public AudioMetrics AudioMetrics { get; set; } Property Value Type Description AudioMetrics"
  },
  "bot_media/Microsoft.Skype.Bots.Media.AudioSocketSettings.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.AudioSocketSettings.html",
    "title": "Class AudioSocketSettings",
    "keywords": "Class AudioSocketSettings The settings to initialize the AudioSocket. Inheritance Object AudioSocketSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public class AudioSocketSettings Constructors AudioSocketSettings() Initializes an AudioSocketSettings object. Declaration public AudioSocketSettings() Properties CallId An alphanumeric string that uniquely identifies a call Declaration public string CallId { get; set; } Property Value Type Description String ReceiveUnmixedMeetingAudio Allows the bot to receive separate unmixed audio buffers for individual speakers in a meeting. When set to true, up to four audio buffers, each corresponding to the top four active speakers, will be received at a time. In UnmixedMeetingAudio mode, the bot will receive only unmixed audio and not both unmixed and mixed. Declaration public bool ReceiveUnmixedMeetingAudio { get; set; } Property Value Type Description Boolean Remarks Unmixed audio is optimized for machine cognition (e.g., speech recognition) rather than for human perception (such as call recording and playback). Certain error concealment treatment (e.g., to mitigate packet loss) is not applied to the received audio stream in unmixed mode. In order to receive both mixed and unmixed audio simultaneously, the bot must establish two separate calls into the meeting. StreamDirections The directionality of the media stream. This indicates whether it is enabled to both send and receive media, or only send or only receive media. Declaration public StreamDirection StreamDirections { get; set; } Property Value Type Description StreamDirection SupportedAudioFormat The supported send/receive audio format. Declaration public AudioFormat SupportedAudioFormat { get; set; } Property Value Type Description AudioFormat"
  },
  "bot_media/Microsoft.Skype.Bots.Media.DataType.html": {
    "href": "bot_media/Microsoft.Skype.Bots.Media.DataType.html",
    "title": "Enum DataType",
    "keywords": "Enum DataType Reserved for internal use. Namespace : Microsoft.Skype.Bots.Media Assembly : Microsoft.Skype.Bots.Media.dll Syntax public enum DataType Fields Name Description MultichannelAudio Reserved for internal use. Transcript Reserved for internal use."
  }
}